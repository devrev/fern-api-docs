/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as DevrevApi from "../../..";
export declare namespace Accounts {
    interface Options {
        environment?: core.Supplier<environments.DevrevApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
/**
 * Accounts management APIs
 */
export declare class Accounts {
    protected readonly _options: Accounts.Options;
    constructor(_options: Accounts.Options);
    /**
     * Creates an account, which is a record representing a customer or an
     * organization.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.ConflictError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.accounts.create({
     *         displayName: "display_name"
     *     })
     */
    create(request: DevrevApi.AccountsCreateRequest, requestOptions?: Accounts.RequestOptions): Promise<DevrevApi.AccountsCreateResponse>;
    /**
     * Deletes an account.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.accounts.delete({
     *         id: "ACC-12345"
     *     })
     */
    delete(request: DevrevApi.AccountsDeleteRequest, requestOptions?: Accounts.RequestOptions): Promise<DevrevApi.AccountsDeleteResponse>;
    /**
     * Exports a collection of accounts.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.accounts.export({
     *         createdDateAfter: new Date("2023-01-01T12:00:00.000Z"),
     *         createdDateBefore: new Date("2023-01-01T12:00:00.000Z"),
     *         modifiedDateAfter: new Date("2023-01-01T12:00:00.000Z"),
     *         modifiedDateBefore: new Date("2023-01-01T12:00:00.000Z")
     *     })
     */
    export(request?: DevrevApi.AccountsExportQuery, requestOptions?: Accounts.RequestOptions): Promise<DevrevApi.AccountsExportResponse>;
    /**
     * Exports a collection of accounts.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.accounts.exportPost({})
     */
    exportPost(request?: DevrevApi.AccountsExportRequest, requestOptions?: Accounts.RequestOptions): Promise<DevrevApi.AccountsExportResponse>;
    /**
     * Retrieves an account's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.accounts.get({
     *         id: "ACC-12345"
     *     })
     */
    get(request: DevrevApi.AccountsGetQuery, requestOptions?: Accounts.RequestOptions): Promise<DevrevApi.AccountsGetResponse>;
    /**
     * Retrieves an account's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.accounts.getPost({
     *         id: "ACC-12345"
     *     })
     */
    getPost(request: DevrevApi.AccountsGetRequest, requestOptions?: Accounts.RequestOptions): Promise<DevrevApi.AccountsGetResponse>;
    /**
     * Gets a list of accounts.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.accounts.list({
     *         createdDateAfter: new Date("2023-01-01T12:00:00.000Z"),
     *         createdDateBefore: new Date("2023-01-01T12:00:00.000Z"),
     *         modifiedDateAfter: new Date("2023-01-01T12:00:00.000Z"),
     *         modifiedDateBefore: new Date("2023-01-01T12:00:00.000Z")
     *     })
     */
    list(request?: DevrevApi.AccountsListQuery, requestOptions?: Accounts.RequestOptions): Promise<DevrevApi.AccountsListResponse>;
    /**
     * Gets a list of accounts.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.accounts.listPost({})
     */
    listPost(request?: DevrevApi.AccountsListRequest, requestOptions?: Accounts.RequestOptions): Promise<DevrevApi.AccountsListResponse>;
    /**
     * Updates an account's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.ConflictError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.accounts.update({
     *         id: "ACC-12345"
     *     })
     */
    update(request: DevrevApi.AccountsUpdateRequest, requestOptions?: Accounts.RequestOptions): Promise<DevrevApi.AccountsUpdateResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
