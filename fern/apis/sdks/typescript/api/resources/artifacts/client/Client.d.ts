/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as DevrevApi from "../../..";
export declare namespace Artifacts {
    interface Options {
        environment?: core.Supplier<environments.DevrevApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
/**
 * Artifact (file) management APIs.
 */
export declare class Artifacts {
    protected readonly _options: Artifacts.Options;
    constructor(_options: Artifacts.Options);
    /**
     * Gets the requested artifact's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.artifacts.get({
     *         id: "ARTIFACT-12345"
     *     })
     */
    get(request: DevrevApi.ArtifactsGetQuery, requestOptions?: Artifacts.RequestOptions): Promise<DevrevApi.ArtifactsGetResponse>;
    /**
     * Gets the requested artifact's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.artifacts.getPost({
     *         id: "ARTIFACT-12345"
     *     })
     */
    getPost(request: DevrevApi.ArtifactsGetRequest, requestOptions?: Artifacts.RequestOptions): Promise<DevrevApi.ArtifactsGetResponse>;
    /**
     * List the artifacts attached to an object.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.artifacts.list({})
     */
    list(request?: DevrevApi.ArtifactsListQuery, requestOptions?: Artifacts.RequestOptions): Promise<DevrevApi.ArtifactsListResponse>;
    /**
     * List the artifacts attached to an object.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.artifacts.listPost({})
     */
    listPost(request?: DevrevApi.ArtifactsListRequest, requestOptions?: Artifacts.RequestOptions): Promise<DevrevApi.ArtifactsListResponse>;
    /**
     * Gets the download URL for the artifact.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.artifacts.locate({
     *         id: "ARTIFACT-12345"
     *     })
     */
    locate(request: DevrevApi.ArtifactsLocateQuery, requestOptions?: Artifacts.RequestOptions): Promise<DevrevApi.ArtifactsLocateResponse>;
    /**
     * Gets the download URL for the artifact.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.artifacts.locatePost({
     *         id: "ARTIFACT-12345"
     *     })
     */
    locatePost(request: DevrevApi.ArtifactsLocateRequest, requestOptions?: Artifacts.RequestOptions): Promise<DevrevApi.ArtifactsLocateResponse>;
    /**
     * Creates an artifact and generates an upload URL for its data.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.artifacts.prepare({
     *         fileName: "file_name"
     *     })
     */
    prepare(request: DevrevApi.ArtifactsPrepareRequest, requestOptions?: Artifacts.RequestOptions): Promise<DevrevApi.ArtifactsPrepareResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
