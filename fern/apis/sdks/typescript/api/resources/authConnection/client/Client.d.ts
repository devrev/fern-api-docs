/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as DevrevApi from "../../..";
export declare namespace AuthConnection {
    interface Options {
        environment?: core.Supplier<environments.DevrevApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
/**
 * Auth Connections of DevOrg.
 */
export declare class AuthConnection {
    protected readonly _options: AuthConnection.Options;
    constructor(_options: AuthConnection.Options);
    /**
     * Creates a new enterprise authentication connection for a Dev
     * organization. This authentication connection will not be enabled by
     * default for the organization and the user will need to explicitly
     * enable this. Keep in mind that at a time, only one authentication
     * connection can be enabled for a Dev organization. At present, only 5
     * enterprise connections can be created by an organization.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     */
    devOrgAuthConnectionsCreate(request: DevrevApi.DevOrgAuthConnectionsCreateRequest, requestOptions?: AuthConnection.RequestOptions): Promise<DevrevApi.DevOrgAuthConnectionsCreateResponse>;
    /**
     * Deletes an authentication connection. Only enterprise connections which
     * are explicitly set up for a Dev organization can be deleted. Default
     * connections can not be deleted using this method.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.authConnection.devOrgAuthConnectionsDelete({
     *         id: "id"
     *     })
     */
    devOrgAuthConnectionsDelete(request: DevrevApi.DevOrgAuthConnectionsDeleteRequest, requestOptions?: AuthConnection.RequestOptions): Promise<void>;
    /**
     * Retrieves the details for an authentication connection.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     */
    devOrgAuthConnectionsGet(request: DevrevApi.DevOrgAuthConnectionsGetQuery, requestOptions?: AuthConnection.RequestOptions): Promise<DevrevApi.DevOrgAuthConnectionsGetResponse>;
    /**
     * Retrieves the details for an authentication connection.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     */
    devOrgAuthConnectionsGetPost(request: DevrevApi.DevOrgAuthConnectionsGetRequest, requestOptions?: AuthConnection.RequestOptions): Promise<DevrevApi.DevOrgAuthConnectionsGetResponse>;
    /**
     * Lists all the authentication connections available for a Dev
     * organization. This list will include both social and enterprise
     * connections which are either available by default or are explicitly
     * created by the user.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.authConnection.devOrgAuthConnectionsList()
     */
    devOrgAuthConnectionsList(requestOptions?: AuthConnection.RequestOptions): Promise<DevrevApi.DevOrgAuthConnectionsListResponse>;
    /**
     * Lists all the authentication connections available for a Dev
     * organization. This list will include both social and enterprise
     * connections which are either available by default or are explicitly
     * created by the user.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.authConnection.devOrgAuthConnectionsListPost({})
     */
    devOrgAuthConnectionsListPost(request: DevrevApi.Empty, requestOptions?: AuthConnection.RequestOptions): Promise<DevrevApi.DevOrgAuthConnectionsListResponse>;
    /**
     * Enable or disable an authentication connection for a Dev organization.
     * Currently, only 1 authentication connection can be enabled at a time.
     * When a new authentication connection is enabled, the connection which
     * is currently enabled for the Dev organization is automatically
     * disabled.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.authConnection.devOrgAuthConnectionsToggle({
     *         id: "id"
     *     })
     */
    devOrgAuthConnectionsToggle(request: DevrevApi.DevOrgAuthConnectionsToggleRequest, requestOptions?: AuthConnection.RequestOptions): Promise<void>;
    /**
     * Updates an authentication connection.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     */
    devOrgAuthConnectionsUpdate(request: DevrevApi.DevOrgAuthConnectionsUpdateRequest, requestOptions?: AuthConnection.RequestOptions): Promise<DevrevApi.DevOrgAuthConnectionsUpdateResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
