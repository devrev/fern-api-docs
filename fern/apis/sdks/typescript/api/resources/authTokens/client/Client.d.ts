/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as DevrevApi from "../../..";
export declare namespace AuthTokens {
    interface Options {
        environment?: core.Supplier<environments.DevrevApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
/**
 * Security token interactions.
 */
export declare class AuthTokens {
    protected readonly _options: AuthTokens.Options;
    constructor(_options: AuthTokens.Options);
    /**
     * Creates a JWT corresponding to the requested token type for the
     * authenticated user.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.ConflictError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.authTokens.create({})
     */
    create(request?: DevrevApi.AuthTokensCreateRequest, requestOptions?: AuthTokens.RequestOptions): Promise<DevrevApi.AuthTokensCreateResponse>;
    /**
     * Revokes the token that matches the given token ID issued under the
     * given Dev organization.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.authTokens.delete({})
     */
    delete(request?: DevrevApi.AuthTokensDeleteRequest, requestOptions?: AuthTokens.RequestOptions): Promise<void>;
    /**
     * Gets the token metadata corresponding to the given token ID under the
     * given Dev organization.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.authTokens.get({
     *         tokenId: "token_id"
     *     })
     */
    get(request: DevrevApi.AuthTokensGetQuery, requestOptions?: AuthTokens.RequestOptions): Promise<DevrevApi.AuthTokensGetResponse>;
    /**
     * Gets the token metadata corresponding to the given token ID under the
     * given Dev organization.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.authTokens.getPost({
     *         tokenId: "token_id"
     *     })
     */
    getPost(request: DevrevApi.AuthTokensGetRequest, requestOptions?: AuthTokens.RequestOptions): Promise<DevrevApi.AuthTokensGetResponse>;
    /**
     * Gets the token metadata for all the tokens corresponding to the given
     * token type issued for a given subject.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.authTokens.list({})
     */
    list(request?: DevrevApi.AuthTokensListQuery, requestOptions?: AuthTokens.RequestOptions): Promise<DevrevApi.AuthTokensListResponse>;
    /**
     * Gets the token metadata for all the tokens corresponding to the given
     * token type issued for a given subject.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.authTokens.listPost({})
     */
    listPost(request?: DevrevApi.AuthTokensListRequest, requestOptions?: AuthTokens.RequestOptions): Promise<DevrevApi.AuthTokensListResponse>;
    /**
     * Revokes all the tokens that matches the given token type created by the
     * authenticated user.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.authTokens.selfDelete({})
     */
    selfDelete(request?: DevrevApi.AuthTokensSelfDeleteRequest, requestOptions?: AuthTokens.RequestOptions): Promise<void>;
    /**
     * Updates token metadata of a token issued under a given Dev
     * organization.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.authTokens.update({
     *         tokenHint: "token_hint",
     *         tokenId: "token_id"
     *     })
     */
    update(request: DevrevApi.AuthTokensUpdateRequest, requestOptions?: AuthTokens.RequestOptions): Promise<DevrevApi.AuthTokensUpdateResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
