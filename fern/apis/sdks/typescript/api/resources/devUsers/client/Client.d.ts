/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as DevrevApi from "../../..";
export declare namespace DevUsers {
    interface Options {
        environment?: core.Supplier<environments.DevrevApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
/**
 * Dev user interactions.
 */
export declare class DevUsers {
    protected readonly _options: DevUsers.Options;
    constructor(_options: DevUsers.Options);
    /**
     * Gets the requested user's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.devUsers.get({
     *         id: "id"
     *     })
     */
    get(request: DevrevApi.DevUsersGetQuery, requestOptions?: DevUsers.RequestOptions): Promise<DevrevApi.DevUsersGetResponse>;
    /**
     * Gets the requested user's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.devUsers.getPost({
     *         id: "id"
     *     })
     */
    getPost(request: DevrevApi.DevUsersGetRequest, requestOptions?: DevUsers.RequestOptions): Promise<DevrevApi.DevUsersGetResponse>;
    /**
     * Lists users within your organization.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.devUsers.list({})
     */
    list(request?: DevrevApi.DevUsersListQuery, requestOptions?: DevUsers.RequestOptions): Promise<DevrevApi.DevUsersListResponse>;
    /**
     * Lists users within your organization.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.devUsers.listPost({})
     */
    listPost(request?: DevrevApi.DevUsersListRequest, requestOptions?: DevUsers.RequestOptions): Promise<DevrevApi.DevUsersListResponse>;
    /**
     * Gets the authenticated user's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.devUsers.self()
     */
    self(requestOptions?: DevUsers.RequestOptions): Promise<DevrevApi.DevUsersSelfResponse>;
    /**
     * Gets the authenticated user's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.devUsers.selfPost({})
     */
    selfPost(request: DevrevApi.DevUsersSelfRequest, requestOptions?: DevUsers.RequestOptions): Promise<DevrevApi.DevUsersSelfResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
