/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as DevrevApi from "../../..";
export declare namespace RevOrgs {
    interface Options {
        environment?: core.Supplier<environments.DevrevApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
/**
 * Rev organization interactions.
 */
export declare class RevOrgs {
    protected readonly _options: RevOrgs.Options;
    constructor(_options: RevOrgs.Options);
    /**
     * Creates a Rev organization in the authenticated user's Dev
     * organization.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.ConflictError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.revOrgs.create({
     *         displayName: "display_name"
     *     })
     */
    create(request: DevrevApi.RevOrgsCreateRequest, requestOptions?: RevOrgs.RequestOptions): Promise<DevrevApi.RevOrgsCreateResponse>;
    /**
     * Deletes the Rev organization.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.revOrgs.delete({
     *         id: "REV-AbCdEfGh"
     *     })
     */
    delete(request: DevrevApi.RevOrgsDeleteRequest, requestOptions?: RevOrgs.RequestOptions): Promise<DevrevApi.RevOrgsDeleteResponse>;
    /**
     * Retrieves the Rev organization's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.revOrgs.get({
     *         account: "ACC-12345",
     *         id: "REV-AbCdEfGh"
     *     })
     */
    get(request?: DevrevApi.RevOrgsGetQuery, requestOptions?: RevOrgs.RequestOptions): Promise<DevrevApi.RevOrgsGetResponse>;
    /**
     * Retrieves the Rev organization's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.revOrgs.getPost({})
     */
    getPost(request?: DevrevApi.RevOrgsGetRequest, requestOptions?: RevOrgs.RequestOptions): Promise<DevrevApi.RevOrgsGetResponse>;
    /**
     * Gets the list of Rev organizations' information belonging to the
     * authenticated user's Dev Organization which the user is also authorized
     * to access.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.revOrgs.list({
     *         createdDateAfter: new Date("2023-01-01T12:00:00.000Z"),
     *         createdDateBefore: new Date("2023-01-01T12:00:00.000Z"),
     *         modifiedDateAfter: new Date("2023-01-01T12:00:00.000Z"),
     *         modifiedDateBefore: new Date("2023-01-01T12:00:00.000Z")
     *     })
     */
    list(request?: DevrevApi.RevOrgsListQuery, requestOptions?: RevOrgs.RequestOptions): Promise<DevrevApi.RevOrgsListResponse>;
    /**
     * Gets the list of Rev organizations' information belonging to the
     * authenticated user's Dev Organization which the user is also authorized
     * to access.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.revOrgs.listPost({})
     */
    listPost(request?: DevrevApi.RevOrgsListRequest, requestOptions?: RevOrgs.RequestOptions): Promise<DevrevApi.RevOrgsListResponse>;
    /**
     * Updates the Rev organization's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.ConflictError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.revOrgs.update({
     *         id: "REV-AbCdEfGh"
     *     })
     */
    update(request: DevrevApi.RevOrgsUpdateRequest, requestOptions?: RevOrgs.RequestOptions): Promise<DevrevApi.RevOrgsUpdateResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
