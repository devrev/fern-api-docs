/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as DevrevApi from "../../..";
export declare namespace Tags {
    interface Options {
        environment?: core.Supplier<environments.DevrevApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
/**
 * DevRev tag interactions.
 */
export declare class Tags {
    protected readonly _options: Tags.Options;
    constructor(_options: Tags.Options);
    /**
     * Creates a new tag, which is used to create associations between objects
     * and a logical concept denoted by the tag's name.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.tags.create({
     *         name: "name"
     *     })
     */
    create(request: DevrevApi.TagsCreateRequest, requestOptions?: Tags.RequestOptions): Promise<DevrevApi.TagsCreateResponse>;
    /**
     * Deletes a tag.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.tags.delete({
     *         id: "TAG-12345"
     *     })
     */
    delete(request: DevrevApi.TagsDeleteRequest, requestOptions?: Tags.RequestOptions): Promise<DevrevApi.TagsDeleteResponse>;
    /**
     * Gets a tag's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.tags.get({
     *         id: "TAG-12345"
     *     })
     */
    get(request: DevrevApi.TagsGetQuery, requestOptions?: Tags.RequestOptions): Promise<DevrevApi.TagsGetResponse>;
    /**
     * Gets a tag's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.tags.getPost({
     *         id: "TAG-12345"
     *     })
     */
    getPost(request: DevrevApi.TagsGetRequest, requestOptions?: Tags.RequestOptions): Promise<DevrevApi.TagsGetResponse>;
    /**
     * Lists the available tags.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.tags.list({})
     */
    list(request?: DevrevApi.TagsListQuery, requestOptions?: Tags.RequestOptions): Promise<DevrevApi.TagsListResponse>;
    /**
     * Lists the available tags.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.tags.listPost({})
     */
    listPost(request?: DevrevApi.TagsListRequest, requestOptions?: Tags.RequestOptions): Promise<DevrevApi.TagsListResponse>;
    /**
     * Updates a tag's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.tags.update({
     *         id: "TAG-12345"
     *     })
     */
    update(request: DevrevApi.TagsUpdateRequest, requestOptions?: Tags.RequestOptions): Promise<DevrevApi.TagsUpdateResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
