/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as DevrevApi from "../../..";
export declare namespace Webhooks {
    interface Options {
        environment?: core.Supplier<environments.DevrevApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
/**
 * Webhook event APIs.
 */
export declare class Webhooks {
    protected readonly _options: Webhooks.Options;
    constructor(_options: Webhooks.Options);
    /**
     * Creates a new webhook target.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.webhooks.create({
     *         url: "url"
     *     })
     */
    create(request: DevrevApi.WebhooksCreateRequest, requestOptions?: Webhooks.RequestOptions): Promise<DevrevApi.WebhooksCreateResponse>;
    /**
     * Deletes the requested webhook.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.webhooks.delete({
     *         id: "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
     *     })
     */
    delete(request: DevrevApi.WebhooksDeleteRequest, requestOptions?: Webhooks.RequestOptions): Promise<DevrevApi.WebhooksDeleteResponse>;
    /**
     * Gets the requested webhook's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.webhooks.get({
     *         id: "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
     *     })
     */
    get(request: DevrevApi.WebhooksGetQuery, requestOptions?: Webhooks.RequestOptions): Promise<DevrevApi.WebhooksGetResponse>;
    /**
     * Gets the requested webhook's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.webhooks.getPost({
     *         id: "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
     *     })
     */
    getPost(request: DevrevApi.WebhooksGetRequest, requestOptions?: Webhooks.RequestOptions): Promise<DevrevApi.WebhooksGetResponse>;
    /**
     * Lists the webhooks.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.webhooks.list()
     */
    list(requestOptions?: Webhooks.RequestOptions): Promise<DevrevApi.WebhooksListResponse>;
    /**
     * Lists the webhooks.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.webhooks.listPost({})
     */
    listPost(request: DevrevApi.WebhooksListRequest, requestOptions?: Webhooks.RequestOptions): Promise<DevrevApi.WebhooksListResponse>;
    /**
     * Updates the requested webhook.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.webhooks.update({
     *         id: "don:integration:<partition>:devo/<dev-org-id>:webhook/<webhook-id>"
     *     })
     */
    update(request: DevrevApi.WebhooksUpdateRequest, requestOptions?: Webhooks.RequestOptions): Promise<DevrevApi.WebhooksUpdateResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
