/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as DevrevApi from "../../..";
export declare namespace Works {
    interface Options {
        environment?: core.Supplier<environments.DevrevApiEnvironment | string>;
        apiKey: core.Supplier<string>;
    }
    interface RequestOptions {
        timeoutInSeconds?: number;
        maxRetries?: number;
    }
}
/**
 * DevRev work interactions.
 */
export declare class Works {
    protected readonly _options: Works.Options;
    constructor(_options: Works.Options);
    /**
     * Creates new work ([issue](https://devrev.ai/docs/product/build),
     * [ticket](https://devrev.ai/docs/product/support)) item.
     * [task](https://docs.devrev.ai/product/tasks) and opportunity work types
     * are supported in the beta version.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     */
    create(request: DevrevApi.WorksCreateRequest, requestOptions?: Works.RequestOptions): Promise<DevrevApi.WorksCreateResponse>;
    /**
     * Deletes a work item.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.works.delete({
     *         id: "ISS-12345"
     *     })
     */
    delete(request: DevrevApi.WorksDeleteRequest, requestOptions?: Works.RequestOptions): Promise<DevrevApi.WorksDeleteResponse>;
    /**
     * Exports a collection of work items.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.works.export({})
     */
    export(request?: DevrevApi.WorksExportQuery, requestOptions?: Works.RequestOptions): Promise<DevrevApi.WorksExportResponse>;
    /**
     * Exports a collection of work items.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.works.exportPost({})
     */
    exportPost(request?: DevrevApi.WorksExportRequest, requestOptions?: Works.RequestOptions): Promise<DevrevApi.WorksExportResponse>;
    /**
     * Gets a work item's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     */
    get(request: DevrevApi.WorksGetQuery, requestOptions?: Works.RequestOptions): Promise<DevrevApi.WorksGetResponse>;
    /**
     * Gets a work item's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     */
    getPost(request: DevrevApi.WorksGetRequest, requestOptions?: Works.RequestOptions): Promise<DevrevApi.WorksGetResponse>;
    /**
     * Lists a collection of work items.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.works.list({})
     */
    list(request?: DevrevApi.WorksListQuery, requestOptions?: Works.RequestOptions): Promise<DevrevApi.WorksListResponse>;
    /**
     * Lists a collection of work items.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     *
     * @example
     *     await devrevApi.works.listPost({})
     */
    listPost(request?: DevrevApi.WorksListRequest, requestOptions?: Works.RequestOptions): Promise<DevrevApi.WorksListResponse>;
    /**
     * Updates a work item's information.
     * @throws {@link DevrevApi.BadRequestError}
     * @throws {@link DevrevApi.UnauthorizedError}
     * @throws {@link DevrevApi.ForbiddenError}
     * @throws {@link DevrevApi.NotFoundError}
     * @throws {@link DevrevApi.TooManyRequestsError}
     * @throws {@link DevrevApi.InternalServerError}
     * @throws {@link DevrevApi.ServiceUnavailableError}
     */
    update(request: DevrevApi.WorksUpdateRequest, requestOptions?: Works.RequestOptions): Promise<DevrevApi.WorksUpdateResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
