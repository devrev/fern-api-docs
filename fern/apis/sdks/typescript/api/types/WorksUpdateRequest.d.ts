/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as DevrevApi from "..";
export declare type WorksUpdateRequest = DevrevApi.WorksUpdateRequest.Issue | DevrevApi.WorksUpdateRequest.None | DevrevApi.WorksUpdateRequest.Ticket;
export declare namespace WorksUpdateRequest {
    interface Issue extends DevrevApi.WorksUpdateRequestIssue, _Base {
        type: "issue";
    }
    interface None extends _Base {
        type: "none";
        value: DevrevApi.Empty;
    }
    interface Ticket extends DevrevApi.WorksUpdateRequestTicket, _Base {
        type: "ticket";
    }
    interface _Base {
        /** Updates the part that the work item applies to. */
        appliesToPart?: string;
        artifacts?: DevrevApi.WorksUpdateRequestArtifacts;
        /** Updated body of the work object, or unchanged if not provided. */
        body?: string;
        /** The work's ID. */
        id: string;
        ownedBy?: DevrevApi.WorksUpdateRequestOwnedBy;
        reportedBy?: DevrevApi.WorksUpdateRequestReportedBy;
        stage?: DevrevApi.StageUpdate;
        stagedInfo?: DevrevApi.WorksUpdateRequestStagedInfoStagedInfoUpdate;
        tags?: DevrevApi.WorksUpdateRequestTags;
        /** Updates the timestamp for when the work is expected to be complete. */
        targetCloseDate?: Date;
        /** Updated title of the work object, or unchanged if not provided. */
        title?: string;
    }
}
