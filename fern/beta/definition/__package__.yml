# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

types:
  ArtifactSummary:
    type: AtomBaseSummary

  AtomBase:
    properties:
      created_by:
        type: optional<UserSummary>
      created_date:
        docs: Timestamp when the object was created.
        type: optional<string>
      display_id:
        docs: Human-readable object ID unique to the Dev organization.
        type: optional<string>
      id:
        type: string
        docs: Globally unique object ID.
      modified_by:
        type: optional<UserSummary>
      modified_date:
        docs: Timestamp when the object was last modified.
        type: optional<string>

  AtomBaseSummary:
    properties:
      display_id:
        docs: Human-readable object ID unique to the Dev organization.
        type: optional<string>
      id:
        type: string
        docs: Globally unique object ID.

  CapabilitySummary:
    type: PartBaseSummary

  Conversation:
    properties:
      description:
        docs: Description of the conversation object.
        type: optional<string>
      group:
        type: optional<GroupSummary>
      messages:
        docs: The latest messages on the conversation.
        type: optional<list<TimelineEntry>>
      owned_by:
        docs: Owner IDs for the conversation.
        type: optional<list<UserSummary>>
      stage:
        type: optional<Stage>
      title:
        docs: Title of the conversation object.
        type: optional<string>

  ConversationSummary:
    properties:
      title:
        docs: Title of the conversation object.
        type: optional<string>

  ConversationsCreateRequestMessage:
    properties:
      artifacts:
        docs: The IDs of the artifacts to the message.
        type: optional<list<string>>
      body:
        docs: The message's body.
        type: optional<string>

  ConversationsCreateRequestTypeValue:
    enum:
      - name: support
        value: support

  ConversationsCreateResponse:
    docs: The response to creating a new conversation.
    properties:
      conversation:
        type: Conversation

  conversations-delete-response:
    docs: The response for deleting a conversation.
    type: map<string, unknown>

  ConversationsExportResponse:
    properties:
      conversations:
        docs: The resulting collection of conversation items.
        type: list<Conversation>

  ConversationsGetResponse:
    docs: The response to getting a conversation's information.
    properties:
      conversation:
        type: Conversation

  ConversationsListResponse:
    docs: The response to listing the conversations.
    properties:
      conversations:
        docs: The list of conversations.
        type: list<Conversation>
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>

  ConversationsUpdateRequestAppliesToParts:
    properties:
      set:
        docs: Updates the parts that the conversation applies to.
        type: optional<list<string>>

  ConversationsUpdateResponse:
    docs: The response for updating a conversation.
    properties:
      conversation:
        type: Conversation

  DevUserSummary:
    type: UserBaseSummary

  EnhancementSummary:
    type: PartBaseSummary

  ErrorBadRequest:
    properties:
      type:
        type: optional<ErrorBadRequestType>

  error-bad-request-bad-request:
    type: map<string, unknown>

  ErrorBadRequestInvalidEnumValue:
    properties:
      allowed_values:
        docs: The allowed values for the field.
        type: list<string>
      field_name:
        type: string
        docs: The field whose enum value is invalid.
      value:
        type: string
        docs: The value that was received.

  ErrorBadRequestMissingRequiredField:
    properties:
      field_name:
        type: string
        docs: The missing field's name.

  error-bad-request-parse-error:
    type: map<string, unknown>

  ErrorBadRequestType:
    enum:
      - name: bad_request
        value: bad_request
      - name: invalid_enum_value
        value: invalid_enum_value
      - name: missing_required_field
        value: missing_required_field
      - name: parse_error
        value: parse_error
      - name: value_not_permitted
        value: value_not_permitted

  ErrorBadRequestValueNotPermitted:
    properties:
      field_name:
        type: string
        docs: The field whose value is not permitted.
      reason:
        docs: The reason the value isn't permitted.
        type: optional<string>

  ErrorBase:
    properties:
      message:
        docs: The message associated with the error.
        type: optional<string>

  ErrorForbidden:
    properties:
      type:
        type: optional<ErrorForbiddenType>

  error-forbidden-forbidden:
    type: map<string, unknown>

  ErrorForbiddenType:
    enum:
      - name: forbidden
        value: forbidden

  ErrorInternalServerError:
    properties:
      reference_id:
        docs: |
          A unique ID that's generated for the error that can be used for
          inquiry.
        type: optional<string>
      type:
        type: optional<ErrorInternalServerErrorType>

  error-internal-server-error-internal-error:
    type: map<string, unknown>

  ErrorInternalServerErrorType:
    enum:
      - name: internal_error
        value: internal_error

  ErrorNotFound:
    properties:
      type:
        type: optional<ErrorNotFoundType>

  error-not-found-not-found:
    type: map<string, unknown>

  ErrorNotFoundType:
    enum:
      - name: not_found
        value: not_found

  ErrorServiceUnavailable:
    properties:
      type:
        type: optional<ErrorServiceUnavailableType>

  error-service-unavailable-service-unavailable:
    type: map<string, unknown>

  ErrorServiceUnavailableType:
    enum:
      - name: service_unavailable
        value: service_unavailable

  ErrorTooManyRequests:
    properties:
      retry_after:
        docs: |
          The number of seconds after which the client should retry.
        type: optional<integer>
      type:
        type: optional<ErrorTooManyRequestsType>

  error-too-many-requests-too-many-requests:
    type: map<string, unknown>

  ErrorTooManyRequestsType:
    enum:
      - name: too_many_requests
        value: too_many_requests

  ErrorUnauthorized:
    properties:
      type:
        type: optional<ErrorUnauthorizedType>

  ErrorUnauthorizedType:
    enum:
      - name: unauthenticated
        value: unauthenticated

  error-unauthorized-unauthenticated:
    type: map<string, unknown>

  FeatureSummary:
    type: PartBaseSummary

  GroupSummary:
    type: AtomBaseSummary

  IssuePriority:
    docs: Priority of the work based upon impact and criticality.
    enum:
      - name: p0
        value: p0
      - name: p1
        value: p1
      - name: p2
        value: p2
      - name: p3
        value: p3

  IssueSummary:
    properties:
      priority:
        type: optional<IssuePriority>

  Link:
    properties:
      link_type:
        type: optional<LinkType>
      source:
        type: optional<LinkEndpointSummary>
      target:
        type: optional<LinkEndpointSummary>

  LinkEndpointSummary:
    base-properties: {}
    union:
      capability:
        type: CapabilitySummary
      conversation:
        type: ConversationSummary
      enhancement:
        type: EnhancementSummary
      feature:
        type: FeatureSummary
      issue:
        type: IssueSummary
      product:
        type: ProductSummary
      ticket:
        type: TicketSummary

  LinkEndpointType:
    enum:
      - name: capability
        value: capability
      - name: conversation
        value: conversation
      - name: enhancement
        value: enhancement
      - name: feature
        value: feature
      - name: issue
        value: issue
      - name: product
        value: product
      - name: ticket
        value: ticket

  LinkRevUserToRevOrgResponse:
    docs: The response to link a rev user to a rev org.
    properties:
      rev_user:
        type: RevUser

  LinkType:
    docs: Type of link used to define the relationship.
    enum:
      - name: developed_with
        value: developed_with
      - name: imports
        value: imports
      - name: is_dependent_on
        value: is_dependent_on
      - name: is_duplicate_of
        value: is_duplicate_of
      - name: is_parent_of
        value: is_parent_of
      - name: is_part_of
        value: is_part_of
      - name: is_related_to
        value: is_related_to
      - name: serves
        value: serves

  LinksCreateResponse:
    docs: The response to creating a new link.
    properties:
      link:
        type: Link

  links-delete-response:
    docs: The response for deleting a link.
    type: map<string, unknown>

  LinksDirection:
    docs: |
      The direction of link, which can either be outbound such that the
      object is the source of the link, otherwise inbound where the object is
      the target of the link.
    enum:
      - name: is_source
        value: is_source
      - name: is_target
        value: is_target

  LinksGetResponse:
    docs: The response to getting a link's information.
    properties:
      link:
        type: Link

  LinksListResponse:
    docs: The response to listing the links.
    properties:
      links:
        docs: The list of links.
        type: list<Link>
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>

  ListMode:
    docs: |
      The iteration mode to use. If "after", then entries after the provided
      cursor will be returned, or if no cursor is provided, then from the
      beginning. If "before", then entries before the provided cursor will be
      returned, or if no cursor is provided, then from the end. Entries will
      always be returned in the specified sort-by order.
    enum:
      - name: after
        value: after
      - name: before
        value: before

  OrgBaseSummary:
    properties:
      display_name:
        docs: Name of the Organization.
        type: optional<string>

  OrgSummary:
    base-properties: {}
    union:
      rev_org:
        type: RevOrgSummary

  OrgType:
    enum:
      - name: rev_org
        value: rev_org

  PartBaseSummary:
    properties:
      name:
        docs: Name of the part.
        type: optional<string>

  ProductSummary:
    type: PartBaseSummary

  RevOrgSummary:
    type: OrgBaseSummary

  RevUser:
    properties:
      description:
        docs: Description of the Rev user.
        type: optional<string>
      external_ref:
        docs: |
          External ref is a mutable unique identifier for a user within the
          Rev organization from your primary customer record. If none is
          available, a good alternative is the email address/phone number
          which could uniquely identify the user. If none is specified, a
          system-generated identifier will be assigned to the user.
        type: optional<string>
      rev_org:
        type: optional<OrgSummary>

  RevUserSummary:
    properties:
      external_ref:
        docs: |
          External ref is a mutable unique identifier for a user within the
          Rev organization from your primary customer record. If none is
          available, a good alternative is the email address/phone number
          which could uniquely identify the user. If none is specified, a
          system-generated identifier will be assigned to the user.
        type: optional<string>
      rev_org:
        type: optional<OrgSummary>

  RevUsersCreateResponse:
    docs: |
      Response object for creating a new Rev user for Rev organization.
    properties:
      rev_user:
        type: RevUser

  rev-users-delete-response:
    docs: The response to deleting a Rev user of a Rev organization.
    type: map<string, unknown>

  RevUsersGetResponse:
    docs: The returned Rev user.
    properties:
      rev_user:
        type: RevUser

  RevUsersListResponse:
    docs: |
      The response to listing all Rev users matching the filter criteria.
    properties:
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
      rev_users:
        docs: List containing all the Rev users.
        type: list<RevUser>

  RevUsersUpdateResponse:
    docs: Updated Rev user object.
    properties:
      rev_user:
        type: RevUser

  SetTagWithValue:
    properties:
      id:
        type: string
        docs: The ID of the tag.
      value:
        docs: |
          The value for the object's association with the tag. If specified,
          the value must be one that's specified in the tag's allowed values.
        type: optional<string>

  Stage:
    docs: Describes the current stage of a work item.
    properties:
      name:
        type: string
        docs: Current stage name of the work item.

  StageInit:
    docs: Sets an object's initial stage.
    properties:
      name:
        docs: The name of the stage.
        type: optional<string>

  StageUpdate:
    docs: Updates an object's stage.
    properties:
      name:
        docs: |
          The updated name of the stage, otherwise unchanged if not set.
        type: optional<string>

  SysUser:
    type: UserBase

  SysUserSummary:
    type: UserBaseSummary

  SysUsersListResponse:
    docs: The response to listing the system users.
    properties:
      next_cursor:
        docs: |
          The cursor used to iterate subsequent results in accordance to the
          sort order. If not set, then no later elements exist.
        type: optional<string>
      prev_cursor:
        docs: |
          The cursor used to iterate preceding results in accordance to the
          sort order. If not set, then no prior elements exist.
        type: optional<string>
      sys_users:
        docs: The list of system users.
        type: list<SysUser>

  SysUsersUpdateResponse:
    docs: Updated Sys user object.
    properties:
      sys_user:
        type: SysUser

  TicketSeverity:
    docs: Severity of the ticket.
    enum:
      - name: blocker
        value: blocker
      - name: high
        value: high
      - name: low
        value: low
      - name: medium
        value: medium

  TicketSummary:
    properties:
      rev_org:
        type: optional<OrgSummary>
      severity:
        type: optional<TicketSeverity>

  TimelineComment:
    properties:
      artifacts:
        docs: The artifacts for the comment.
        type: optional<list<ArtifactSummary>>
      body:
        docs: |
          The comment's body. If the comment has been deleted, then no body
          will appear in the response.
        type: optional<string>
      body_type:
        type: optional<TimelineCommentBodyType>
      snap_kit_body:
        docs: The SnapKit Body of the comment.
        type: optional<map<string, unknown>>

  TimelineCommentBodyType:
    docs: The type of the body to use for the comment.
    enum:
      - name: snap_kit
        value: snap_kit
      - name: text
        value: text

  TimelineEntry:
    base-properties: {}
    union:
      timeline_comment:
        type: TimelineComment

  TimelineEntryBase:
    type: AtomBase

  TimelineEntryType:
    enum:
      - name: timeline_comment
        value: timeline_comment

  UnlinkRevUserFromRevOrgResponse:
    docs: The response to unlink a rev user from a rev org.
    properties:
      rev_user:
        type: RevUser

  UserBase:
    properties:
      display_name:
        docs: |
          The user's display name. The name is non-unique and mutable.
        type: optional<string>
      display_picture:
        type: optional<ArtifactSummary>
      email:
        docs: Email address of the user.
        type: optional<string>
      full_name:
        docs: Full name of the user.
        type: optional<string>
      phone_numbers:
        docs: Phone numbers of the user.
        type: optional<list<string>>
      state:
        type: optional<UserState>

  UserBaseSummary:
    properties:
      display_name:
        docs: |
          The user's display name. The name is non-unique and mutable.
        type: optional<string>
      display_picture:
        type: optional<ArtifactSummary>
      email:
        docs: Email address of the user.
        type: optional<string>
      full_name:
        docs: Full name of the user.
        type: optional<string>
      state:
        type: optional<UserState>

  UserState:
    docs: State of the user.
    enum:
      - name: active
        value: active
      - name: deactivated
        value: deactivated
      - name: locked
        value: locked
      - name: shadow
        value: shadow
      - name: unassigned
        value: unassigned

  UserSummary:
    base-properties: {}
    union:
      dev_user:
        type: DevUserSummary
      rev_user:
        type: RevUserSummary
      sys_user:
        type: SysUserSummary

  UserType:
    enum:
      - name: dev_user
        value: dev_user
      - name: rev_user
        value: rev_user
      - name: sys_user
        value: sys_user

  WorkBaseSummary:
    properties:
      title:
        docs: Title of the work object.
        type: optional<string>
