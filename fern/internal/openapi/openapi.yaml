components:
  responses:
    bad-request:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-bad-request'
      description: 400 Bad Request.
    conflict:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-conflict'
      description: 409 Conflict.
    forbidden:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-forbidden'
      description: 403 Forbidden.
    internal-server-error:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-internal-server-error'
      description: 500 Internal Server Error.
    not-found:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-not-found'
      description: 404 Not Found.
    service-unavailable:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-service-unavailable'
      description: 503 Service Unavailable.
    too-many-requests:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-too-many-requests'
      description: 429 Too Many Requests.
      headers:
        Retry-After:
          schema:
            description: Number of seconds to wait before retrying.
            type: number
    unauthorized:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error-unauthorized'
      description: 401 Unauthorized.
  schemas:
    access-level:
      enum:
      - external
      - internal
      - private
      - public
      - restricted
      type: string
    account:
      allOf:
      - $ref: '#/components/schemas/org-base'
      - properties:
          artifacts:
            description: The artifacts attached to the Account.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          custom_fields:
            description: Custom fields.
            type: object
          custom_schema_fragments:
            description: Custom schema fragments.
            items:
              type: string
            type: array
          custom_schema_fragments_v1:
            description: Custom schema fragments.
            type: string
          description:
            description: Description of the corresponding Account.
            type: string
          domains:
            description: Company's domain names. Example - 'devrev.ai'.
            items:
              type: string
            type: array
          external_refs:
            description: |
              External refs are unique identifiers from your customer system of
              records, stored as a list.
            items:
              type: string
            type: array
          owned_by:
            description: List of Dev user IDs owning this Account.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          schema_fragment_ids:
            deprecated: true
            description: Combination of stock and custom schema fragment IDs.
            items:
              type: string
            type: array
          schema_fragment_ids_v1:
            description: Combination of stock and custom schema fragment IDs.
            type: string
          stock_schema_fragment:
            description: Stock schema fragment.
            type: string
          stock_schema_fragment_v1:
            description: Stock schema fragment.
            type: string
          subtype:
            description: Subtype corresponding to the custom type fragment.
            type: string
          tags:
            description: Tags associated with an object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
          tier:
            description: The Tier of the corresponding Account.
            type: string
        required:
        - owned_by
        type: object
      title: account
    account-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          account:
            $ref: '#/components/schemas/account-summary'
        required:
        - account
        type: object
      title: account-search-summary
    account-summary:
      allOf:
      - $ref: '#/components/schemas/org-base-summary'
      title: account-summary
    accounts-count-request:
      properties:
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        domains:
          description: Array of domain for Accounts to be filtered.
          items:
            type: string
          type: array
        external_refs:
          description: Array of references of Accounts to be filtered.
          items:
            type: string
          type: array
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters by owners.
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            Filters on tags. Input will be of the format (tags=<tag id
            1>=<value>&tags=<tag id 2>)
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tier:
          description: Array of tier for Accounts to be filtered.
          items:
            type: string
          type: array
      title: accounts-count-request
      type: object
    accounts-count-response:
      properties:
        count:
          description: Count of accounts matching the filter.
          format: int32
          type: integer
      required:
      - count
      title: accounts-count-response
      type: object
      x-go-name: AccountsCountResponseBody
    accounts-create-request:
      description: |
        Request object to create a new Account in the Dev organization.
      properties:
        artifacts:
          description: The IDs of the artifacts to associate with the account.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        custom_fields:
          description: Application-defined custom fields.
          type: object
        description:
          description: Description of the Account.
          type: string
        display_name:
          description: Name of the Account.
          type: string
        domains:
          description: Company's domain names. Example - 'devrev.ai'.
          items:
            type: string
          type: array
        external_refs:
          description: |
            External refs are unique identifiers from your customer system of
            records, stored as a list. Currently the length of this field is
            limited to 1.
          items:
            type: string
          type: array
        logo_id:
          description: Artifact ID of the account's logo.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        owned_by:
          description: List of Dev users owning this Account.
          items:
            type: string
          type: array
        schema_fragment_ids:
          description: Schema fragment IDs associated with this Account SOR.
          items:
            type: string
          type: array
        tags:
          description: Tags associated with the Account.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        tier:
          description: The tier of the Account.
          type: string
      required:
      - display_name
      title: accounts-create-request
      type: object
    accounts-create-response:
      description: Response object for request to create a new Account.
      properties:
        account:
          $ref: '#/components/schemas/account'
      required:
      - account
      title: accounts-create-response
      type: object
      x-go-name: AccountsCreateResponseBody
    accounts-delete-request:
      description: Request object to delete a Account.
      properties:
        id:
          description: The ID of Account to delete.
          type: string
      required:
      - id
      title: accounts-delete-request
      type: object
    accounts-delete-response:
      description: The response to deleting a Account.
      title: accounts-delete-response
      type: object
      x-go-name: AccountsDeleteResponseBody
    accounts-delete-validate-request:
      description: Request object to check if an account can be deleted.
      properties:
        id:
          description: The ID of Account to be checked for deletion.
          type: string
      required:
      - id
      title: accounts-delete-validate-request
      type: object
    accounts-delete-validate-response:
      description: |
        Response object containing infomation if an account can be deleted.
      properties:
        is_supported:
          description: |
            Bool value denoting if deletion of an account is supported.
          type: boolean
        reason:
          description: |
            Optional string to denote why an Account cannot be deleted.
          type: string
      required:
      - is_supported
      title: accounts-delete-validate-response
      type: object
      x-go-name: AccountsDeleteValidateResponseBody
    accounts-get-request:
      description: Request object to get Account's information.
      properties:
        id:
          description: The ID of the required Account.
          type: string
      required:
      - id
      title: accounts-get-request
      type: object
    accounts-get-response:
      description: The response to getting a Account's information.
      properties:
        account:
          $ref: '#/components/schemas/account'
      required:
      - account
      title: accounts-get-response
      type: object
      x-go-name: AccountsGetResponseBody
    accounts-group:
      description: Group object for accounts group request.
      properties:
        accounts:
          description: The group of accounts.
          items:
            $ref: '#/components/schemas/account'
          type: array
        key:
          description: Unique key according to which the items are grouped.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - accounts
      - key
      title: accounts-group
      type: object
    accounts-group-request:
      description: A request to get group list of Groups.
      properties:
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        domains:
          description: Array of domain for Accounts to be filtered.
          items:
            type: string
          type: array
        external_refs:
          description: Array of references of Accounts to be filtered.
          items:
            type: string
          type: array
        group_by:
          description: The field to group the accounts by.
          type: string
        limit:
          description: |
            The maximum number of groups to return. If not set, then the
            default is '10'.
          format: int32
          type: integer
        limit_per_group:
          description: |
            The maximum number of accounts to return for an individual group.
            If not set, then the default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters by owners.
          items:
            type: string
          type: array
        sort_by:
          description: Fields to sort the accounts by.
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            Filters on tags. Input will be of the format (tags=<tag id
            1>=<value>&tags=<tag id 2>)
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tier:
          description: Array of tier for Accounts to be filtered.
          items:
            type: string
          type: array
      required:
      - group_by
      title: accounts-group-request
      type: object
    accounts-group-response:
      description: Response object for accounts group request.
      properties:
        groups:
          description: The list of groups.
          items:
            $ref: '#/components/schemas/accounts-group'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - groups
      title: accounts-group-response
      type: object
      x-go-name: AccountsGroupResponseBody
    accounts-list-request:
      description: |
        A request to get the list of Accounts for the authenticated user's Dev
        organization.
      properties:
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        domains:
          description: Array of domain for Accounts to be filtered.
          items:
            type: string
          type: array
        external_refs:
          description: Array of references of Accounts to be filtered.
          items:
            type: string
          type: array
        limit:
          description: The maximum number of Accounts to be retrieved per page.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters by owners.
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the Accounts by and the direction to sort them.
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            Filters on tags. Input will be of the format (tags=<tag id
            1>=<value>&tags=<tag id 2>)
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tier:
          description: Array of tier for Accounts to be filtered.
          items:
            type: string
          type: array
      title: accounts-list-request
      type: object
    accounts-list-response:
      description: The response to getting a list of Accounts' information.
      properties:
        accounts:
          description: List with all of the Accounts' information.
          items:
            $ref: '#/components/schemas/account'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - accounts
      title: accounts-list-response
      type: object
      x-go-name: AccountsListResponseBody
    accounts-merge-request:
      description: Request object to merge a Account.
      properties:
        from:
          description: The ID of Account data is to be merged from.
          type: string
        to:
          description: The ID of Account data is to be merged to.
          type: string
      required:
      - from
      - to
      title: accounts-merge-request
      type: object
    accounts-merge-response:
      description: The response to merging a Account.
      properties:
        account:
          $ref: '#/components/schemas/account'
      required:
      - account
      title: accounts-merge-response
      type: object
      x-go-name: AccountsMergeResponseBody
    accounts-update-request:
      description: Request object to update information of the Account.
      properties:
        artifacts:
          $ref: '#/components/schemas/accounts-update-request-artifacts'
        custom_fields:
          description: Application-defined custom fields.
          type: object
        description:
          description: Description of the Account.
          type: string
        display_name:
          description: Customer chosen name for the Account.
          type: string
        domains:
          description: Company's domain names. Example - 'devrev.ai'.
          items:
            type: string
          type: array
        external_refs:
          description: |
            Updated External Refs of account. Currently the length of this
            field is limited to 1.
          items:
            type: string
          type: array
        id:
          description: The ID of Account to update.
          type: string
        logo_id:
          description: Artifact ID of the account's logo.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          nullable: true
          type: string
        owned_by:
          description: List of Users owning this Account.
          items:
            type: string
          type: array
        schema_fragment_ids:
          description: Schema fragment IDs associated with this Account SOR.
          items:
            type: string
          type: array
        tags:
          description: Tags associated with the Account.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        tier:
          description: The tier of the Account.
          type: string
      required:
      - id
      title: accounts-update-request
      type: object
    accounts-update-request-artifacts:
      properties:
        set:
          description: Sets the IDs to the provided artifact IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
      title: accounts-update-request-artifacts
      type: object
    accounts-update-response:
      description: Response object to updating Account's information.
      properties:
        account:
          $ref: '#/components/schemas/account'
      required:
      - account
      title: accounts-update-response
      type: object
      x-go-name: AccountsUpdateResponseBody
    action-type-value:
      enum:
      - create
      - delete
      - read
      - unknown
      - update
      type: string
    addon-rule:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          addon_sku:
            $ref: '#/components/schemas/sku-summary'
          associativity:
            $ref: '#/components/schemas/addon-rule-associativity'
          description:
            description: Description of the SKU rules.
            type: string
          product:
            $ref: '#/components/schemas/part-summary'
          subscription_sku:
            $ref: '#/components/schemas/sku-summary'
        required:
        - addon_sku
        - product
        - subscription_sku
        type: object
      title: addon-rule
    addon-rule-associativity:
      description: |
        Type of association between SKU and addon, defaults to optional.
      enum:
      - mandatory
      - optional
      type: string
    addon-rule-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: addon-rule-summary
    addon-rules-create-request:
      properties:
        addon_id:
          description: Addon SKU for which the rule is defined.
          type: string
        associativity:
          $ref: '#/components/schemas/addon-rule-associativity'
        description:
          description: Description of the addon rule.
          type: string
        name:
          description: Human readable name of the addon rule.
          type: string
        subscription_sku_id:
          description: Subscription SKU for which the rule is defined.
          type: string
      required:
      - addon_id
      - name
      - subscription_sku_id
      title: addon-rules-create-request
      type: object
    addon-rules-create-response:
      properties:
        addon_rule:
          $ref: '#/components/schemas/addon-rule'
      required:
      - addon_rule
      title: addon-rules-create-response
      type: object
      x-go-name: AddonRulesCreateResponseBody
    addon-rules-delete-request:
      properties:
        id:
          description: The addon rule object's DON.
          type: string
      required:
      - id
      title: addon-rules-delete-request
      type: object
    addon-rules-get-request:
      properties:
        id:
          description: The addon rule object's DON.
          type: string
      required:
      - id
      title: addon-rules-get-request
      type: object
    addon-rules-get-response:
      properties:
        addon_rule:
          $ref: '#/components/schemas/addon-rule'
      required:
      - addon_rule
      title: addon-rules-get-response
      type: object
      x-go-name: AddonRulesGetResponseBody
    addon-rules-list-request:
      properties:
        addon_ids:
          description: |
            The list of addon SKU DONs for which addon rulesare to be
            aggregated.
          items:
            type: string
          type: array
        associativity:
          description: |
            The associativity for which the addon rules need to be aggregated
          items:
            $ref: '#/components/schemas/addon-rule-associativity'
          type: array
        ids:
          description: The list of addon rule DONs which are to be aggregated.
          items:
            type: string
          type: array
        product_ids:
          description: |
            The list of product DONs for which addon rulesare to be aggregated.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        sort_by:
          description: |
            List of fields to sort the addon rules, by and how to sort them.
            Default is to sort by created_date in descending order.
          items:
            type: string
          type: array
        subscription_sku_ids:
          description: |
            The list of subscription SKU DONs for which addon rulesare to be
            aggregated.
          items:
            type: string
          type: array
      title: addon-rules-list-request
      type: object
    addon-rules-list-response:
      properties:
        addon_rules:
          description: The list of addon rules.
          items:
            $ref: '#/components/schemas/addon-rule'
          type: array
      required:
      - addon_rules
      title: addon-rules-list-response
      type: object
      x-go-name: AddonRulesListResponseBody
    addon-rules-update-request:
      properties:
        associativity:
          $ref: '#/components/schemas/addon-rule-associativity'
        description:
          description: Description of the addon rule.
          type: string
        id:
          description: The addon rule object's DON.
          type: string
        name:
          description: Human readable name of the addon rule.
          type: string
      required:
      - id
      title: addon-rules-update-request
      type: object
    addon-rules-update-response:
      properties:
        addon_rule:
          $ref: '#/components/schemas/addon-rule'
      required:
      - addon_rule
      title: addon-rules-update-response
      type: object
      x-go-name: AddonRulesUpdateResponseBody
    address:
      description: Address details of the customer.
      properties:
        address_line1:
          description: Address line 1 (e.g., street, PO Box, or company name).
          type: string
        address_line2:
          description: |
            Address line 2 (e.g., apartment, suite, unit, or building).
          type: string
        city:
          description: City, district, suburb, town, or village.
          type: string
        country:
          description: Country.
          type: string
        postal_code:
          description: ZIP or postal code.
          type: string
        state:
          description: State, county, province, or region.
          type: string
      required:
      - address_line1
      - city
      - country
      title: address
      type: object
    aggregated-schema:
      description: List of custom fields from multiple source fragments.
      properties:
        can_upgrade:
          description: |
            True if at least one custom schema fragment has a newer version.
          type: boolean
        custom_fields:
          description: List of all custom fields in this schema.
          items:
            $ref: '#/components/schemas/schema-field-descriptor'
          type: array
        description:
          description: Description of the schema.
          type: string
        missing_tenant_fragment_id:
          $ref: '#/components/schemas/atom-summary'
        stage_diagram_id:
          $ref: '#/components/schemas/stage-diagram-summary'
        stock_composite_schemas:
          description: List of all composite schemas used by stock fields.
          items:
            $ref: '#/components/schemas/composite-schema'
          type: array
        stock_field_enum_overrides:
          description: List of stock field enum overrides.
          items:
            $ref: '#/components/schemas/stock-field-enum-override'
          type: array
        stock_fields:
          description: List of all stock fields in this schema.
          items:
            $ref: '#/components/schemas/schema-field-descriptor'
          type: array
        subtype:
          description: |
            Subtype of the custom type fragment used to populate the same in
            the leaf type.
          type: string
        subtype_display_name:
          description: Display name of the subtype.
          type: string
        title:
          description: Name of the schema.
          type: string
      required:
      - custom_fields
      - stock_composite_schemas
      - stock_fields
      title: aggregated-schema
      type: object
    aggregated-schema-get-request:
      properties:
        custom_schema_fragment_ids:
          description: |
            The list of custom schema fragment DONs which are to be aggregated.
          items:
            type: string
          type: array
        per_object_schema:
          description: Per object schema, if associated with the leaf type.
          items:
            $ref: '#/components/schemas/field-descriptor'
          type: array
        stock_schema_fragment_id:
          description: The stock schema fragment which is to be aggregated.
          type: string
      required:
      - custom_schema_fragment_ids
      - stock_schema_fragment_id
      title: aggregated-schema-get-request
      type: object
    aggregated-schema-get-request-private:
      properties:
        custom_schema_fragment_ids:
          description: |
            The list of custom schema fragment DONs which are to be aggregated.
          items:
            type: string
          type: array
        per_object_schema:
          description: Per object schema, if associated with the leaf type.
          items:
            $ref: '#/components/schemas/field-descriptor'
          type: array
        stock_schema_fragment_id:
          description: The stock schema fragment which is to be aggregated.
          type: string
      required:
      - custom_schema_fragment_ids
      - stock_schema_fragment_id
      title: aggregated-schema-get-request-private
      type: object
    aggregated-schema-get-response:
      properties:
        schema:
          $ref: '#/components/schemas/aggregated-schema'
      required:
      - schema
      title: aggregated-schema-get-response
      type: object
      x-go-name: AggregatedSchemaGetResponseBody
    aggregated-schema-get-response-private:
      properties:
        schema:
          $ref: '#/components/schemas/aggregated-schema-private'
      required:
      - schema
      title: aggregated-schema-get-response-private
      type: object
    aggregated-schema-private:
      description: List of custom fields from multiple source fragments.
      properties:
        can_upgrade:
          description: |
            True if at least one custom schema fragment has a newer version.
          type: boolean
        custom_fields:
          description: List of all custom fields in this schema.
          items:
            $ref: '#/components/schemas/field-descriptor'
          type: array
        description:
          description: Description of the schema.
          type: string
        missing_tenant_fragment_id:
          $ref: '#/components/schemas/atom-summary'
        stage_diagram_id:
          $ref: '#/components/schemas/stage-diagram-summary'
        stock_composite_schemas:
          description: List of all composite schemas used by stock fields.
          items:
            $ref: '#/components/schemas/composite-schema'
          type: array
        stock_field_enum_overrides:
          description: List of stock field enum overrides.
          items:
            $ref: '#/components/schemas/stock-field-enum-override'
          type: array
        stock_fields:
          description: List of all stock fields in this schema.
          items:
            $ref: '#/components/schemas/field-descriptor'
          type: array
        subtype:
          description: |
            Subtype of the custom type fragment used to populate the same in
            the leaf type.
          type: string
        subtype_display_name:
          description: Display name of the subtype.
          type: string
        title:
          description: Name of the schema.
          type: string
      required:
      - custom_fields
      - stock_composite_schemas
      - stock_fields
      title: aggregated-schema-private
      type: object
    aggregation-detail:
      description: Stores aggregation type and dimension information.
      properties:
        aggregation_type:
          $ref: '#/components/schemas/aggregation-detail-aggregation-type'
        unique_dimension:
          description: |
            Unique dimension if provided to be considered for grouping metering
            data for the UOM.
          type: string
      required:
      - aggregation_type
      title: aggregation-detail
      type: object
    aggregation-detail-aggregation-type:
      description: |
        Aggregation type to be used while aggregating the metering data for the
        UOM. 1] Sum - sum of all the values for the meter in a given period Ex.
        { M1:2, M1:4 } => {M1:6} 2] Minimum - min of all the values for the
        meter in a given period Ex. { M1:2, M1:4 } => {M1:2} 3] Maximum - max
        of all the values for the meter in a given period Ex. { M1:2, M1:4 } =>
        {M1:4} 4] Unique Count - Sum of distinct unique dimension observed for
        the meter in the given period (not considering the data from the
        previous billing period) Ex. January {M1:{VM:VM0}}, February
        {M1:{VM:VM1}, M1:{VM:VM2}, M1:{VM:VM1}} => {M1:2} 5] Running Total -
        Sum of distinct active unique dimension observed for a meter in the
        given period, taking into consideration the active data from the
        previous billing cycle Ex. January {M1:{VM:VM0,on}, {M1:{VM:VM1,off}
        February {M1:{VM:VM2, on}, M1:{VM:VM2, off}, M1:{VM:VM3, on}} => {M1:3}
        6] Duration - Sum of distinct active unique dimension duration for a
        meter in the given period, taking into consideration the active data
        from the previous month Ex. January15 {M1:{VM:VM0,on, 4}} February15
        {M1:{VM:VM0,off}, February18 {M1:{VM:VM1,on,5} => M1->
        30*4*charge_per_day + 10*5*charge_per_day 7] Latest - consider the
        latest/last meter in the given period 8] Oldest - consider the
        oldest/first record in the given period.
      enum:
      - duration
      - latest
      - maximum
      - minimum
      - oldest
      - running_total
      - sum
      - unique_count
      type: string
    aggregation-detail-summary:
      description: Stores aggregation type and dimension information.
      title: aggregation-detail-summary
      type: object
    annotation:
      description: annotation (key/value pairs) for part object.
      properties:
        name:
          description: annotation key.
          type: string
        value:
          description: Value for the annotation name, localized to the object.
          type: string
      title: annotation
      type: object
    api-endpoint:
      description: API endpoint information.
      properties:
        api_operations:
          description: |
            Operations associated with this API, such as the HTTP Verb,
            parameters, etc.
          items:
            $ref: '#/components/schemas/api-operation'
          type: array
        api_path:
          description: The URL of the API.
          type: string
        host:
          description: The Host of the API.
          type: string
      title: api-endpoint
      type: object
    api-endpoint-identifier:
      properties:
        host:
          description: The host information of the API endpoint.
          type: string
        path:
          description: The path information of the API endpoint.
          type: string
      required:
      - host
      - path
      title: api-endpoint-identifier
      type: object
    api-operation:
      description: API operation summary information.
      properties:
        api_parameters:
          description: Parameters associated with the API operation.
          items:
            type: string
          type: array
        api_path:
          description: The RestAPI path of the discovered API operation.
          type: string
        api_tags:
          description: |
            Tags associated with the API operation, as defined in the api file.
          items:
            type: string
          type: array
        fulfilled_by:
          description: FulfilledBy IDs per API operation.
          items:
            $ref: '#/components/schemas/part-summary'
          type: array
        http_operation:
          $ref: '#/components/schemas/api-operation-http-operation'
        locations:
          description: Repo + file locations where the operation was detected.
          items:
            $ref: '#/components/schemas/rev-location-summary'
          type: array
        name:
          description: Name of the API operation.
          type: string
      title: api-operation
      type: object
    api-operation-http-operation:
      description: The Http verb of the discovered API operation.
      enum:
      - connect
      - delete
      - get
      - head
      - options
      - patch
      - post
      - put
      - trace
      type: string
    app-fragment:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-base'
      - properties:
          app:
            description: App this fragment applies to.
            type: string
          app_fragment_name:
            description: Name of the app fragment.
            type: string
        type: object
      title: app-fragment
    app-fragment-private:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-private-base'
      - properties:
          app:
            description: App this fragment applies to.
            type: string
          app_fragment_name:
            description: Name of the app fragment.
            type: string
        type: object
      title: app-fragment-private
    app-fragment-private-summary:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-private-base-summary'
      title: app-fragment-private-summary
    app-fragment-summary:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-base-summary'
      title: app-fragment-summary
    app-route-value:
      enum:
      - customers
      - lobby
      - my_tasks
      - parts
      - plug_inbox
      - trails
      - unknown
      - updates
      - vista
      type: string
    applies-to-part-filter:
      description: The filter for applies to part.
      properties:
        include_child_parts:
          description: |
            Whether to include items belonging to children of any of the
            provided parts.
          type: boolean
        parts:
          description: Part IDs to filter on.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      required:
      - parts
      title: applies-to-part-filter
      type: object
    archetype-link-summary:
      description: Link summary.
      properties:
        link_id:
          description: ID of the link.
          type: string
        link_id_v1:
          description: ID of the link.
          type: string
        link_type:
          description: Type of link used to define the relationship.
          type: string
        target:
          description: The target object.
          type: string
        target_display_id:
          description: Target object display ID.
          type: string
        target_object_type:
          description: Target object type.
          type: string
        target_v1:
          description: The target object.
          type: string
      title: archetype-link-summary
      type: object
    archetype-metric-target-summary:
      description: Metric with corresponding target values.
      properties:
        is_out_of_schedule:
          description: |
            If true, the schedule attached to this metric is out of schedule at
            the time of the query.
          type: boolean
        metric_definition:
          $ref: '#/components/schemas/metric-definition-summary'
        next_schedule_transition:
          description: |
            The next time the schedule will change its state, if such is known.
          format: date-time
          type: string
        remaining_time:
          description: Time in minutes that remains on a paused metric.
          format: int32
          type: integer
        stage:
          description: Metric stage corresponding to the applicable SLA.
          type: string
        target_time:
          description: |
            Time at which the metric would breach SLA if no action taken.
          format: date-time
          type: string
        warning_target_time:
          description: |
            Time at which the metric would reach the SLA warning limit if no
            action taken.
          format: date-time
          type: string
      required:
      - metric_definition
      - stage
      title: archetype-metric-target-summary
      type: object
    archetype-org-schedule-fragment-summary:
      description: |
        The representation of the organization schedule fragment embedded
        inside a organization schedule, used to quickly look up the schedule
        fragment for the right period.
      properties:
        from:
          description: |
            The date (inclusive) on which the organization schedule fragment
            begins.
          format: date-time
          type: string
        id:
          description: The organization schedule fragment referenced.
          type: string
        id_v1:
          description: The organization schedule fragment referenced.
          type: string
        to:
          description: |
            The date (exclusive) on which the organization schedule fragment's
            validity ends.
          format: date-time
          type: string
      title: archetype-org-schedule-fragment-summary
      type: object
    archetype-sla-summary:
      description: SLA summary for the object.
      properties:
        closest_to_breach_metric:
          description: The name of the metric which is closest to breach.
          type: string
        org_schedule:
          $ref: '#/components/schemas/org-schedule-summary'
        remaining_time:
          description: |
            The remaining time (in minutes) for the closest_to_breach_metric if
            it is paused. A paused metric will only be closest to breach if no
            metrics are running (running, warning and breached stages).
          format: int32
          type: integer
        sla_tracker:
          $ref: '#/components/schemas/sla-tracker-summary'
        stage:
          $ref: '#/components/schemas/sla-summary-stage'
        target_time:
          description: |
            The target time to avoid SLA breach. This is the target time of the
            metric which is closest to breach.
          format: date-time
          type: string
      title: archetype-sla-summary
      type: object
    article:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          access_level:
            $ref: '#/components/schemas/access-level'
          applies_to_parts:
            description: Details of the parts relevant to the article.
            items:
              $ref: '#/components/schemas/part-summary'
            type: array
          authored_by:
            description: Users that authored the article.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          description:
            description: Description of the article.
            type: string
          extracted_content:
            description: ID of the artifact containing the extracted content.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          language:
            description: Language of the article for i18n support.
            type: string
          owned_by:
            description: The users that own the article.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          published_date:
            description: Timestamp when the article was published.
            format: date-time
            type: string
          resource:
            $ref: '#/components/schemas/resource'
          status:
            $ref: '#/components/schemas/article-status'
          tags:
            description: Tags associated with the article.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
          title:
            description: Title of the article.
            type: string
        required:
        - applies_to_parts
        - owned_by
        type: object
      title: article
    article-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          article:
            $ref: '#/components/schemas/article-summary'
        required:
        - article
        type: object
      title: article-search-summary
    article-status:
      description: Status of the article.
      enum:
      - archived
      - draft
      - published
      - review_needed
      type: string
    article-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          resource:
            $ref: '#/components/schemas/resource-summary'
          title:
            description: Title of the article.
            type: string
        type: object
      title: article-summary
    articles-bulk-create-request:
      description: The request to create articles.
      properties:
        articles:
          description: Articles to be created.
          items:
            $ref: '#/components/schemas/articles-create-request'
          type: array
      required:
      - articles
      title: articles-bulk-create-request
      type: object
    articles-bulk-create-response:
      description: Create articles response.
      properties:
        articles:
          description: Returned articles.
          items:
            $ref: '#/components/schemas/article'
          type: array
      required:
      - articles
      title: articles-bulk-create-response
      type: object
      x-go-name: ArticlesBulkCreateResponseBody
    articles-count-request:
      properties:
        access_level:
          description: Filters for access level of the articles.
          items:
            $ref: '#/components/schemas/access-level'
          type: array
        ancestor_part:
          description: |
            Filters for article which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_parts:
          description: |
            Filters for article belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        authored_by:
          description: Filters for articles authored by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_after_date:
          description: |
            Filters for articles created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          description: |
            Filters for articles created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for articles created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by:
          description: Filters for articles owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        published_after_date:
          description: |
            Filters for articles published after the timestamp provided.
          format: date-time
          type: string
        published_before_date:
          description: |
            Filters for articles published before the timestamp provided.
          format: date-time
          type: string
        status:
          description: Filters for status of the articles.
          items:
            $ref: '#/components/schemas/article-status'
          type: array
        tags:
          description: Filters for article with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      title: articles-count-request
      type: object
    articles-count-response:
      properties:
        count:
          description: Count of articles matching the filter.
          format: int32
          type: integer
      required:
      - count
      title: articles-count-response
      type: object
      x-go-name: ArticlesCountResponseBody
    articles-create-request:
      description: The request to create an article.
      properties:
        access_level:
          $ref: '#/components/schemas/access-level'
        applies_to_parts:
          description: |
            The parts that the article applies to. Specifying at least one part
            is required when creating articles.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        authored_by:
          description: The authors of the article.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        authored_by_ids:
          deprecated: true
          description: The authors of the article.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        description:
          description: Description for the article.
          type: string
        extracted_content:
          description: ID of the extracted_content artifact.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        language:
          description: Language of the article.
          type: string
        owned_by:
          description: The users that own the article.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: The users that own the article.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        published_at:
          description: The published date of the article.
          format: date-time
          type: string
        resource:
          $ref: '#/components/schemas/articles-create-request-resource'
        status:
          $ref: '#/components/schemas/article-status'
        tags:
          description: Tags associated with the article.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        title:
          description: Name of the article.
          type: string
      required:
      - applies_to_parts
      - resource
      - title
      title: articles-create-request
      type: object
    articles-create-request-resource:
      properties:
        artifact_ids:
          deprecated: true
          description: IDs of the artifacts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        artifacts:
          description: IDs of the artifacts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        url:
          description: URL of the external article.
          type: string
      title: articles-create-request-resource
      type: object
    articles-create-response:
      description: Create article response.
      properties:
        article:
          $ref: '#/components/schemas/article'
      required:
      - article
      title: articles-create-response
      type: object
      x-go-name: ArticlesCreateResponseBody
    articles-delete-request:
      description: The request to delete an article.
      properties:
        article_id:
          deprecated: true
          description: The ID of the article.
          type: string
        id:
          description: The ID of the article.
          type: string
      title: articles-delete-request
      type: object
    articles-get-request:
      description: The request to get an article.
      properties:
        article_id:
          description: The ID of the required article.
          type: string
      required:
      - article_id
      title: articles-get-request
      type: object
    articles-get-response:
      description: Get article response.
      properties:
        article:
          $ref: '#/components/schemas/article'
      required:
      - article
      title: articles-get-response
      type: object
      x-go-name: ArticlesGetResponseBody
    articles-list-request:
      description: The request to list articles.
      properties:
        access_level:
          description: Filters for access level of the articles.
          items:
            $ref: '#/components/schemas/access-level'
          type: array
        ancestor_part:
          description: |
            Filters for article which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_parts:
          description: |
            Filters for article belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        authored_by:
          description: Filters for articles authored by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_after_date:
          description: |
            Filters for articles created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          description: |
            Filters for articles created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for articles created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of articles to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        owned_by:
          description: Filters for articles owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        published_after_date:
          description: |
            Filters for articles published after the timestamp provided.
          format: date-time
          type: string
        published_before_date:
          description: |
            Filters for articles published before the timestamp provided.
          format: date-time
          type: string
        status:
          description: Filters for status of the articles.
          items:
            $ref: '#/components/schemas/article-status'
          type: array
        tags:
          description: Filters for article with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      title: articles-list-request
      type: object
    articles-list-response:
      description: List articles response.
      properties:
        articles:
          description: The article entries matching the request.
          items:
            $ref: '#/components/schemas/article'
          type: array
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        total:
          description: Total number of article items for the request.
          format: int32
          type: integer
      required:
      - articles
      - total
      title: articles-list-response
      type: object
      x-go-name: ArticlesListResponseBody
    articles-update-request:
      description: The request to update an article.
      properties:
        access_level:
          $ref: '#/components/schemas/access-level'
        applies_to_parts:
          $ref: '#/components/schemas/articles-update-request-applies-to-parts'
        artifacts:
          $ref: '#/components/schemas/articles-update-request-artifacts-ids'
        authored_by:
          $ref: '#/components/schemas/articles-update-request-authored-by'
        description:
          description: |
            Updated description of the article object, or unchanged if not
            provided.
          type: string
        extracted_content:
          $ref: '#/components/schemas/articles-update-request-extracted-content'
        id:
          description: The article's ID.
          type: string
        language:
          description: Updates the language of the article.
          type: string
        owned_by:
          $ref: '#/components/schemas/articles-update-request-owned-by'
        published_date:
          description: Updates the timestamp for when the article is published.
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/article-status'
        tags:
          $ref: '#/components/schemas/articles-update-request-tags'
        title:
          description: |
            Updated title of the article object, or unchanged if not provided.
          type: string
        url:
          description: Updates the URL of the external article.
          type: string
      required:
      - id
      title: articles-update-request
      type: object
    articles-update-request-applies-to-parts:
      properties:
        set:
          description: Updates the parts that the article applies to.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      title: articles-update-request-applies-to-parts
      type: object
    articles-update-request-artifacts-ids:
      properties:
        set:
          description: Updates IDs of the artifacts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
      title: articles-update-request-artifacts-ids
      type: object
    articles-update-request-authored-by:
      properties:
        set:
          description: Sets the users that authored the article.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: articles-update-request-authored-by
      type: object
    articles-update-request-extracted-content:
      properties:
        set:
          description: Updates ID of the extracted_content.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
      title: articles-update-request-extracted-content
      type: object
    articles-update-request-owned-by:
      properties:
        set:
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: articles-update-request-owned-by
      type: object
    articles-update-request-tags:
      properties:
        set:
          description: Sets the provided tags on the article.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: articles-update-request-tags
      type: object
    articles-update-response:
      properties:
        article:
          $ref: '#/components/schemas/article'
      required:
      - article
      title: articles-update-response
      type: object
      x-go-name: ArticlesUpdateResponseBody
    artifact:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          archived_date:
            description: Timestamp when the artifact was archived.
            format: date-time
            type: string
          configuration_set:
            $ref: '#/components/schemas/artifact-configuration-set'
          file:
            $ref: '#/components/schemas/file'
          generated_files:
            description: |
              Information of system generated files like preview, multiple
              resolutions, etc.
            items:
              $ref: '#/components/schemas/file'
            type: array
          parent_id:
            $ref: '#/components/schemas/atom-summary'
          preview_url:
            description: Preview URL of the artifact.
            type: string
          preview_url_expiry:
            description: Preview URL expiry date.
            format: date-time
            type: string
          published_date:
            description: Timestamp when the artifact was published.
            format: date-time
            type: string
        type: object
      title: artifact
    artifact-configuration-set:
      description: |
        Represents a set of configuration to be used with the artifacts object.
      enum:
      - default
      - marketplace_listing_icon
      - org_logo
      - plug_setting
      - snap_in_functions_code
      - user_profile_picture
      - work
      type: string
    artifact-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          artifact:
            $ref: '#/components/schemas/artifact-summary'
        required:
        - artifact
        type: object
      title: artifact-search-summary
    artifact-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          preview_url:
            description: Preview URL of the artifact.
            type: string
        type: object
      title: artifact-summary
    artifacts-get-request:
      description: The request to get an artifact's information.
      properties:
        id:
          description: The requested artifact's ID.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
      required:
      - id
      title: artifacts-get-request
      type: object
    artifacts-get-response:
      description: The response to getting an artifact's information.
      properties:
        artifact:
          $ref: '#/components/schemas/artifact'
      required:
      - artifact
      title: artifacts-get-response
      type: object
      x-go-name: ArtifactsGetResponseBody
    artifacts-list-request:
      description: The request to list artifacts attached to an object.
      properties:
        parent_id:
          description: The ID of the object to filter artifacts.
          type: string
      required:
      - parent_id
      title: artifacts-list-request
      type: object
    artifacts-list-response:
      description: The response to list artifacts attached to an object.
      properties:
        artifacts:
          description: The artifact's information.
          items:
            $ref: '#/components/schemas/artifact'
          type: array
      required:
      - artifacts
      title: artifacts-list-response
      type: object
      x-go-name: ArtifactsListResponseBody
    artifacts-locate-request:
      description: The request to get an artifact's download URL.
      properties:
        id:
          description: The ID of the artifact to get the URL for.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        variant:
          description: |
            The required variant of the file. By default, it returns the
            original file.
          type: string
      required:
      - id
      title: artifacts-locate-request
      type: object
    artifacts-locate-response:
      description: The response to getting an artifact's download URL.
      properties:
        expires_at:
          description: The expiration timestamp of the URL.
          format: date-time
          type: string
        expiry_time:
          deprecated: true
          description: The expiration timestamp of the URL.
          format: date-time
          type: string
        url:
          description: The artifact's download URL.
          type: string
      required:
      - expiry_time
      - url
      title: artifacts-locate-response
      type: object
      x-go-name: ArtifactsLocateResponseBody
    artifacts-prepare-request:
      description: The request to prepare a URL to upload a file.
      properties:
        configuration_set:
          $ref: '#/components/schemas/artifact-configuration-set'
        file_name:
          description: The name of the file that's being uploaded.
          type: string
        file_type:
          description: The type of file that's being uploaded.
          type: string
      required:
      - file_name
      title: artifacts-prepare-request
      type: object
    artifacts-prepare-response:
      description: The response to preparing a URL to upload a file.
      properties:
        form_data:
          description: The POST policy form data.
          items:
            $ref: '#/components/schemas/artifacts-prepare-response-form-data'
          type: array
        id:
          description: The generated artifact's ID.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        id_v1:
          description: The generated artifact's ID.
          type: string
        url:
          description: The URL that the file's data should be uploaded to.
          type: string
      required:
      - form_data
      - id
      - url
      title: artifacts-prepare-response
      type: object
      x-go-name: ArtifactsPrepareResponseBody
    artifacts-prepare-response-form-data:
      properties:
        key:
          description: Key of the form field.
          type: string
        value:
          description: Value corresponding to the key.
          type: string
      required:
      - key
      - value
      title: artifacts-prepare-response-form-data
      type: object
    assign-result:
      properties:
        error_message:
          description: |
            The error message in case the assignment failed for the given Rev
            organization.
          type: string
        rev_org:
          $ref: '#/components/schemas/rev-org-summary'
      required:
      - rev_org
      title: assign-result
      type: object
    atom-base:
      properties:
        created_by:
          $ref: '#/components/schemas/user-summary'
        created_date:
          description: Timestamp when the object was created.
          format: date-time
          type: string
        display_id:
          description: Human-readable object ID unique to the Dev organization.
          type: string
        id:
          description: Globally unique object ID.
          type: string
        id_v1:
          description: Globally unique object ID.
          type: string
        modified_by:
          $ref: '#/components/schemas/user-summary'
        modified_date:
          description: Timestamp when the object was last modified.
          format: date-time
          type: string
      required:
      - id
      title: atom-base
      type: object
    atom-base-summary:
      properties:
        display_id:
          description: Human-readable object ID unique to the Dev organization.
          type: string
        id:
          description: Globally unique object ID.
          type: string
        id_v1:
          description: Globally unique object ID.
          type: string
      required:
      - id
      title: atom-base-summary
      type: object
    atom-summary:
      discriminator:
        mapping:
          account: '#/components/schemas/account-summary'
          addon_rule: '#/components/schemas/addon-rule-summary'
          app_fragment: '#/components/schemas/app-fragment-summary'
          app_fragment_private: '#/components/schemas/app-fragment-private-summary'
          article: '#/components/schemas/article-summary'
          artifact: '#/components/schemas/artifact-summary'
          auth_token: '#/components/schemas/auth-token-summary'
          automation: '#/components/schemas/automation-summary'
          capability: '#/components/schemas/capability-summary'
          command: '#/components/schemas/command-summary'
          component: '#/components/schemas/component-summary'
          conversation: '#/components/schemas/conversation-summary'
          conversation_created_notification: '#/components/schemas/conversation-created-notification-summary'
          conversation_inactivity_reminder: '#/components/schemas/conversation-inactivity-reminder-summary'
          credit: '#/components/schemas/credit-summary'
          credit_coupon: '#/components/schemas/credit-coupon-summary'
          custom_object: '#/components/schemas/custom-object-summary'
          custom_part: '#/components/schemas/custom-part-summary'
          custom_stage: '#/components/schemas/custom-stage-summary'
          custom_state: '#/components/schemas/custom-state-summary'
          custom_type_fragment: '#/components/schemas/custom-type-fragment-summary'
          custom_type_fragment_private: '#/components/schemas/custom-type-fragment-private-summary'
          custom_work: '#/components/schemas/custom-work-summary'
          dev_org: '#/components/schemas/dev-org-summary'
          dev_user: '#/components/schemas/dev-user-summary'
          devrev_profile: '#/components/schemas/devrev-profile-summary'
          devrev_reminder: '#/components/schemas/devrev-reminder-summary'
          devu_invite: '#/components/schemas/devu-invite-summary'
          discovery_git_commit: '#/components/schemas/discovery-git-commit-summary'
          discovery_git_event: '#/components/schemas/discovery-git-event-summary'
          discovery_profile: '#/components/schemas/discovery-profile-summary'
          discovery_run: '#/components/schemas/discovery-run-summary'
          discovery_settings: '#/components/schemas/discovery-settings-summary'
          engagement: '#/components/schemas/engagement-summary'
          enhancement: '#/components/schemas/enhancement-summary'
          event_source: '#/components/schemas/event-source-summary'
          feature: '#/components/schemas/feature-summary'
          feature_pin: '#/components/schemas/feature-pin-summary'
          flow: '#/components/schemas/flow-summary'
          function_definition: '#/components/schemas/function-definition-summary'
          group: '#/components/schemas/group-summary'
          invoice: '#/components/schemas/invoice-summary'
          issue: '#/components/schemas/issue-summary'
          keyring: '#/components/schemas/keyring-summary'
          link: '#/components/schemas/link-summary'
          linkable: '#/components/schemas/linkable-summary'
          linkable_pin: '#/components/schemas/linkable-pin-summary'
          marketplace: '#/components/schemas/marketplace-summary'
          marketplace_category: '#/components/schemas/marketplace-category-summary'
          marketplace_item: '#/components/schemas/marketplace-item-summary'
          marketplace_submission: '#/components/schemas/marketplace-submission-summary'
          meeting: '#/components/schemas/meeting-summary'
          metric_definition: '#/components/schemas/metric-definition-summary'
          microflow_definition: '#/components/schemas/microflow-definition-summary'
          microservice: '#/components/schemas/microservice-summary'
          new_invoice: '#/components/schemas/new-invoice-summary'
          new_invoice_item: '#/components/schemas/new-invoice-item-summary'
          news: '#/components/schemas/news-summary'
          oasis_data: '#/components/schemas/oasis-data-summary'
          object_assignment_notification: '#/components/schemas/object-assignment-notification-summary'
          object_member: '#/components/schemas/object-member-summary'
          one_time_line_item: '#/components/schemas/one-time-line-item-summary'
          opportunity: '#/components/schemas/opportunity-summary'
          org_preferences: '#/components/schemas/org-preferences-summary'
          org_schedule: '#/components/schemas/org-schedule-summary'
          org_schedule_fragment: '#/components/schemas/org-schedule-fragment-summary'
          payment_method_bank_account: '#/components/schemas/payment-method-bank-account-summary'
          payment_method_card: '#/components/schemas/payment-method-card-summary'
          plug_setting: '#/components/schemas/plug-setting-summary'
          pr_review_reminder: '#/components/schemas/pr-review-reminder-summary'
          pricing: '#/components/schemas/pricing-summary'
          product: '#/components/schemas/product-summary'
          project: '#/components/schemas/project-summary'
          push_device: '#/components/schemas/push-device-summary'
          question_answer: '#/components/schemas/question-answer-summary'
          real_time_insight: '#/components/schemas/real-time-insight-summary'
          real_time_insight_value: '#/components/schemas/real-time-insight-value-summary'
          recurring_line_item: '#/components/schemas/recurring-line-item-summary'
          rev_org: '#/components/schemas/rev-org-summary'
          rev_user: '#/components/schemas/rev-user-summary'
          reward: '#/components/schemas/reward-summary'
          reward_transaction: '#/components/schemas/reward-transaction-summary'
          role: '#/components/schemas/role-summary'
          room: '#/components/schemas/room-summary'
          rule: '#/components/schemas/rule-summary'
          runnable: '#/components/schemas/runnable-summary'
          runnable_pin: '#/components/schemas/runnable-pin-summary'
          service_account: '#/components/schemas/service-account-summary'
          service_plan: '#/components/schemas/service-plan-summary'
          settings: '#/components/schemas/settings-summary'
          sku: '#/components/schemas/sku-summary'
          sku_rule: '#/components/schemas/sku-rule-summary'
          sla: '#/components/schemas/sla-summary'
          sla_tracker: '#/components/schemas/sla-tracker-summary'
          snap_component: '#/components/schemas/snap-component-summary'
          snap_in: '#/components/schemas/snap-in-summary'
          snap_in_function: '#/components/schemas/snap-in-function-summary'
          snap_in_package: '#/components/schemas/snap-in-package-summary'
          snap_in_version: '#/components/schemas/snap-in-version-summary'
          snap_kit_action: '#/components/schemas/snap-kit-action-summary'
          stage_diagram: '#/components/schemas/stage-diagram-summary'
          stock_schema_fragment: '#/components/schemas/stock-schema-fragment-summary'
          stock_schema_fragment_private: '#/components/schemas/stock-schema-fragment-private-summary'
          survey: '#/components/schemas/survey-summary'
          survey_response: '#/components/schemas/survey-response-summary'
          sys_user: '#/components/schemas/sys-user-summary'
          tag: '#/components/schemas/tag-summary'
          task: '#/components/schemas/task-summary'
          tenant_fragment: '#/components/schemas/tenant-fragment-summary'
          tenant_fragment_private: '#/components/schemas/tenant-fragment-private-summary'
          ticket: '#/components/schemas/ticket-summary'
          timeline_change_event: '#/components/schemas/timeline-change-event-summary'
          timeline_comment: '#/components/schemas/timeline-comment-summary'
          timeline_huddle: '#/components/schemas/timeline-huddle-summary'
          uom: '#/components/schemas/uom-summary'
          user_mentioned_notification: '#/components/schemas/user-mentioned-notification-summary'
          user_participation_notification: '#/components/schemas/user-participation-notification-summary'
          user_preferences: '#/components/schemas/user-preferences-summary'
          vista_shared_notification: '#/components/schemas/vista-shared-notification-summary'
          webhook: '#/components/schemas/webhook-summary'
          window_based_insight: '#/components/schemas/window-based-insight-summary'
          window_based_insight_value: '#/components/schemas/window-based-insight-value-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/account-summary'
      - $ref: '#/components/schemas/addon-rule-summary'
      - $ref: '#/components/schemas/app-fragment-private-summary'
      - $ref: '#/components/schemas/app-fragment-summary'
      - $ref: '#/components/schemas/article-summary'
      - $ref: '#/components/schemas/artifact-summary'
      - $ref: '#/components/schemas/auth-token-summary'
      - $ref: '#/components/schemas/automation-summary'
      - $ref: '#/components/schemas/capability-summary'
      - $ref: '#/components/schemas/command-summary'
      - $ref: '#/components/schemas/component-summary'
      - $ref: '#/components/schemas/conversation-created-notification-summary'
      - $ref: '#/components/schemas/conversation-inactivity-reminder-summary'
      - $ref: '#/components/schemas/conversation-summary'
      - $ref: '#/components/schemas/credit-coupon-summary'
      - $ref: '#/components/schemas/credit-summary'
      - $ref: '#/components/schemas/custom-object-summary'
      - $ref: '#/components/schemas/custom-part-summary'
      - $ref: '#/components/schemas/custom-stage-summary'
      - $ref: '#/components/schemas/custom-state-summary'
      - $ref: '#/components/schemas/custom-type-fragment-private-summary'
      - $ref: '#/components/schemas/custom-type-fragment-summary'
      - $ref: '#/components/schemas/custom-work-summary'
      - $ref: '#/components/schemas/dev-org-summary'
      - $ref: '#/components/schemas/dev-user-summary'
      - $ref: '#/components/schemas/devrev-profile-summary'
      - $ref: '#/components/schemas/devrev-reminder-summary'
      - $ref: '#/components/schemas/devu-invite-summary'
      - $ref: '#/components/schemas/discovery-git-commit-summary'
      - $ref: '#/components/schemas/discovery-git-event-summary'
      - $ref: '#/components/schemas/discovery-profile-summary'
      - $ref: '#/components/schemas/discovery-run-summary'
      - $ref: '#/components/schemas/discovery-settings-summary'
      - $ref: '#/components/schemas/engagement-summary'
      - $ref: '#/components/schemas/enhancement-summary'
      - $ref: '#/components/schemas/event-source-summary'
      - $ref: '#/components/schemas/feature-pin-summary'
      - $ref: '#/components/schemas/feature-summary'
      - $ref: '#/components/schemas/flow-summary'
      - $ref: '#/components/schemas/function-definition-summary'
      - $ref: '#/components/schemas/group-summary'
      - $ref: '#/components/schemas/invoice-summary'
      - $ref: '#/components/schemas/issue-summary'
      - $ref: '#/components/schemas/keyring-summary'
      - $ref: '#/components/schemas/link-summary'
      - $ref: '#/components/schemas/linkable-pin-summary'
      - $ref: '#/components/schemas/linkable-summary'
      - $ref: '#/components/schemas/marketplace-category-summary'
      - $ref: '#/components/schemas/marketplace-item-summary'
      - $ref: '#/components/schemas/marketplace-submission-summary'
      - $ref: '#/components/schemas/marketplace-summary'
      - $ref: '#/components/schemas/meeting-summary'
      - $ref: '#/components/schemas/metric-definition-summary'
      - $ref: '#/components/schemas/microflow-definition-summary'
      - $ref: '#/components/schemas/microservice-summary'
      - $ref: '#/components/schemas/new-invoice-item-summary'
      - $ref: '#/components/schemas/new-invoice-summary'
      - $ref: '#/components/schemas/news-summary'
      - $ref: '#/components/schemas/oasis-data-summary'
      - $ref: '#/components/schemas/object-assignment-notification-summary'
      - $ref: '#/components/schemas/object-member-summary'
      - $ref: '#/components/schemas/one-time-line-item-summary'
      - $ref: '#/components/schemas/opportunity-summary'
      - $ref: '#/components/schemas/org-preferences-summary'
      - $ref: '#/components/schemas/org-schedule-fragment-summary'
      - $ref: '#/components/schemas/org-schedule-summary'
      - $ref: '#/components/schemas/payment-method-bank-account-summary'
      - $ref: '#/components/schemas/payment-method-card-summary'
      - $ref: '#/components/schemas/plug-setting-summary'
      - $ref: '#/components/schemas/pr-review-reminder-summary'
      - $ref: '#/components/schemas/pricing-summary'
      - $ref: '#/components/schemas/product-summary'
      - $ref: '#/components/schemas/project-summary'
      - $ref: '#/components/schemas/push-device-summary'
      - $ref: '#/components/schemas/question-answer-summary'
      - $ref: '#/components/schemas/real-time-insight-summary'
      - $ref: '#/components/schemas/real-time-insight-value-summary'
      - $ref: '#/components/schemas/recurring-line-item-summary'
      - $ref: '#/components/schemas/rev-org-summary'
      - $ref: '#/components/schemas/rev-user-summary'
      - $ref: '#/components/schemas/reward-summary'
      - $ref: '#/components/schemas/reward-transaction-summary'
      - $ref: '#/components/schemas/role-summary'
      - $ref: '#/components/schemas/room-summary'
      - $ref: '#/components/schemas/rule-summary'
      - $ref: '#/components/schemas/runnable-pin-summary'
      - $ref: '#/components/schemas/runnable-summary'
      - $ref: '#/components/schemas/service-account-summary'
      - $ref: '#/components/schemas/service-plan-summary'
      - $ref: '#/components/schemas/settings-summary'
      - $ref: '#/components/schemas/sku-rule-summary'
      - $ref: '#/components/schemas/sku-summary'
      - $ref: '#/components/schemas/sla-summary'
      - $ref: '#/components/schemas/sla-tracker-summary'
      - $ref: '#/components/schemas/snap-component-summary'
      - $ref: '#/components/schemas/snap-in-function-summary'
      - $ref: '#/components/schemas/snap-in-package-summary'
      - $ref: '#/components/schemas/snap-in-summary'
      - $ref: '#/components/schemas/snap-in-version-summary'
      - $ref: '#/components/schemas/snap-kit-action-summary'
      - $ref: '#/components/schemas/stage-diagram-summary'
      - $ref: '#/components/schemas/stock-schema-fragment-private-summary'
      - $ref: '#/components/schemas/stock-schema-fragment-summary'
      - $ref: '#/components/schemas/survey-response-summary'
      - $ref: '#/components/schemas/survey-summary'
      - $ref: '#/components/schemas/sys-user-summary'
      - $ref: '#/components/schemas/tag-summary'
      - $ref: '#/components/schemas/task-summary'
      - $ref: '#/components/schemas/tenant-fragment-private-summary'
      - $ref: '#/components/schemas/tenant-fragment-summary'
      - $ref: '#/components/schemas/ticket-summary'
      - $ref: '#/components/schemas/timeline-change-event-summary'
      - $ref: '#/components/schemas/timeline-comment-summary'
      - $ref: '#/components/schemas/timeline-huddle-summary'
      - $ref: '#/components/schemas/uom-summary'
      - $ref: '#/components/schemas/user-mentioned-notification-summary'
      - $ref: '#/components/schemas/user-participation-notification-summary'
      - $ref: '#/components/schemas/user-preferences-summary'
      - $ref: '#/components/schemas/vista-shared-notification-summary'
      - $ref: '#/components/schemas/webhook-summary'
      - $ref: '#/components/schemas/window-based-insight-summary'
      - $ref: '#/components/schemas/window-based-insight-value-summary'
      properties:
        type:
          $ref: '#/components/schemas/atom-type'
      required:
      - type
      title: atom-summary
      type: object
    atom-type:
      enum:
      - account
      - addon_rule
      - app_fragment
      - app_fragment_private
      - article
      - artifact
      - auth_token
      - automation
      - capability
      - command
      - component
      - conversation
      - conversation_created_notification
      - conversation_inactivity_reminder
      - credit
      - credit_coupon
      - custom_object
      - custom_part
      - custom_stage
      - custom_state
      - custom_type_fragment
      - custom_type_fragment_private
      - custom_work
      - dev_org
      - dev_user
      - devrev_profile
      - devrev_reminder
      - devu_invite
      - discovery_git_commit
      - discovery_git_event
      - discovery_profile
      - discovery_run
      - discovery_settings
      - engagement
      - enhancement
      - event_source
      - feature
      - feature_pin
      - flow
      - function_definition
      - group
      - invoice
      - issue
      - keyring
      - link
      - linkable
      - linkable_pin
      - marketplace
      - marketplace_category
      - marketplace_item
      - marketplace_submission
      - meeting
      - metric_definition
      - microflow_definition
      - microservice
      - new_invoice
      - new_invoice_item
      - news
      - oasis_data
      - object_assignment_notification
      - object_member
      - one_time_line_item
      - opportunity
      - org_preferences
      - org_schedule
      - org_schedule_fragment
      - payment_method_bank_account
      - payment_method_card
      - plug_setting
      - pr_review_reminder
      - pricing
      - product
      - project
      - push_device
      - question_answer
      - real_time_insight
      - real_time_insight_value
      - recurring_line_item
      - rev_org
      - rev_user
      - reward
      - reward_transaction
      - role
      - room
      - rule
      - runnable
      - runnable_pin
      - service_account
      - service_plan
      - settings
      - sku
      - sku_rule
      - sla
      - sla_tracker
      - snap_component
      - snap_in
      - snap_in_function
      - snap_in_package
      - snap_in_version
      - snap_kit_action
      - stage_diagram
      - stock_schema_fragment
      - stock_schema_fragment_private
      - survey
      - survey_response
      - sys_user
      - tag
      - task
      - tenant_fragment
      - tenant_fragment_private
      - ticket
      - timeline_change_event
      - timeline_comment
      - timeline_huddle
      - uom
      - user_mentioned_notification
      - user_participation_notification
      - user_preferences
      - vista_shared_notification
      - webhook
      - window_based_insight
      - window_based_insight_value
      type: string
    atoms-summary-request:
      properties:
        id:
          description: The ID of the object to get the summary for.
          type: string
      required:
      - id
      title: atoms-summary-request
      type: object
    atoms-summary-response:
      properties:
        summary:
          $ref: '#/components/schemas/atom-summary'
      required:
      - summary
      title: atoms-summary-response
      type: object
      x-go-name: AtomsSummaryResponseBody
    auth-connection:
      description: |
        Connection object that specifies the configuration for an
        authentication connection that is set up for a Dev organization.
      discriminator:
        mapping:
          google_apps: '#/components/schemas/auth-connection-options-google-apps'
          oidc: '#/components/schemas/auth-connection-options-oidc'
          samlp: '#/components/schemas/auth-connection-options-saml'
          social: '#/components/schemas/auth-connection-options-social'
          waad: '#/components/schemas/auth-connection-options-azure-ad'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/auth-connection-options-azure-ad'
      - $ref: '#/components/schemas/auth-connection-options-google-apps'
      - $ref: '#/components/schemas/auth-connection-options-oidc'
      - $ref: '#/components/schemas/auth-connection-options-saml'
      - $ref: '#/components/schemas/auth-connection-options-social'
      properties:
        display_name:
          description: |
            Display name of the authentication connection. This name will be
            visible to all the users when they sign in to this Dev
            organization. For example, if the display_name is 'abclogin', then
            it would appear on the login button as 'Log in to abclogin'.
          type: string
        enabled:
          description: |
            Whether the authentication connection is enabled or disabled. If
            set to false, the authentication connection will not show up on the
            login screen as a login option.
          type: boolean
        id:
          description: ID of the authentication connection.
          type: string
        type:
          $ref: '#/components/schemas/auth-connection-type'
      required:
      - id
      - type
      title: auth-connection
      type: object
    auth-connection-options-azure-ad:
      description: |
        Object encapsulating the configuration parameters for an Azure AD
        authentication connection.
      properties:
        client_id:
          description: Client ID for the Azure authentication connection.
          type: string
        client_secret:
          description: Client secret for the Azure authentication connection.
          type: string
        domain:
          description: Domain URL of the Azure authentication connection.
          type: string
      title: auth-connection-options-azure-ad
      type: object
    auth-connection-options-google-apps:
      description: |
        Object encapsulating the configuration parameters for a Google Apps
        authentication connection.
      properties:
        client_id:
          description: Client ID for the Google Apps authentication connection.
          type: string
        client_secret:
          description: |
            Client secret for the Google Apps authentication connection.
          type: string
        tenant_domain:
          description: |
            Tenant domain URL of the Google Apps authentication connection.
          type: string
      title: auth-connection-options-google-apps
      type: object
    auth-connection-options-oidc:
      description: |
        Object encapsulating the configuration parameters for an OIDC
        authentication connection.
      properties:
        client_id:
          description: Client ID for the OIDC authentication connection.
          type: string
        client_secret:
          description: Client secret for the OIDC authentication connection.
          type: string
        issuer:
          description: Issuer URL of the OIDC authentication connection.
          type: string
      title: auth-connection-options-oidc
      type: object
    auth-connection-options-saml:
      description: |
        Object encapsulating the configuration parameters for a SAML
        authentication connection.
      properties:
        sign_in_endpoint:
          description: Sign In endpoint for the SAML authentication connection.
          type: string
        signing_cert:
          description: |
            Signing certificate for the SAML authentication connection.
          type: string
      title: auth-connection-options-saml
      type: object
    auth-connection-options-social:
      title: auth-connection-options-social
      type: object
    auth-connection-toggle:
      enum:
      - disable
      - enable
      type: string
    auth-connection-type:
      description: |
        Defines the type for the authentication connection. The configuration
        for each authentication connection will depend on the type value.
      enum:
      - google_apps
      - oidc
      - samlp
      - social
      - waad
      type: string
    auth-token:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          client_id:
            description: |
              An identifier that represents the application that requested the
              token. Only applicable for application access tokens.
            type: string
          expires_at:
            description: The time at which the token expires.
            format: date-time
            type: string
          issued_at:
            description: The time at which the token was issued.
            format: date-time
            type: string
          requested_token_type:
            $ref: '#/components/schemas/auth-token-requested-token-type'
          scopes:
            description: The scopes associated with the issued token.
            items:
              type: string
            type: array
          status:
            $ref: '#/components/schemas/auth-token-status'
          subject:
            description: The subject of the token.
            type: string
          token_hint:
            description: A hint that identifies the token.
            type: string
        type: object
      title: auth-token
    auth-token-grant-type:
      description: Specifies the process of obtaining a token.
      enum:
      - urn:devrev:params:oauth:grant-type:token-issue
      - urn:ietf:params:oauth:grant-type:token-exchange
      type: string
      x-fern-enum:
        urn:devrev:params:oauth:grant-type:token-issue:
          name: urn-devrev-params-oauth-grant-type-token-issue
        urn:ietf:params:oauth:grant-type:token-exchange:
          name: urn-ietf-params-oauth-grant-type-token-exchange
    auth-token-requested-token-type:
      description: The type of the requested token.
      enum:
      - urn:devrev:params:oauth:token-type:aat
      - urn:devrev:params:oauth:token-type:aat:public
      - urn:devrev:params:oauth:token-type:dev
      - urn:devrev:params:oauth:token-type:pat
      - urn:devrev:params:oauth:token-type:rev
      - urn:devrev:params:oauth:token-type:session
      - urn:devrev:params:oauth:token-type:session:dev0
      - urn:devrev:params:oauth:token-type:sys
      - urn:ietf:params:oauth:token-type:jwt
      type: string
      x-fern-enum:
        urn:devrev:params:oauth:token-type:aat:
          name: urn-devrev-params-oauth-token-type-aat
        urn:devrev:params:oauth:token-type:aat:public:
          name: urn-devrev-params-oauth-token-type-aat-public
        urn:devrev:params:oauth:token-type:dev:
          name: urn-devrev-params-oauth-token-type-dev
        urn:devrev:params:oauth:token-type:pat:
          name: urn-devrev-params-oauth-token-type-pat
        urn:devrev:params:oauth:token-type:rev:
          name: urn-devrev-params-oauth-token-type-rev
        urn:devrev:params:oauth:token-type:session:
          name: urn-devrev-params-oauth-token-type-session
        urn:devrev:params:oauth:token-type:session:dev0:
          name: urn-devrev-params-oauth-token-type-session-dev0
        urn:devrev:params:oauth:token-type:sys:
          name: urn-devrev-params-oauth-token-type-sys
        urn:ietf:params:oauth:token-type:jwt:
          name: urn-ietf-params-oauth-token-type-jwt
    auth-token-status:
      description: The status of the token.
      enum:
      - active
      - expired
      - revoked
      type: string
    auth-token-subject-token-type:
      description: The type of the subject token.
      enum:
      - urn:devrev:params:oauth:token-type:jwt:auth0
      - urn:devrev:params:oauth:token-type:jwt:dev
      - urn:devrev:params:oauth:token-type:revinfo
      - urn:devrev:params:oauth:token-type:sysu
      - urn:devrev:params:oauth:token-type:userinfo
      - urn:devrev:params:oauth:token-type:userinfo:profile
      - urn:ietf:params:oauth:token-type:jwt
      type: string
      x-fern-enum:
        urn:devrev:params:oauth:token-type:jwt:auth0:
          name: urn-devrev-params-oauth-token-type-jwt-auth0
        urn:devrev:params:oauth:token-type:jwt:dev:
          name: urn-devrev-params-oauth-token-type-jwt-dev
        urn:devrev:params:oauth:token-type:revinfo:
          name: urn-devrev-params-oauth-token-type-revinfo
        urn:devrev:params:oauth:token-type:sysu:
          name: urn-devrev-params-oauth-token-type-sysu
        urn:devrev:params:oauth:token-type:userinfo:
          name: urn-devrev-params-oauth-token-type-userinfo
        urn:devrev:params:oauth:token-type:userinfo:profile:
          name: urn-devrev-params-oauth-token-type-userinfo-profile
        urn:ietf:params:oauth:token-type:jwt:
          name: urn-ietf-params-oauth-token-type-jwt
    auth-token-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: auth-token-summary
    auth-token-token-type:
      description: |
        The type of the issued token. Bearer is the only supported token type.
      enum:
      - bearer
      type: string
    auth-tokens-create-request:
      description: |
        A request to create a new token corresponding to the requested token
        type.
      properties:
        aud:
          description: The expected audience values with respect to the token.
          items:
            type: string
          type: array
        client_id:
          description: |
            An identifier that represents the application which is requesting
            the token. If no client_id is present in the request to generate an
            application access token (AAT), DevRev will generate a client_id.
            This client_id is only associated with an AAT.
          type: string
        expires_in:
          description: |
            The expected validity lifetime of the token in number of days.
          format: int64
          type: integer
        grant_type:
          $ref: '#/components/schemas/auth-token-grant-type'
        requested_token_type:
          $ref: '#/components/schemas/auth-token-requested-token-type'
        rev_info:
          $ref: '#/components/schemas/auth-tokens-rev-info'
        scope:
          description: |
            The requested set of scopes associated with the issued token. A
            space-delimited list of values in which the order of values does
            not matter.
          type: string
        subject_token:
          description: |
            Represents the entity that requests the token. Not required when
            requesting an application access token (AAT).
          type: string
        subject_token_type:
          $ref: '#/components/schemas/auth-token-subject-token-type'
        token_hint:
          description: A hint that identifies the token.
          type: string
      title: auth-tokens-create-request
      type: object
    auth-tokens-create-response:
      description: |
        Response for the request to create a new token corresponding to the
        requested token type.
      properties:
        access_token:
          description: |
            The issued JSON Web Token (JWT) corresponding to the requested
            token type.
          type: string
        client_id:
          description: |
            An identifier that represents the application which is requesting
            the token. Only present in a response corresponding to an
            application access token (AAT).
          type: string
        expires_in:
          description: |
            The validity lifetime of the token specified in seconds since Unix
            epoch.
          format: int64
          type: integer
        refresh_token:
          description: A token to refresh the issued token.
          type: string
        scope:
          description: |
            The scopes associated with the issued token. A space-delimited list
            of values in which the order of values does not matter.
          type: string
        token_type:
          $ref: '#/components/schemas/auth-token-token-type'
      required:
      - access_token
      - expires_in
      - token_type
      title: auth-tokens-create-response
      type: object
      x-go-name: AuthTokensCreateResponseBody
    auth-tokens-delete-request:
      description: The request to revoke the token.
      properties:
        token_id:
          description: |
            The unique identifier for the token under a given Dev organization.
            If no token ID is provided, then the token ID will be set from the
            JTI claim of the token in the authorization header.
          type: string
      title: auth-tokens-delete-request
      type: object
    auth-tokens-get-request:
      description: The request to get the token metadata.
      properties:
        token_id:
          description: |
            The unique identifier of the token under a given Dev organization.
          type: string
      required:
      - token_id
      title: auth-tokens-get-request
      type: object
    auth-tokens-get-response:
      description: The response to get the token metadata.
      properties:
        token:
          $ref: '#/components/schemas/auth-token'
      required:
      - token
      title: auth-tokens-get-response
      type: object
      x-go-name: AuthTokensGetResponseBody
    auth-tokens-list-request:
      description: A request to list the token metadata.
      properties:
        client_id:
          description: |
            An identifier that represents the application, which requested the
            token. Only relevant for application access tokens.
          type: string
        requested_token_type:
          $ref: '#/components/schemas/auth-token-requested-token-type'
        subject:
          description: |
            The subject associated with the token. In the absence of this
            parameter, the ID of the authenticated entity is treated as the
            subject.
          type: string
      title: auth-tokens-list-request
      type: object
    auth-tokens-list-response:
      description: The response to list the token metadata.
      properties:
        tokens:
          description: The list of token metadata.
          items:
            $ref: '#/components/schemas/auth-token'
          type: array
      required:
      - tokens
      title: auth-tokens-list-response
      type: object
      x-go-name: AuthTokensListResponseBody
    auth-tokens-org-traits:
      description: Carries Rev org info.
      properties:
        display_name:
          description: The display name of the Rev org.
          type: string
        domain:
          description: The domain of the Rev org.
          type: string
      title: auth-tokens-org-traits
      type: object
    auth-tokens-rev-info:
      description: |
        Carries info corresponding to the Rev user to be provisioned and/or
        issue a Rev session token.
      properties:
        org_ref:
          description: An identifier which uniquely identifies a Rev org.
          type: string
        org_traits:
          $ref: '#/components/schemas/auth-tokens-org-traits'
        rev_user_id:
          description: The unique ID of the Rev user.
          type: string
        user_ref:
          description: An identifier which uniquely identifies a Rev user.
          type: string
        user_traits:
          $ref: '#/components/schemas/auth-tokens-user-traits'
      required:
      - user_ref
      title: auth-tokens-rev-info
      type: object
    auth-tokens-self-delete-request:
      description: |
        The request to delete all the tokens created by the authenticated user,
        that match with the provided token type.
      properties:
        requested_token_type:
          $ref: '#/components/schemas/auth-token-requested-token-type'
      title: auth-tokens-self-delete-request
      type: object
    auth-tokens-update-request:
      description: A request to update the token metadata.
      properties:
        token_hint:
          description: A hint that identifies the token.
          type: string
        token_id:
          description: |
            The unique identifier of the token under a given Dev organization.
          type: string
      required:
      - token_hint
      - token_id
      title: auth-tokens-update-request
      type: object
    auth-tokens-update-response:
      description: Response for the request to update the token metadata.
      properties:
        token:
          $ref: '#/components/schemas/auth-token'
      required:
      - token
      title: auth-tokens-update-response
      type: object
      x-go-name: AuthTokensUpdateResponseBody
    auth-tokens-user-traits:
      description: Carries Rev user info.
      properties:
        display_name:
          description: The display name of the Rev user.
          type: string
        email:
          description: The email address of the Rev user.
          type: string
        full_name:
          description: The full name of the Rev user.
          type: string
      title: auth-tokens-user-traits
      type: object
    authorized-field-metadata:
      properties:
        name:
          description: The field's name
          type: string
        privileges:
          description: The privilege information for that field
          items:
            $ref: '#/components/schemas/field-privilege'
          type: array
      required:
      - name
      - privileges
      title: authorized-field-metadata
      type: object
    auto-suggest-request:
      description: Autosuggest request.
      properties:
        action:
          $ref: '#/components/schemas/user-action'
        context:
          $ref: '#/components/schemas/work-context'
        requested_fields:
          description: The fields for which recommendation is required.
          items:
            $ref: '#/components/schemas/auto-suggest-requested-field'
          type: array
      required:
      - context
      title: auto-suggest-request
      type: object
    auto-suggest-requested-field:
      description: Field types for autosuggest recommendation.
      enum:
      - applies_to_part
      - owned_by
      - tag
      type: string
    auto-suggest-response:
      description: Autosuggest response.
      properties:
        recommendation:
          $ref: '#/components/schemas/recommendation'
        version:
          description: Version of the autosuggest model.
          type: string
      required:
      - recommendation
      title: auto-suggest-response
      type: object
      x-go-name: AutoSuggestResponseBody
    automation-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          description:
            description: Description of the automation.
            type: string
          name:
            description: Name of the automation.
            type: string
        type: object
      title: automation-summary
    availability-preferences-group:
      description: Preferences group for Availability.
      properties:
        manual_away:
          description: Manually set presence to away.
          type: boolean
      title: availability-preferences-group
      type: object
    batch-apply-request:
      properties:
        items:
          description: An individual request item.
          items:
            $ref: '#/components/schemas/batch-apply-request-item'
          type: array
      required:
      - items
      title: batch-apply-request
      type: object
    batch-apply-request-item:
      discriminator:
        mapping:
          accounts_count: '#/components/schemas/accounts-count-request'
          accounts_create: '#/components/schemas/accounts-create-request'
          accounts_delete: '#/components/schemas/accounts-delete-request'
          accounts_delete_validate: '#/components/schemas/accounts-delete-validate-request'
          accounts_get: '#/components/schemas/accounts-get-request'
          accounts_update: '#/components/schemas/accounts-update-request'
          articles_count: '#/components/schemas/articles-count-request'
          conversations_count: '#/components/schemas/conversations-count-request'
          conversations_create: '#/components/schemas/conversations-create-request'
          conversations_delete: '#/components/schemas/conversations-delete-request'
          conversations_get: '#/components/schemas/conversations-get-request'
          conversations_update: '#/components/schemas/conversations-update-request'
          custom_schema_fragments_get: '#/components/schemas/custom-schema-fragments-get-request-private'
          links_create: '#/components/schemas/links-create-request'
          links_delete: '#/components/schemas/links-delete-request'
          links_get: '#/components/schemas/links-get-request'
          links_replace: '#/components/schemas/links-replace-request'
          parts_count: '#/components/schemas/parts-count-request'
          parts_create: '#/components/schemas/parts-create-request'
          parts_delete: '#/components/schemas/parts-delete-request'
          parts_get: '#/components/schemas/parts-get-request'
          parts_update: '#/components/schemas/parts-update-request'
          rev_orgs_count: '#/components/schemas/rev-orgs-count-request'
          rev_orgs_create: '#/components/schemas/rev-orgs-create-request'
          rev_orgs_delete: '#/components/schemas/rev-orgs-delete-request'
          rev_orgs_delete_validate: '#/components/schemas/rev-orgs-delete-validate-request'
          rev_orgs_get: '#/components/schemas/rev-orgs-get-request'
          rev_orgs_update: '#/components/schemas/rev-orgs-update-request'
          rev_users_count: '#/components/schemas/rev-users-count-request'
          rev_users_create: '#/components/schemas/rev-users-create-request'
          rev_users_delete: '#/components/schemas/rev-users-delete-request'
          rev_users_get: '#/components/schemas/rev-users-get-request'
          rev_users_update: '#/components/schemas/rev-users-update-request'
          subtypes_list: '#/components/schemas/subtypes-list-request'
          tags_create: '#/components/schemas/tags-create-request'
          tags_delete: '#/components/schemas/tags-delete-request'
          tags_get: '#/components/schemas/tags-get-request'
          tags_update: '#/components/schemas/tags-update-request'
          timeline_entries_create: '#/components/schemas/timeline-entries-create-request'
          timeline_entries_delete: '#/components/schemas/timeline-entries-delete-request'
          timeline_entries_get: '#/components/schemas/timeline-entries-get-request'
          timeline_entries_list: '#/components/schemas/timeline-entries-list-request'
          timeline_entries_update: '#/components/schemas/timeline-entries-update-request'
          works_count: '#/components/schemas/works-count-request'
          works_create: '#/components/schemas/works-create-request'
          works_delete: '#/components/schemas/works-delete-request'
          works_get: '#/components/schemas/works-get-request'
          works_update: '#/components/schemas/works-update-request'
        propertyName: batch_type
      oneOf:
      - $ref: '#/components/schemas/accounts-count-request'
      - $ref: '#/components/schemas/accounts-create-request'
      - $ref: '#/components/schemas/accounts-delete-request'
      - $ref: '#/components/schemas/accounts-delete-validate-request'
      - $ref: '#/components/schemas/accounts-get-request'
      - $ref: '#/components/schemas/accounts-update-request'
      - $ref: '#/components/schemas/articles-count-request'
      - $ref: '#/components/schemas/conversations-count-request'
      - $ref: '#/components/schemas/conversations-create-request'
      - $ref: '#/components/schemas/conversations-delete-request'
      - $ref: '#/components/schemas/conversations-get-request'
      - $ref: '#/components/schemas/conversations-update-request'
      - $ref: '#/components/schemas/custom-schema-fragments-get-request-private'
      - $ref: '#/components/schemas/links-create-request'
      - $ref: '#/components/schemas/links-delete-request'
      - $ref: '#/components/schemas/links-get-request'
      - $ref: '#/components/schemas/links-replace-request'
      - $ref: '#/components/schemas/parts-count-request'
      - $ref: '#/components/schemas/parts-create-request'
      - $ref: '#/components/schemas/parts-delete-request'
      - $ref: '#/components/schemas/parts-get-request'
      - $ref: '#/components/schemas/parts-update-request'
      - $ref: '#/components/schemas/rev-orgs-count-request'
      - $ref: '#/components/schemas/rev-orgs-create-request'
      - $ref: '#/components/schemas/rev-orgs-delete-request'
      - $ref: '#/components/schemas/rev-orgs-delete-validate-request'
      - $ref: '#/components/schemas/rev-orgs-get-request'
      - $ref: '#/components/schemas/rev-orgs-update-request'
      - $ref: '#/components/schemas/rev-users-count-request'
      - $ref: '#/components/schemas/rev-users-create-request'
      - $ref: '#/components/schemas/rev-users-delete-request'
      - $ref: '#/components/schemas/rev-users-get-request'
      - $ref: '#/components/schemas/rev-users-update-request'
      - $ref: '#/components/schemas/subtypes-list-request'
      - $ref: '#/components/schemas/tags-create-request'
      - $ref: '#/components/schemas/tags-delete-request'
      - $ref: '#/components/schemas/tags-get-request'
      - $ref: '#/components/schemas/tags-update-request'
      - $ref: '#/components/schemas/timeline-entries-create-request'
      - $ref: '#/components/schemas/timeline-entries-delete-request'
      - $ref: '#/components/schemas/timeline-entries-get-request'
      - $ref: '#/components/schemas/timeline-entries-list-request'
      - $ref: '#/components/schemas/timeline-entries-update-request'
      - $ref: '#/components/schemas/works-count-request'
      - $ref: '#/components/schemas/works-create-request'
      - $ref: '#/components/schemas/works-delete-request'
      - $ref: '#/components/schemas/works-get-request'
      - $ref: '#/components/schemas/works-update-request'
      properties:
        batch_type:
          $ref: '#/components/schemas/batch-apply-request-item-batch-type'
      required:
      - batch_type
      title: batch-apply-request-item
      type: object
    batch-apply-request-item-batch-type:
      enum:
      - accounts_count
      - accounts_create
      - accounts_delete
      - accounts_delete_validate
      - accounts_get
      - accounts_update
      - articles_count
      - conversations_count
      - conversations_create
      - conversations_delete
      - conversations_get
      - conversations_update
      - custom_schema_fragments_get
      - links_create
      - links_delete
      - links_get
      - links_replace
      - parts_count
      - parts_create
      - parts_delete
      - parts_get
      - parts_update
      - rev_orgs_count
      - rev_orgs_create
      - rev_orgs_delete
      - rev_orgs_delete_validate
      - rev_orgs_get
      - rev_orgs_update
      - rev_users_count
      - rev_users_create
      - rev_users_delete
      - rev_users_get
      - rev_users_update
      - subtypes_list
      - tags_create
      - tags_delete
      - tags_get
      - tags_update
      - timeline_entries_create
      - timeline_entries_delete
      - timeline_entries_get
      - timeline_entries_list
      - timeline_entries_update
      - works_count
      - works_create
      - works_delete
      - works_get
      - works_update
      type: string
    batch-apply-response:
      properties:
        items:
          description: |
            An individual response item. The item will be the response for the
            corresponding index in the request.
          items:
            $ref: '#/components/schemas/batch-apply-response-item'
          type: array
      required:
      - items
      title: batch-apply-response
      type: object
      x-go-name: BatchApplyResponseBody
    batch-apply-response-item:
      discriminator:
        mapping:
          accounts_count: '#/components/schemas/accounts-count-response'
          accounts_create: '#/components/schemas/accounts-create-response'
          accounts_delete: '#/components/schemas/accounts-delete-response'
          accounts_delete_validate: '#/components/schemas/accounts-delete-validate-response'
          accounts_get: '#/components/schemas/accounts-get-response'
          accounts_update: '#/components/schemas/accounts-update-response'
          articles_count: '#/components/schemas/articles-count-response'
          conversations_count: '#/components/schemas/conversations-count-response'
          conversations_create: '#/components/schemas/conversations-create-response'
          conversations_delete: '#/components/schemas/conversations-delete-response'
          conversations_get: '#/components/schemas/conversations-get-response'
          conversations_update: '#/components/schemas/conversations-update-response'
          custom_schema_fragments_get: '#/components/schemas/custom-schema-fragments-get-response-private'
          error: '#/components/schemas/error'
          links_create: '#/components/schemas/links-create-response'
          links_delete: '#/components/schemas/links-delete-response'
          links_get: '#/components/schemas/links-get-response'
          links_replace: '#/components/schemas/links-replace-response'
          parts_count: '#/components/schemas/parts-count-response'
          parts_create: '#/components/schemas/parts-create-response'
          parts_delete: '#/components/schemas/parts-delete-response'
          parts_get: '#/components/schemas/parts-get-response'
          parts_update: '#/components/schemas/parts-update-response'
          rev_orgs_count: '#/components/schemas/rev-orgs-count-response'
          rev_orgs_create: '#/components/schemas/rev-orgs-create-response'
          rev_orgs_delete: '#/components/schemas/rev-orgs-delete-response'
          rev_orgs_delete_validate: '#/components/schemas/rev-orgs-delete-validate-response'
          rev_orgs_get: '#/components/schemas/rev-orgs-get-response'
          rev_orgs_update: '#/components/schemas/rev-orgs-update-response'
          rev_users_count: '#/components/schemas/rev-users-count-response'
          rev_users_create: '#/components/schemas/rev-users-create-response'
          rev_users_delete: '#/components/schemas/rev-users-delete-response'
          rev_users_get: '#/components/schemas/rev-users-get-response'
          rev_users_update: '#/components/schemas/rev-users-update-response'
          subtypes_list: '#/components/schemas/subtypes-list-response'
          tags_create: '#/components/schemas/tags-create-response'
          tags_delete: '#/components/schemas/tags-delete-response'
          tags_get: '#/components/schemas/tags-get-response'
          tags_update: '#/components/schemas/tags-update-response'
          timeline_entries_create: '#/components/schemas/timeline-entries-create-response'
          timeline_entries_delete: '#/components/schemas/timeline-entries-delete-response'
          timeline_entries_get: '#/components/schemas/timeline-entries-get-response'
          timeline_entries_list: '#/components/schemas/timeline-entries-list-response'
          timeline_entries_update: '#/components/schemas/timeline-entries-update-response'
          works_count: '#/components/schemas/works-count-response'
          works_create: '#/components/schemas/works-create-response'
          works_delete: '#/components/schemas/works-delete-response'
          works_get: '#/components/schemas/works-get-response'
          works_update: '#/components/schemas/works-update-response'
        propertyName: batch_type
      oneOf:
      - $ref: '#/components/schemas/accounts-count-response'
      - $ref: '#/components/schemas/accounts-create-response'
      - $ref: '#/components/schemas/accounts-delete-response'
      - $ref: '#/components/schemas/accounts-delete-validate-response'
      - $ref: '#/components/schemas/accounts-get-response'
      - $ref: '#/components/schemas/accounts-update-response'
      - $ref: '#/components/schemas/articles-count-response'
      - $ref: '#/components/schemas/conversations-count-response'
      - $ref: '#/components/schemas/conversations-create-response'
      - $ref: '#/components/schemas/conversations-delete-response'
      - $ref: '#/components/schemas/conversations-get-response'
      - $ref: '#/components/schemas/conversations-update-response'
      - $ref: '#/components/schemas/custom-schema-fragments-get-response-private'
      - $ref: '#/components/schemas/error'
      - $ref: '#/components/schemas/links-create-response'
      - $ref: '#/components/schemas/links-delete-response'
      - $ref: '#/components/schemas/links-get-response'
      - $ref: '#/components/schemas/links-replace-response'
      - $ref: '#/components/schemas/parts-count-response'
      - $ref: '#/components/schemas/parts-create-response'
      - $ref: '#/components/schemas/parts-delete-response'
      - $ref: '#/components/schemas/parts-get-response'
      - $ref: '#/components/schemas/parts-update-response'
      - $ref: '#/components/schemas/rev-orgs-count-response'
      - $ref: '#/components/schemas/rev-orgs-create-response'
      - $ref: '#/components/schemas/rev-orgs-delete-response'
      - $ref: '#/components/schemas/rev-orgs-delete-validate-response'
      - $ref: '#/components/schemas/rev-orgs-get-response'
      - $ref: '#/components/schemas/rev-orgs-update-response'
      - $ref: '#/components/schemas/rev-users-count-response'
      - $ref: '#/components/schemas/rev-users-create-response'
      - $ref: '#/components/schemas/rev-users-delete-response'
      - $ref: '#/components/schemas/rev-users-get-response'
      - $ref: '#/components/schemas/rev-users-update-response'
      - $ref: '#/components/schemas/subtypes-list-response'
      - $ref: '#/components/schemas/tags-create-response'
      - $ref: '#/components/schemas/tags-delete-response'
      - $ref: '#/components/schemas/tags-get-response'
      - $ref: '#/components/schemas/tags-update-response'
      - $ref: '#/components/schemas/timeline-entries-create-response'
      - $ref: '#/components/schemas/timeline-entries-delete-response'
      - $ref: '#/components/schemas/timeline-entries-get-response'
      - $ref: '#/components/schemas/timeline-entries-list-response'
      - $ref: '#/components/schemas/timeline-entries-update-response'
      - $ref: '#/components/schemas/works-count-response'
      - $ref: '#/components/schemas/works-create-response'
      - $ref: '#/components/schemas/works-delete-response'
      - $ref: '#/components/schemas/works-get-response'
      - $ref: '#/components/schemas/works-update-response'
      properties:
        batch_type:
          $ref: '#/components/schemas/batch-apply-response-item-batch-type'
      required:
      - batch_type
      title: batch-apply-response-item
      type: object
    batch-apply-response-item-batch-type:
      enum:
      - accounts_count
      - accounts_create
      - accounts_delete
      - accounts_delete_validate
      - accounts_get
      - accounts_update
      - articles_count
      - conversations_count
      - conversations_create
      - conversations_delete
      - conversations_get
      - conversations_update
      - custom_schema_fragments_get
      - error
      - links_create
      - links_delete
      - links_get
      - links_replace
      - parts_count
      - parts_create
      - parts_delete
      - parts_get
      - parts_update
      - rev_orgs_count
      - rev_orgs_create
      - rev_orgs_delete
      - rev_orgs_delete_validate
      - rev_orgs_get
      - rev_orgs_update
      - rev_users_count
      - rev_users_create
      - rev_users_delete
      - rev_users_get
      - rev_users_update
      - subtypes_list
      - tags_create
      - tags_delete
      - tags_get
      - tags_update
      - timeline_entries_create
      - timeline_entries_delete
      - timeline_entries_get
      - timeline_entries_list
      - timeline_entries_update
      - works_count
      - works_create
      - works_delete
      - works_get
      - works_update
      type: string
    bulk-import-request-type-enum:
      enum:
      - create
      - preview_headers
      - preview_records
      - unknown
      type: string
    capabilities-list-request:
      title: capabilities-list-request
      type: object
    capabilities-list-response:
      properties:
        categories:
          description: List of supported categories.
          items:
            type: string
          type: array
        external_services:
          description: List of supported external services.
          items:
            $ref: '#/components/schemas/capabilities-list-response-external-service'
          type: array
      required:
      - categories
      - external_services
      title: capabilities-list-response
      type: object
      x-go-name: CapabilitiesListResponseBody
    capabilities-list-response-external-service:
      properties:
        categories:
          description: Supported keyring categories.
          items:
            type: string
          type: array
        connections:
          description: |
            Supported keyring types (connections) to the external service.
          items:
            $ref: '#/components/schemas/capabilities-list-response-external-service-connection'
          type: array
        id:
          description: Unique id of the external service.
          type: string
        name:
          description: User friendly name of the external service.
          type: string
      required:
      - categories
      - connections
      - id
      - name
      title: capabilities-list-response-external-service
      type: object
    capabilities-list-response-external-service-connection:
      properties:
        add_new_org_keyring_type:
          $ref: '#/components/schemas/keyring-type'
        can_create:
          description: Can user create a new keyring of this type.
          type: boolean
        can_reauthorize:
          description: Can user trigger a reauthorization.
          type: boolean
        fields:
          description: An array of fields to render to the user.
          items:
            $ref: '#/components/schemas/capabilities-list-response-external-service-connection-field'
          type: array
        keyring_type:
          $ref: '#/components/schemas/keyring-type'
      required:
      - can_create
      - can_reauthorize
      - keyring_type
      title: capabilities-list-response-external-service-connection
      type: object
    capabilities-list-response-external-service-connection-field:
      properties:
        name:
          description: |
            Is a property name that will be used to store the data in JSON
          type: string
        required:
          description: |
            If true, the user will not be able to create a connection until the
            user has provided data inside this input.
          type: boolean
      required:
      - name
      - required
      title: capabilities-list-response-external-service-connection-field
      type: object
    capability:
      allOf:
      - $ref: '#/components/schemas/part-base'
      - properties:
          fulfilled_by:
            description: IDs of the runnables that fulfill this capability.
            items:
              $ref: '#/components/schemas/part-summary'
            type: array
          part_of_part:
            $ref: '#/components/schemas/part-summary'
          pm_owner:
            $ref: '#/components/schemas/user-summary'
        type: object
      title: capability
    capability-summary:
      allOf:
      - $ref: '#/components/schemas/part-base-summary'
      title: capability-summary
    chat-complete-request:
      description: The request to complete a chat.
      properties:
        max_tokens:
          description: The maximum number of tokens to be returned in response.
          format: int32
          type: integer
        messages:
          description: List of chat messages.
          items:
            $ref: '#/components/schemas/chat-complete-request-message'
          minItems: 1
          type: array
        temperature:
          description: |
            sampling temperature to use, should between 0 and 2. Higher values
            make the output more random, while lower values make it more
            deterministic.
          format: float
          type: number
      required:
      - messages
      title: chat-complete-request
      type: object
    chat-complete-request-message:
      properties:
        content:
          description: Text content of the message.
          type: string
        role:
          description: Role of the author.
          type: string
      required:
      - content
      - role
      title: chat-complete-request-message
      type: object
    chat-complete-response:
      description: The response for the generated completion.
      properties:
        completion:
          description: The completion generated for the chat.
          type: string
      title: chat-complete-response
      type: object
      x-go-name: ChatCompleteResponseBody
    client-frame:
      properties:
        recent_frame:
          $ref: '#/components/schemas/recent-frame'
        view_frame:
          $ref: '#/components/schemas/view-frame'
      required:
      - recent_frame
      - view_frame
      title: client-frame
      type: object
    code-version-summary:
      description: Code version details.
      properties:
        branch:
          description: |
            Branch name or URL to the branch the version is cut from.
          type: string
        code_version:
          $ref: '#/components/schemas/atom-summary'
        commit_author:
          description: ID of the author of the commit.
          type: string
        commit_date:
          description: Timestamp when the commit was committed.
          format: date-time
          type: string
        commit_sha:
          description: Commit the version is cut from.
          type: string
      title: code-version-summary
      type: object
    command:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          action:
            $ref: '#/components/schemas/command-action'
          description:
            description: Description of the command.
            type: string
          name:
            description: Name of the command.
            type: string
          namespace:
            description: Namespace of the command.
            type: string
          status:
            $ref: '#/components/schemas/command-status'
          surfaces:
            description: Surfaces where this command can be invoked.
            items:
              $ref: '#/components/schemas/command-surface'
            type: array
          usage_hint:
            description: |
              A user friendly description of the parameters which can be passed
              to the command.
            type: string
        type: object
      title: command
    command-action:
      description: Action defines some logic to run.
      properties:
        code:
          description: |
            The raw code to execute, defined in the language specified by
            executor.
          type: string
        executor_config:
          description: Executor specific config.
          type: object
        executor_type:
          $ref: '#/components/schemas/command-action-executor-type'
        snap_in_function_id:
          $ref: '#/components/schemas/atom-summary'
      title: command-action
      type: object
    command-action-executor-type:
      description: Specifies how the action is defined.
      enum:
      - rego
      type: string
    command-create-request:
      properties:
        action:
          $ref: '#/components/schemas/create-command-action'
        description:
          description: Description of the command
          type: string
        name:
          description: Name of the command
          type: string
        namespace:
          description: Namespace of the command
          type: string
        status:
          $ref: '#/components/schemas/command-status'
        surfaces:
          description: Surfaces where this command can be invoked
          items:
            $ref: '#/components/schemas/create-command-surface'
          type: array
        usage_hint:
          description: |
            A user friendly description of the parameters which can be passed
            to the command
          type: string
      required:
      - name
      - namespace
      title: command-create-request
      type: object
    command-create-response:
      properties:
        command:
          $ref: '#/components/schemas/command'
      required:
      - command
      title: command-create-response
      type: object
      x-go-name: CommandCreateResponseBody
    command-delete-request:
      properties:
        id:
          description: The command's ID.
          type: string
      required:
      - id
      title: command-delete-request
      type: object
    command-execute-request:
      properties:
        id:
          description: The command's ID.
          type: string
        invocation_source:
          description: Command invocation source like work, part, search, etc.
          type: string
        parameters:
          description: Input parameters of the command.
          type: string
        source_object_id:
          description: |
            ID of the object where command is invoked (work/part/conversation).
          type: string
      required:
      - id
      - invocation_source
      title: command-execute-request
      type: object
    command-execute-response:
      properties:
        request_id:
          description: The unique id corresponding to command execution.
          type: string
      required:
      - request_id
      title: command-execute-response
      type: object
      x-go-name: CommandExecuteResponseBody
    command-get-request:
      properties:
        id:
          description: The command's ID.
          type: string
      required:
      - id
      title: command-get-request
      type: object
    command-get-response:
      properties:
        command:
          $ref: '#/components/schemas/command'
      required:
      - command
      title: command-get-response
      type: object
      x-go-name: CommandGetResponseBody
    command-status:
      description: Status of the command.
      enum:
      - disabled
      - enabled
      type: string
    command-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: Name of the command.
            type: string
        type: object
      title: command-summary
    command-surface:
      description: |
        Metadata defining which surfaces can this command be executed on.
      properties:
        object_types:
          description: Objects types on which a command can be invoked.
          items:
            $ref: '#/components/schemas/command-surface-object-types'
          type: array
        surface:
          $ref: '#/components/schemas/command-surface-surface'
      title: command-surface
      type: object
    command-surface-object-types:
      description: Objects types on which a command can be invoked.
      enum:
      - conversation
      - flow
      - issue
      - part
      - rev_org
      - rev_user
      - snap_in
      - ticket
      type: string
    command-surface-surface:
      description: |
        Surfaces from where this command can be invoked. In future this will be
        extended to add more places like list views and events from where a
        command can be invoked.
      enum:
      - discussions
      type: string
    command-update-request:
      properties:
        description:
          description: Description of the command.
          type: string
        id:
          description: The command's ID.
          type: string
        status:
          $ref: '#/components/schemas/command-status'
      required:
      - id
      title: command-update-request
      type: object
    command-update-response:
      properties:
        command:
          $ref: '#/components/schemas/command'
      required:
      - command
      title: command-update-response
      type: object
      x-go-name: CommandUpdateResponseBody
    commands-list-request:
      properties:
        cursor:
          description: The cursor to begin iteration from.
          type: string
        sort_by:
          description: |
            List of fields to sort the commands items by and how to sort them.
          items:
            type: string
          type: array
        source_object_id:
          description: |
            ID of the object where command is invoked (work/part/conversation).
          type: string
      title: commands-list-request
      type: object
    commands-list-response:
      properties:
        commands:
          description: List of commands.
          items:
            $ref: '#/components/schemas/command'
          type: array
        cursor:
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
      required:
      - commands
      title: commands-list-response
      type: object
      x-go-name: CommandsListResponseBody
    comment-activity:
      description: A comment activity.
      properties:
        comment:
          $ref: '#/components/schemas/timeline-comment'
      title: comment-activity
      type: object
    common-engagement-summary:
      description: Common engagement summary object.
      properties:
        engagement_subtype:
          $ref: '#/components/schemas/common-engagement-summary-engagement-subtype'
      title: common-engagement-summary
      type: object
    common-engagement-summary-engagement-subtype:
      description: Subtype of the engagement.
      enum:
      - marketing
      - sales
      - support
      type: string
    compensation:
      description: |
        Describes the compensation to be provided in case of SLA breach. It is
        not 'self-executing', it is the responsibility of the dev_org to
        actually provide the promised credit, resource or other payment.
      properties:
        amount:
          description: The amount to be provided.
          format: int32
          type: integer
        unit:
          description: |
            The 'unit' in which it is 'paid'. It can be a real currency, but it
            needs not to be, can be any type of credit, quota, discount etc.
          type: string
      title: compensation
      type: object
    component:
      allOf:
      - $ref: '#/components/schemas/part-base'
      - properties:
          development_owner:
            $ref: '#/components/schemas/user-summary'
          pm_owner:
            $ref: '#/components/schemas/user-summary'
          qa_owner:
            $ref: '#/components/schemas/user-summary'
        type: object
      title: component
    component-summary:
      allOf:
      - $ref: '#/components/schemas/part-base-summary'
      title: component-summary
    composite-schema:
      description: The schema of a composite type.
      properties:
        description:
          description: Description of this composite type.
          type: string
        fields:
          description: List of all fields in this schema.
          items:
            $ref: '#/components/schemas/schema-field-descriptor'
          type: array
        name:
          description: Name of this composite type.
          type: string
      required:
      - fields
      title: composite-schema
      type: object
    composite-schema-private:
      description: The schema of a composite type.
      properties:
        description:
          description: Description of this composite type.
          type: string
        fields:
          description: List of all fields in this schema.
          items:
            $ref: '#/components/schemas/field-descriptor'
          type: array
        name:
          description: Name of this composite type.
          type: string
      required:
      - fields
      title: composite-schema-private
      type: object
    compound-filter:
      properties:
        filters:
          description: |
            List of filters to combine with the specified compound filter.
          items:
            $ref: '#/components/schemas/dataset-filter'
          type: array
      required:
      - filters
      title: compound-filter
      type: object
    condition:
      description: Condition.
      properties:
        key:
          description: Key used to fetch the object value.
          type: string
        operator:
          $ref: '#/components/schemas/condition-operator'
        vals:
          description: Values valid for the key.
          items:
            type: string
          type: array
      required:
      - vals
      title: condition
      type: object
    condition-operator:
      description: The operator used to compare the object vals.
      enum:
      - eq
      - in
      - not_eq
      - not_in
      type: string
    condition-v1:
      description: Condition.
      properties:
        key:
          description: Key used to fetch the object value.
          type: string
        operator:
          $ref: '#/components/schemas/condition-v1-operator'
        vals:
          description: Values valid for the key.
          items:
            type: string
          type: array
      required:
      - vals
      title: condition-v1
      type: object
    condition-v1-operator:
      description: The operator used to compare the object vals.
      enum:
      - eq
      - in
      - not_eq
      - not_in
      type: string
    conditional-role-v1:
      description: Conditional role.
      properties:
        access_level:
          $ref: '#/components/schemas/access-level'
        conditions:
          description: Conditions definition which must be met for role.
          items:
            $ref: '#/components/schemas/condition-v1'
          type: array
        role_id:
          $ref: '#/components/schemas/role-v1-don'
      required:
      - conditions
      title: conditional-role-v1
      type: object
    configuration:
      description: |
        Settings related to payment, proration, etc. Configurations may or may
        not be defined by a DevO. 1. If DevO defines configurations then same
        configurations are copied to RevO also to sub pack (for now, later RevO
        can also set) 2. If DevO doesn't set anything then these configurations
        would be set to default by application for which they were being
        defined (for eg. if DevO doesn't set payment method for it's RevOs then
        stripe would set it to 'charge_automatically' by default).
      properties:
        collection_method:
          $ref: '#/components/schemas/configuration-collection-method'
        days_until_due:
          description: |
            Number of days a customer has to pay invoices generated by this
            subscription. If collection method is set to send_invoice then this
            field is mandatory.
          format: int32
          type: integer
        invoice_now_on_cancel_service_plan:
          description: |
            Whether to generate invoice immediately if the service plan is
            cancelled. Defaults to false.
          type: boolean
        pending_update:
          description: |
            If pending update is allowed or not, this is for those cases where
            an additional step of authentication or manual approval is required
            for the payment. Defaults to false. If this is true, then Proration
            behavior should be always_invoice, and collection method should be
            charge_automatically.
          type: boolean
        prorate_on_cancel_service_plan:
          description: |
            Whether to prorate if the service plan is cancelled. Defaults to
            false.
          type: boolean
        proration_behavior:
          $ref: '#/components/schemas/configuration-proration-behavior'
      title: configuration
      type: object
    configuration-collection-method:
      description: |
        Charge collection strategy for the service plan. Defaults to
        charge_automatically.
      enum:
      - charge_automatically
      - send_invoice
      type: string
    configuration-proration-behavior:
      description: |
        Determines how to handle prorations resulting from the billing_date. If
        no value is passed, the default is create_prorations.
      enum:
      - always_invoice
      - create_prorations
      - none
      type: string
    contact-details:
      description: Contact Details of the customer.
      properties:
        address:
          $ref: '#/components/schemas/address'
        name:
          description: The contact's name.
          type: string
        phone:
          description: The contact's phone.
          type: string
      title: contact-details
      type: object
    content:
      description: Content format and text for the news.
      properties:
        format:
          description: Format of the content.
          type: string
        text:
          description: The content of the news.
          type: string
      required:
      - format
      - text
      title: content
      type: object
    conversation:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          applies_to_parts:
            description: Details of the parts relevant to the conversation.
            items:
              $ref: '#/components/schemas/part-summary'
            type: array
          broadcast_channels:
            description: Active channels for the conversation.
            items:
              type: string
            type: array
          description:
            description: Description of the conversation object.
            type: string
          first_response_time:
            description: Timestamp to track the first response from Dev.
            format: date-time
            type: string
          group:
            $ref: '#/components/schemas/group-summary'
          last_message_timestamp:
            description: Timestamp of the last message in the conversation.
            format: date-time
            type: string
          links:
            description: Links associated with the object.
            items:
              $ref: '#/components/schemas/archetype-link-summary'
            type: array
          members:
            description: The users in the conversation.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          messages:
            description: The latest messages on the conversation.
            items:
              $ref: '#/components/schemas/timeline-entry'
            type: array
          owned_by:
            description: Owner IDs for the conversation.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          priority:
            $ref: '#/components/schemas/conversation-priority'
          rev_orgs:
            description: Globally unique IDs of participating orgs.
            items:
              $ref: '#/components/schemas/org-summary'
            type: array
          sla:
            $ref: '#/components/schemas/sla-summary'
          sla_summary:
            $ref: '#/components/schemas/archetype-sla-summary'
          source_channel:
            description: Source channel for the conversation.
            type: string
          stage:
            $ref: '#/components/schemas/stage'
          started_by:
            $ref: '#/components/schemas/user-summary'
          state:
            description: State of the object based upon the stage.
            type: string
          status:
            description: Status of the conversation.
            type: string
          tags:
            description: Tags associated with the object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
          title:
            description: Title of the conversation object.
            type: string
        required:
        - members
        type: object
      title: conversation
    conversation-assist-recommendation-article:
      allOf:
      - $ref: '#/components/schemas/conversation-assist-recommendation-base'
      - properties:
          article:
            $ref: '#/components/schemas/article-summary'
          artifact:
            $ref: '#/components/schemas/artifact-summary'
          text:
            description: Suggested text from the article.
            type: string
        required:
        - article
        - artifact
        type: object
      description: An article recommendation item.
      title: conversation-assist-recommendation-article
    conversation-assist-recommendation-base:
      description: Base for conversation assist recommendation item.
      properties:
        confidence:
          description: Confidence score of the recommendation.
          format: float
          type: number
      required:
      - confidence
      title: conversation-assist-recommendation-base
      type: object
    conversation-assist-recommendation-conversation:
      allOf:
      - $ref: '#/components/schemas/conversation-assist-recommendation-base'
      - properties:
          conversation:
            $ref: '#/components/schemas/conversation-summary'
        required:
        - conversation
        type: object
      description: A conversation recommendation item.
      title: conversation-assist-recommendation-conversation
    conversation-assist-recommendation-ticket:
      allOf:
      - $ref: '#/components/schemas/conversation-assist-recommendation-base'
      - properties:
          ticket:
            $ref: '#/components/schemas/work-summary'
        required:
        - ticket
        type: object
      description: A ticket recommendation item.
      title: conversation-assist-recommendation-ticket
    conversation-assist-request:
      description: Conversations Assist request.
      properties:
        id:
          description: |
            ID of the conversation for which assistance is requested.
          type: string
        requested_objects:
          description: List of requested objects.
          items:
            $ref: '#/components/schemas/conversation-assist-requested-object'
          type: array
      required:
      - id
      - requested_objects
      title: conversation-assist-request
      type: object
    conversation-assist-requested-object:
      description: Object for which suggestions are requested.
      enum:
      - article
      - conversation
      - ticket
      type: string
    conversation-assist-response:
      description: Conversations Assist response.
      properties:
        articles:
          description: List of recommended articles.
          items:
            $ref: '#/components/schemas/conversation-assist-recommendation-article'
          type: array
        conversations:
          description: List of recommended conversations.
          items:
            $ref: '#/components/schemas/conversation-assist-recommendation-conversation'
          type: array
        tickets:
          description: List of recommended tickets.
          items:
            $ref: '#/components/schemas/conversation-assist-recommendation-ticket'
          type: array
      title: conversation-assist-response
      type: object
      x-go-name: ConversationAssistResponseBody
    conversation-created-notification:
      allOf:
      - $ref: '#/components/schemas/notification-base'
      - properties:
          conversation_id:
            $ref: '#/components/schemas/conversation-summary'
        type: object
      title: conversation-created-notification
    conversation-created-notification-summary:
      allOf:
      - $ref: '#/components/schemas/notification-base-summary'
      title: conversation-created-notification-summary
    conversation-inactivity-reminder:
      allOf:
      - $ref: '#/components/schemas/notification-base'
      - properties:
          created_at:
            description: Time of creation of the last message in conversation.
            format: date-time
            type: string
        type: object
      title: conversation-inactivity-reminder
    conversation-inactivity-reminder-summary:
      allOf:
      - $ref: '#/components/schemas/notification-base-summary'
      title: conversation-inactivity-reminder-summary
    conversation-priority:
      description: Priority of the conversation.
      enum:
      - p0
      - p1
      - p2
      type: string
    conversation-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          conversation:
            $ref: '#/components/schemas/conversation-summary'
        required:
        - conversation
        type: object
      title: conversation-search-summary
    conversation-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          title:
            description: Title of the conversation object.
            type: string
        type: object
      title: conversation-summary
    conversations-count-request:
      properties:
        applies_to_parts:
          description: |
            Filters for conversations belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        members:
          description: |
            Filters for conversations where these users are participants.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters for conversations owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        rev_org:
          description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sla_stage:
          deprecated: true
          description: |
            Filters for conversations with any of the provided SLA stages.
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        source_channels:
          description: |
            Filters for conversations with any of the provided source channels.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: |
            Filters for conversations with any of the provided states.
          items:
            type: string
          type: array
        tags:
          description: Filters for conversations with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tickets:
          description: |
            Filters for conversations with any of the provided ticket IDs.
          items:
            type: string
          type: array
      title: conversations-count-request
      type: object
    conversations-count-response:
      properties:
        count:
          description: Count of conversations matching the filter.
          format: int32
          type: integer
      required:
      - count
      title: conversations-count-response
      type: object
      x-go-name: ConversationsCountResponseBody
    conversations-create-request:
      description: The request to create a new conversation.
      properties:
        applies_to_parts:
          description: The parts that the conversation applies to.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        description:
          description: Description for the conversation.
          type: string
        group:
          description: The group that the conversation is associated with.
          type: string
        members:
          description: The users in the conversation.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        messages:
          description: Initial messages on the conversation.
          items:
            $ref: '#/components/schemas/conversations-create-request-message'
          type: array
        owned_by:
          description: The users that own the conversation.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-init'
        tag_names:
          description: The names of the tags associated with the conversation.
          items:
            type: string
          type: array
        tags:
          description: Tags associated with the conversation.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        title:
          description: The title for the conversation.
          type: string
        type:
          $ref: '#/components/schemas/conversations-create-request-type-value'
      required:
      - type
      title: conversations-create-request
      type: object
    conversations-create-request-message:
      properties:
        artifact_ids:
          deprecated: true
          description: The IDs of the artifacts to the message.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        artifacts:
          description: The IDs of the artifacts to the message.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        body:
          description: The message's body.
          type: string
      title: conversations-create-request-message
      type: object
    conversations-create-request-type-value:
      enum:
      - support
      type: string
    conversations-create-response:
      description: The response to creating a new conversation.
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
      required:
      - conversation
      title: conversations-create-response
      type: object
      x-go-name: ConversationsCreateResponseBody
    conversations-delete-request:
      description: The request to delete a conversation.
      properties:
        id:
          description: The ID of the conversation to delete.
          type: string
      required:
      - id
      title: conversations-delete-request
      type: object
    conversations-delete-response:
      description: The response for deleting a conversation.
      title: conversations-delete-response
      type: object
      x-go-name: ConversationsDeleteResponseBody
    conversations-export-request:
      properties:
        applies_to_parts:
          description: |
            Filters for conversations belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        first:
          description: |
            The number of conversation items to return. The default is '50',
            the maximum is '5000'.
          format: int32
          type: integer
        members:
          description: |
            Filters for conversations where these users are participants.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters for conversations owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        rev_org:
          description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sla_stage:
          deprecated: true
          description: |
            Filters for conversations with any of the provided SLA stages.
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        sort_by:
          description: |
            Fields to sort the conversation items by and the direction to sort
            them.
          items:
            type: string
          type: array
        source_channels:
          description: |
            Filters for conversations with any of the provided source channels.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: |
            Filters for conversations with any of the provided states.
          items:
            type: string
          type: array
        tags:
          description: Filters for conversations with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tickets:
          description: |
            Filters for conversations with any of the provided ticket IDs.
          items:
            type: string
          type: array
      title: conversations-export-request
      type: object
    conversations-export-response:
      properties:
        conversations:
          description: The resulting collection of conversation items.
          items:
            $ref: '#/components/schemas/conversation'
          type: array
      required:
      - conversations
      title: conversations-export-response
      type: object
      x-go-name: ConversationsExportResponseBody
    conversations-get-request:
      description: The request to get a conversation's information.
      properties:
        id:
          description: The requested conversation's ID.
          type: string
      required:
      - id
      title: conversations-get-request
      type: object
    conversations-get-response:
      description: The response to getting a conversation's information.
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
      required:
      - conversation
      title: conversations-get-response
      type: object
      x-go-name: ConversationsGetResponseBody
    conversations-group:
      properties:
        conversations:
          description: The group of conversations.
          items:
            $ref: '#/components/schemas/conversation'
          type: array
        key:
          description: Unique key according to which the items are grouped.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - conversations
      - key
      title: conversations-group
      type: object
    conversations-group-request:
      properties:
        applies_to_parts:
          description: |
            Filters for conversations belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        group_by:
          description: The field to group the conversations by.
          type: string
        limit:
          description: |
            The maximum number of groups to return. If not set, then the
            default is '10'.
          format: int32
          type: integer
        limit_per_group:
          description: |
            The maximum number of conversations to return for an individual
            group. The default is '50'.
          format: int32
          type: integer
        members:
          description: |
            Filters for conversations where these users are participants.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters for conversations owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        rev_org:
          description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sla_stage:
          deprecated: true
          description: |
            Filters for conversations with any of the provided SLA stages.
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        sort_by:
          description: Comma-separated fields to sort the conversations by.
          items:
            type: string
          type: array
        source_channels:
          description: |
            Filters for conversations with any of the provided source channels.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: |
            Filters for conversations with any of the provided states.
          items:
            type: string
          type: array
        tags:
          description: Filters for conversations with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tickets:
          description: |
            Filters for conversations with any of the provided ticket IDs.
          items:
            type: string
          type: array
      required:
      - group_by
      title: conversations-group-request
      type: object
    conversations-group-response:
      properties:
        groups:
          description: The list of groups.
          items:
            $ref: '#/components/schemas/conversations-group'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - groups
      title: conversations-group-response
      type: object
      x-go-name: ConversationsGroupResponseBody
    conversations-list-request:
      description: |
        The request to get information about a list of conversations.
      properties:
        applies_to_parts:
          description: |
            Filters for conversations belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of conversations to return. The default is '50'.
          format: int32
          type: integer
        members:
          description: |
            Filters for conversations where these users are participants.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters for conversations owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        rev_org:
          description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sla_stage:
          deprecated: true
          description: |
            Filters for conversations with any of the provided SLA stages.
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        sort_by:
          description: |
            Fields to sort the conversations by and the direction to sort them.
          items:
            type: string
          type: array
        source_channels:
          description: |
            Filters for conversations with any of the provided source channels.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: |
            Filters for conversations with any of the provided states.
          items:
            type: string
          type: array
        tags:
          description: Filters for conversations with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tickets:
          description: |
            Filters for conversations with any of the provided ticket IDs.
          items:
            type: string
          type: array
      title: conversations-list-request
      type: object
    conversations-list-response:
      description: The response to listing the conversations.
      properties:
        conversations:
          description: The list of conversations.
          items:
            $ref: '#/components/schemas/conversation'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - conversations
      title: conversations-list-response
      type: object
      x-go-name: ConversationsListResponseBody
    conversations-update-request:
      description: The request to update a conversation.
      properties:
        applies_to_parts:
          $ref: '#/components/schemas/conversations-update-request-applies-to-parts'
        description:
          description: The updated description for the conversation.
          type: string
        group:
          description: The group that the conversation is associated with.
          type: string
        id:
          description: The ID of the conversation to update.
          type: string
        member_ids:
          $ref: '#/components/schemas/conversations-update-request-member-ids'
        owned_by_ids:
          $ref: '#/components/schemas/conversations-update-request-owned-by-ids'
        stage:
          $ref: '#/components/schemas/stage-update'
        status:
          description: The updated status of the conversation.
          type: string
        tags:
          $ref: '#/components/schemas/conversations-update-request-tags'
        title:
          description: The updated title of the conversation.
          type: string
      required:
      - id
      title: conversations-update-request
      type: object
    conversations-update-request-applies-to-parts:
      properties:
        set:
          description: Updates the parts that the conversation applies to.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      title: conversations-update-request-applies-to-parts
      type: object
    conversations-update-request-member-ids:
      properties:
        set:
          description: Sets the member IDs to the provided user IDs.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: conversations-update-request-member-ids
      type: object
    conversations-update-request-owned-by-ids:
      properties:
        set:
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: conversations-update-request-owned-by-ids
      type: object
    conversations-update-request-tags:
      properties:
        set:
          description: Sets the tag IDs to the provided tags.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: conversations-update-request-tags
      type: object
    conversations-update-response:
      description: The response for updating a conversation.
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
      required:
      - conversation
      title: conversations-update-response
      type: object
      x-go-name: ConversationsUpdateResponseBody
    count-object-member-request:
      description: A request to count object members.
      properties:
        member_ids:
          description: |
            The ID of the users or groups that must be a member of one of the
            specified objects. If empty, then the result sums the total number
            of members for each object.
          items:
            type: string
          type: array
        object_ids:
          description: |
            The ID of the objects to count the members for. If empty, then the
            result sums the total number of objects that each member is a part
            of.
          items:
            type: string
          type: array
      title: count-object-member-request
      type: object
    count-object-member-response:
      properties:
        count:
          description: |
            Count of object members satisfying the request parameters.
          format: int32
          type: integer
      required:
      - count
      title: count-object-member-response
      type: object
      x-go-name: CountObjectMemberResponseBody
    create-command-action:
      properties:
        code:
          description: |
            The raw code to execute, defined in the language specified by
            executor
          type: string
        executor_config:
          description: Executor specific config
          type: object
        executor_type:
          $ref: '#/components/schemas/command-action-executor-type'
        snap_in_function_id:
          description: |
            Function containing logic for the command. If function ID is
            specified the executor config is ignored and command is executed by
            functions.
          type: string
      title: create-command-action
      type: object
    create-command-surface:
      properties:
        object_types:
          description: Objects types on which a command can be invoked
          items:
            $ref: '#/components/schemas/command-surface-object-types'
          type: array
        surface:
          $ref: '#/components/schemas/command-surface-surface'
      required:
      - surface
      title: create-command-surface
      type: object
    create-discovery-profile-request:
      properties:
        extractors:
          $ref: '#/components/schemas/extractors'
        mergers:
          $ref: '#/components/schemas/dev-rev-partitioner-merger'
        other_data_source_dev_org:
          description: Discovery other data source Dev org id.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
        partitioners:
          $ref: '#/components/schemas/dev-rev-partitioner-merger'
        profile_name:
          description: Discovery Profile name.
          type: string
      required:
      - mergers
      - partitioners
      - profile_name
      title: create-discovery-profile-request
      type: object
    create-discovery-profile-response:
      properties:
        discovery_profile:
          $ref: '#/components/schemas/discovery-profile'
      required:
      - discovery_profile
      title: create-discovery-profile-response
      type: object
      x-go-name: CreateDiscoveryProfileResponseBody
    create-discovery-settings-request:
      properties:
        data_collection_app_settings:
          $ref: '#/components/schemas/data-collection-app-settings'
        discovery_app_settings:
          $ref: '#/components/schemas/discovery-app-settings'
        discovery_profile_id:
          description: Discovery profile id associated with devorg.
          type: string
        github_repos:
          description: Discovery GitHub repositories settings for devorg.
          items:
            $ref: '#/components/schemas/discovery-github-repos-settings'
          type: array
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      title: create-discovery-settings-request
      type: object
    create-discovery-settings-response:
      properties:
        discovery_settings:
          $ref: '#/components/schemas/discovery-settings'
      required:
      - discovery_settings
      title: create-discovery-settings-response
      type: object
      x-go-name: CreateDiscoverySettingsResponseBody
    create-event-source-setup-instructions:
      properties:
        content:
          description: Instructions content
          type: string
        format:
          $ref: '#/components/schemas/instructions-format'
      required:
      - format
      title: create-event-source-setup-instructions
      type: object
    create-function-definition:
      properties:
        config_policy:
          $ref: '#/components/schemas/create-policy-instance'
        function_name:
          description: Name of the function.
          type: string
        namespace:
          description: Namespace of the function
          type: string
      required:
      - namespace
      title: create-function-definition
      type: object
    create-keyring:
      properties:
        categories:
          description: Categories associated with the keyring
          items:
            type: string
          type: array
        description:
          description: Description of the keyring.
          type: string
        external_org_id:
          description: External organization ID of the keyring.
          type: string
        key:
          description: Secret key.
          type: string
        name:
          description: Name of the keyring.
          type: string
        scope:
          $ref: '#/components/schemas/keyring-scope'
        type:
          $ref: '#/components/schemas/keyring-type'
      required:
      - name
      - type
      title: create-keyring
      type: object
    create-microflow-definition:
      properties:
        categorization_fields_json:
          description: |
            JSON defining how microflow is categorized for object type
          type: string
        defined_on_object_type:
          $ref: '#/components/schemas/microflow-definition-defined-on-object-type'
        description:
          description: Description of the microflow
          type: string
        name:
          description: Name of the microflow
          type: string
        publish_status:
          $ref: '#/components/schemas/microflow-definition-publish-status'
        state_field_path:
          description: Path of the state field (in dotted notation)
          type: string
        states:
          description: |
            Possible states of the object on which microflow is defined
          items:
            $ref: '#/components/schemas/create-microflow-target-object-state'
          type: array
        transitions:
          description: Possible transitions in the microflow
          items:
            $ref: '#/components/schemas/create-microflow-target-object-transition'
          type: array
      required:
      - categorization_fields_json
      - defined_on_object_type
      - state_field_path
      title: create-microflow-definition
      type: object
    create-microflow-target-object-state:
      properties:
        description:
          description: Description of the state
          type: string
        name:
          description: Name of the state
          type: string
      required:
      - name
      title: create-microflow-target-object-state
      type: object
    create-microflow-target-object-transition:
      properties:
        allowed_triggers:
          description: Set of triggers which could execute this transition
          items:
            $ref: '#/components/schemas/create-microflow-trigger-definition'
          type: array
        conditions:
          $ref: '#/components/schemas/create-policy-instance'
        description:
          description: Description of the transition
          type: string
        from_states:
          description: Set of source states for the transition
          items:
            type: string
          type: array
        global:
          description: Whether this is a global transition
          type: boolean
        initial:
          description: Whether this is an initial transition
          type: boolean
        is_ui_action:
          description: Whether a button is displayed for the transition
          type: boolean
        name:
          description: The name of the transition, unique within a microflow
          type: string
        post_function_definitions_ids:
          description: Functions executed asynchronously, on transition success
          items:
            type: string
          type: array
        pre_function_definitions_ids:
          description: Functions executed synchronously with state change
          items:
            type: string
          type: array
        to_state:
          description: The destination state of the transition
          type: string
        validations:
          $ref: '#/components/schemas/create-policy-instance'
      required:
      - name
      title: create-microflow-target-object-transition
      type: object
    create-microflow-trigger-definition:
      properties:
        config:
          description: Configuration defining applicable events from the source
          type: string
        event_source_id:
          description: ID of the event source being subscribed
          type: string
      title: create-microflow-trigger-definition
      type: object
    create-object-member-request:
      description: A request to create a new object member.
      properties:
        member_id:
          description: ID of the user or group.
          type: string
        member_identifier:
          enum:
          - member_id
          - rev_user_external_reference
          type: string
        object_id:
          description: |
            Globally unique DevRev Object Name (DON) for the object where the
            member is being added.
          type: string
        rev_user_external_reference:
          $ref: '#/components/schemas/rev-user-external-reference'
        valid_from_date:
          description: Timestamp when this membership is valid.
          format: date-time
          type: string
        valid_to_date:
          description: Timestamp when this membership expires.
          format: date-time
          type: string
      required:
      - object_id
      title: create-object-member-request
      type: object
    create-object-member-response:
      properties:
        object_member:
          $ref: '#/components/schemas/object-member'
      required:
      - object_member
      title: create-object-member-response
      type: object
      x-go-name: CreateObjectMemberResponseBody
    create-one-time-line-items:
      properties:
        pricing_id:
          description: Pricing at which SKU is to be added in the service plan.
          type: string
        quantity:
          description: Quantity of SKU to be added in the service plan.
          format: int32
          type: integer
        sku_id:
          description: SKU to be added in the service plan.
          type: string
      required:
      - pricing_id
      - sku_id
      title: create-one-time-line-items
      type: object
    create-org-schedule-fragment-summary:
      properties:
        id:
          description: organization schedule fragment ID
          type: string
      required:
      - id
      title: create-org-schedule-fragment-summary
      type: object
    create-org-schedule-interval:
      properties:
        from:
          $ref: '#/components/schemas/timestamp'
        is_holiday:
          description: |
            If true, no organization schedule is looked up for these days and
            they are marked as holidays
          type: boolean
        name:
          description: |
            The name of the period, typically describing for example the event
            or holiday it represents. Used to connect it to a specific weekly
            organization schedule.
          type: string
        to:
          $ref: '#/components/schemas/timestamp'
      required:
      - from
      - name
      title: create-org-schedule-interval
      type: object
    create-phone-number:
      description: Create object for phone_number.
      properties:
        e164_number:
          description: The phone number in e164 format.
          type: string
        extension:
          description: An optional extension.
          type: string
      required:
      - e164_number
      title: create-phone-number
      type: object
    create-policy-instance:
      properties:
        name:
          description: Name of the policy
          type: string
        parameters:
          description: JSON string storing values for each templated variable.
          type: string
        policy:
          description: Rego policy string
          type: string
        system_parseable:
          description: Whether the policy is system generated
          type: boolean
      title: create-policy-instance
      type: object
    create-postal-address:
      description: Create object for postal_address.
      properties:
        country:
          description: Country name component.
          type: string
        formatted:
          description: |
            Full mailing address, formatted for display or use on a mailing
            label.
          type: string
        locality:
          description: Town, city.
          type: string
        postal_code:
          description: Zip code of the address.
          type: string
        region:
          description: State, province, prefecture, or region component.
          type: string
        street_address:
          description: Full street address component.
          type: string
      title: create-postal-address
      type: object
    create-recurring-line-items:
      properties:
        pricing_id:
          description: Pricing at which SKU is to be added in the service plan.
          type: string
        quantity:
          description: Quantity of SKU to be added in the service plan.
          format: int32
          type: integer
        sku_id:
          description: SKU to be added in the service plan.
          type: string
      required:
      - pricing_id
      - sku_id
      title: create-recurring-line-items
      type: object
    create-view-ui-metadata:
      description: Create view UI hint overrides.
      properties:
        is_hidden:
          description: Whether field is hidden in UI.
          type: boolean
      title: create-view-ui-metadata
      type: object
    create-weekly-org-schedule:
      properties:
        intervals:
          description: The 'on' intervals of the week.
          items:
            $ref: '#/components/schemas/create-weekly-org-schedule-interval'
          type: array
        period_name:
          description: |
            The name of the period during which the organization schedule
            applies.
          type: string
      required:
      - intervals
      - period_name
      title: create-weekly-org-schedule
      type: object
    create-weekly-org-schedule-interval:
      properties:
        from:
          description: |
            Time in minutes of the week when the interval starts. 0 is Sunday
            midnight
          format: int64
          type: integer
        to:
          description: |
            Time in minutes of the week when the interval ends (must be larger
            than 'from'). 0 is Sunday midnight
          format: int64
          type: integer
      required:
      - from
      - to
      title: create-weekly-org-schedule-interval
      type: object
    credit:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          amount_approved:
            description: |
              Amount that was approved for the credit request. Amount approved is
              a Dev org construct, only Dev org can decide how much credit amount
              needs to be approved when a Rev Org has made a credit request. Or
              how much amount they want to disburse when they are offering
              credits to their Rev Org (customer).
            format: double
            type: number
          amount_expired:
            description: |
              Amount expired out of the credits offered. Each Credit
              offered/requested has a expiry date associated with it. If the
              credits are unused until the expiry hits, then the amount unused
              (amount_remaining), gets expired and is not usable after the expiry
              date. For instance, if 200 credits were requested by Rev from their
              Dev Org. And their Dev decided to approve half (100 credits) of the
              amount requested by the Rev with a expiry of one month. And during
              this one month period Rev was able to use 70 credits only. Then
              their amount remaining (left credits) would change to 0 and the
              amount expired would be 30 (as 30 credits were un used when the
              expiry hit). The amount related fields have following values when
              expiry time hits amount_requested:200, amount_approved:100,
              amount_used:70, amount_remaining:0, amount=expired:30.
            format: double
            type: number
          amount_remaining:
            description: Amount remaining out of the credits offered.
            format: double
            type: number
          amount_requested:
            description: Amount requested/disbursed in the credit request.
            format: double
            type: number
          amount_used:
            description: |
              Amount that is/was used by the Rev Org (customer) out of the
              credits offered.
            format: double
            type: number
          description:
            description: Reason for requesting/disbursing the Credit.
            type: string
          expiry_time:
            description: |
              Provides date on which the offered credit amount expires. When the
              expiry time is hit, then the amount unused (amount_remaining)
              becomes zero and is considered as amount_expired. Expired credit
              amount cannot be used.
            format: date-time
            type: string
          is_expired:
            description: Indicates whether the credit is expired.
            type: boolean
          name:
            description: |
              Name of the credit. (For credits being offered via coupons, credit
              name would be set depending on coupons name/description to help
              user in source tracking.).
            type: string
          remark:
            description: |
              Captures the remark given by dev admin for a rev requested credit,
              while approving, partially approving or rejecting the credit
              request.
            type: string
          rev_org:
            $ref: '#/components/schemas/org-summary'
          status:
            $ref: '#/components/schemas/credit-status'
          stripe_customer_balance_transaction_id:
            description: |
              Stripe customer balance transaction id corresponding to the credit
              request.
            type: string
          type:
            $ref: '#/components/schemas/credit-type'
          usage_details:
            description: |
              Detailed information on the credit utilization. It's a kind of
              statement, corresponding to a credit object. It contains an array
              of following [reason_for_usage, used_amount, time_of_usage]
              regarding credit usage for a given credit object.
            items:
              $ref: '#/components/schemas/credit-usage-details'
            type: array
        required:
        - amount_approved
        - amount_expired
        - amount_requested
        - expiry_time
        - name
        - status
        - type
        type: object
      title: credit
    credit-coupon:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          coupon_code:
            description: |
              User shareable code of the coupon. To apply coupon this code needs
              to be entered.
            type: string
          credit_amount:
            description: Total credits to be awarded on redemption of the coupon.
            format: int32
            type: integer
          credit_expiry_duration:
            description: |
              Number of days after which credits awarded using this coupon would
              expire.
            format: int32
            type: integer
          credit_expiry_method:
            $ref: '#/components/schemas/credit-coupon-credit-expiry-method'
          credit_expiry_time:
            description: |
              Timestamp when credits awarded using this coupon would expire.
            format: date-time
            type: string
          expiry_time:
            description: The timestamp until when the current coupon is valid.
            format: date-time
            type: string
          rules:
            $ref: '#/components/schemas/credit-coupon-rules'
        required:
        - coupon_code
        - credit_amount
        - expiry_time
        type: object
      title: credit-coupon
    credit-coupon-credit-expiry-method:
      description: |
        If both credit expiry time and credit expiry duration are set, then the
        max of both will be taken at the time of applying this coupon, if
        credit expiry method is set to 'latest'. While min of both would be
        taken in case of 'earliest' credit expiry method.
      enum:
      - earliest
      - latest
      type: string
    credit-coupon-rules:
      description: |
        Rules to be applied for validating the coupon. If no rules are set then
        coupon can be redeemed by anyone on any sku (Default is yes).
      properties:
        emails:
          description: Email of RevUs which can redeem this coupon.
          items:
            type: string
          type: array
        revs:
          description: RevOs which can redeem this coupon.
          items:
            $ref: '#/components/schemas/org-summary'
          type: array
        skus:
          description: SKUs for which this coupon can be redeemed.
          items:
            $ref: '#/components/schemas/sku-summary'
          type: array
      title: credit-coupon-rules
      type: object
    credit-coupon-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: credit-coupon-summary
    credit-coupons-apply-request:
      properties:
        coupon_code:
          description: The coupon's code.
          type: string
        email:
          description: Email of Rev User which is trying redeem coupon.
          type: string
        rev_org:
          description: Rev Org which is trying to redeem coupon.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        sku:
          description: Sku for which the coupon is being tried to be redeemed.
          type: string
      required:
      - coupon_code
      title: credit-coupons-apply-request
      type: object
    credit-coupons-apply-response:
      properties:
        credit:
          $ref: '#/components/schemas/credit'
      title: credit-coupons-apply-response
      type: object
      x-go-name: CreditCouponsApplyResponseBody
    credit-coupons-create-request:
      properties:
        coupon_code:
          description: |
            User-shareable code of the coupon. To apply coupon this code needs
            to be entered.
          type: string
        credit_amount:
          description: Total credits to be awarded on redemption of the coupon.
          format: int64
          type: integer
        credit_expiry_duration:
          description: |
            Number of days after which credits awarded using this coupon would
            expire.
          format: int64
          type: integer
        credit_expiry_method:
          $ref: '#/components/schemas/credit-coupon-credit-expiry-method'
        credit_expiry_time:
          description: |
            Timestamp when credits awarded using this coupon would expire.
          format: date-time
          type: string
        expiry_time:
          description: The timestamp till when the current coupon is valid.
          format: date-time
          type: string
        rules:
          $ref: '#/components/schemas/credit-coupons-create-request-rules'
      required:
      - coupon_code
      - credit_amount
      title: credit-coupons-create-request
      type: object
    credit-coupons-create-request-rules:
      properties:
        emails:
          description: Emails of Rev users which can redeem this coupon.
          items:
            type: string
          type: array
        rev_orgs:
          description: Rev orgs which can redeem this coupon.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        skus:
          description: SKUs for which this coupon can be redeemed.
          items:
            type: string
          type: array
      title: credit-coupons-create-request-rules
      type: object
    credit-coupons-create-response:
      properties:
        credit_coupon:
          $ref: '#/components/schemas/credit-coupon'
      required:
      - credit_coupon
      title: credit-coupons-create-response
      type: object
      x-go-name: CreditCouponsCreateResponseBody
    credit-coupons-delete-request:
      properties:
        coupon_code:
          description: The coupon's code.
          type: string
      required:
      - coupon_code
      title: credit-coupons-delete-request
      type: object
    credit-coupons-get-request:
      properties:
        coupon_code:
          description: The coupon's code.
          type: string
      required:
      - coupon_code
      title: credit-coupons-get-request
      type: object
    credit-coupons-get-response:
      properties:
        credit_coupon:
          $ref: '#/components/schemas/credit-coupon'
      required:
      - credit_coupon
      title: credit-coupons-get-response
      type: object
      x-go-name: CreditCouponsGetResponseBody
    credit-coupons-update-request:
      properties:
        coupon_code:
          description: The coupon's code.
          type: string
        credit_amount:
          description: Total credits to be awarded on redemption of the coupon.
          format: int64
          type: integer
        credit_expiry_duration:
          description: |
            Number of days after which credits awarded using this coupon would
            expire.
          format: int64
          type: integer
        credit_expiry_method:
          $ref: '#/components/schemas/credit-coupon-credit-expiry-method'
        credit_expiry_time:
          description: |
            Timestamp when credits awarded using this coupon would expire.
          format: date-time
          type: string
        expiry_time:
          description: The timestamp until when the current coupon is valid.
          format: date-time
          type: string
        rules:
          $ref: '#/components/schemas/credit-coupons-update-request-rules'
      required:
      - coupon_code
      title: credit-coupons-update-request
      type: object
    credit-coupons-update-request-rules:
      properties:
        emails:
          $ref: '#/components/schemas/credit-coupons-update-request-rules-emails'
        rev_orgs:
          $ref: '#/components/schemas/credit-coupons-update-request-rules-rev-orgs'
        skus:
          $ref: '#/components/schemas/credit-coupons-update-request-rules-skus'
      title: credit-coupons-update-request-rules
      type: object
    credit-coupons-update-request-rules-emails:
      properties:
        add:
          description: |
            Rev User's emails to be added to the rules, these will be able to
            redeem the coupon code once the update succeeds.
          items:
            type: string
          type: array
        remove:
          description: |
            Rev User's emails to be removed from the rules, these will not be
            able to redeem the coupon code once the update succeeds.
          items:
            type: string
          type: array
      title: credit-coupons-update-request-rules-emails
      type: object
    credit-coupons-update-request-rules-rev-orgs:
      properties:
        add:
          description: |
            Rev Orgs to be added to the rules, these will be able to redeem the
            coupon code once the update succeeds.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        remove:
          description: |
            Rev Orgs to be removed from the rules, these will not be able to
            redeem the coupon code once the update succeeds.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      title: credit-coupons-update-request-rules-rev-orgs
      type: object
    credit-coupons-update-request-rules-skus:
      properties:
        add:
          description: |
            Skus to be added to the rules, coupon code can be applied for these
            skus once the update succeeds.
          items:
            type: string
          type: array
        remove:
          description: |
            Skus to be removed from the rules, coupon code will not be
            applicableon these skus once the update succeeds.
          items:
            type: string
          type: array
      title: credit-coupons-update-request-rules-skus
      type: object
    credit-coupons-update-response:
      properties:
        credit_coupon:
          $ref: '#/components/schemas/credit-coupon'
      required:
      - credit_coupon
      title: credit-coupons-update-response
      type: object
      x-go-name: CreditCouponsUpdateResponseBody
    credit-coupons-validate-request:
      properties:
        coupon_code:
          description: The coupon's code.
          type: string
        email:
          description: Email of Rev User which is trying redeem coupon.
          type: string
        rev_org:
          description: Rev Org which is trying to redeem coupon.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        sku:
          description: Sku for which the coupon is being tried to be redeemed.
          type: string
      required:
      - coupon_code
      title: credit-coupons-validate-request
      type: object
    credit-coupons-validate-response:
      properties:
        credit_amount:
          description: |
            If coupon is valid, number of credits points to be awarded.
          format: int64
          type: integer
      title: credit-coupons-validate-response
      type: object
      x-go-name: CreditCouponsValidateResponseBody
    credit-status:
      description: |
        Status of the credit request. A Dev is allowed to update status for the
        credit request made by their Rev. Once a credit request status is made
        as 'approved', no updates are allowed to the credit object after that.
        When a Dev disburses credits to any of it's Revs, then by default the
        credit object's status is 'approved', hence no updates are allowed.
        When a Rev requests credits from their Dev Org, the status of requested
        credit object is 'awaiting approval' (revs cannot modify the status
        field, it's a Dev's construct). A Dev can update the status of credit
        request to approved or rejected.
      enum:
      - approved
      - awaiting_approval
      - rejected
      type: string
    credit-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: credit-summary
    credit-type:
      description: |
        Indicates the source of the credit object, if it was requested by rev,
        purchased by rev, issued by the dev or redeemed via a coupon.
      enum:
      - issued
      - purchased
      - redeemed
      - requested
      type: string
    credit-usage-details:
      description: |
        Usage detail defines the detailed information on how the credit amount
        is used. For Example, credit amount $X is used on a invoice.
      properties:
        amount:
          description: Amount applied for this particular usage.
          format: double
          type: number
        transaction_time:
          description: The time when credits were used.
          format: date-time
          type: string
        usage_reason:
          $ref: '#/components/schemas/credit-usage-reason'
      required:
      - amount
      - transaction_time
      - usage_reason
      title: credit-usage-details
      type: object
    credit-usage-reason:
      description: |
        Credits are consumed by following - 1. Invoice finalized (applied to
        invoice) 2. other reasons like offset previous balance, credit note
        created, etc.
      properties:
        invoice_id:
          $ref: '#/components/schemas/invoice-summary'
        reason:
          description: |
            The consumption reason, it can include invoice_number (if credits
            were used in invoice), or other reasons such as previous balance
            offset, etc.
          type: string
      required:
      - reason
      title: credit-usage-reason
      type: object
    credits-create-request:
      properties:
        amount_requested:
          description: Requested amount for credit.
          format: double
          type: number
        description:
          description: Description of the credit.
          type: string
        expiry_time:
          description: Timestamp when the credits will expire.
          format: date-time
          type: string
        name:
          description: |
            Name of the credit. (For credits being offered via coupons, credit
            name would be set depending on coupons name/description to help
            user in source tracking.)
          type: string
        remark:
          description: |
            Comment given by dev admin for a rev requested credit, while
            approving, partially approving or rejecting the credit request.
          type: string
        rev_org_id:
          description: |
            The rev org for which credits are being created (when dev org is
            initiating the request, this is mandatory). For rev orgs, raising
            credit request themselves, this is optional.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
      required:
      - amount_requested
      - name
      title: credits-create-request
      type: object
    credits-create-response:
      properties:
        credit:
          $ref: '#/components/schemas/credit'
      required:
      - credit
      title: credits-create-response
      type: object
      x-go-name: CreditsCreateResponseBody
    credits-delete-request:
      properties:
        id:
          description: The credit object's DON.
          type: string
      required:
      - id
      title: credits-delete-request
      type: object
    credits-get-request:
      properties:
        id:
          description: The credit object's DON
          type: string
      required:
      - id
      title: credits-get-request
      type: object
    credits-get-response:
      properties:
        credit:
          $ref: '#/components/schemas/credit'
      required:
      - credit
      title: credits-get-response
      type: object
      x-go-name: CreditsGetResponseBody
    credits-list-request:
      properties:
        after_expiry_date:
          description: |
            Filter items which have expiry date after the timestamp provided.
          format: date-time
          type: string
        before_expiry_date:
          description: |
            Filter items which have expiry date before the timestamp provided.
          format: date-time
          type: string
        ids:
          description: |
            The list of credit object DONs which are to be aggregated.
          items:
            type: string
          type: array
        rev_org_ids:
          description: The list of rev org DONs which are to be aggregated.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sort_by:
          description: |
            List of fields to sort the credit objects, by and how to sort them.
            Default is to sort by created_date in descending order.
          items:
            type: string
          type: array
        statuses:
          description: The list of status values which are to be aggregated.
          items:
            $ref: '#/components/schemas/credit-status'
          type: array
        types:
          description: The list of type values which are to be aggregated.
          items:
            $ref: '#/components/schemas/credit-type'
          type: array
      title: credits-list-request
      type: object
    credits-list-response:
      properties:
        credits:
          description: The list of credit objects.
          items:
            $ref: '#/components/schemas/credit'
          type: array
      required:
      - credits
      title: credits-list-response
      type: object
      x-go-name: CreditsListResponseBody
    credits-update-request:
      properties:
        amount_approved:
          description: Approved amount for credit.
          format: double
          type: number
        amount_requested:
          description: Requested amount for credit.
          format: double
          type: number
        description:
          description: Description of the credit.
          type: string
        expiry_time:
          description: Timestamp when the credits will expire.
          format: date-time
          type: string
        id:
          description: The credit object's DON.
          type: string
        name:
          description: |
            Name of the credit. (For credits being offered via coupons, credit
            name would be set depending on coupons name/description to help
            user in source tracking.)
          type: string
        remark:
          description: |
            Comment given by dev admin for a rev requested credit, while
            approving, partially approving or rejecting the credit request.
          type: string
        status:
          $ref: '#/components/schemas/credit-status'
      required:
      - id
      title: credits-update-request
      type: object
    credits-update-response:
      properties:
        credit:
          $ref: '#/components/schemas/credit'
      required:
      - credit
      title: credits-update-response
      type: object
      x-go-name: CreditsUpdateResponseBody
    curated-vista:
      allOf:
      - $ref: '#/components/schemas/vista-base'
      - properties:
          items:
            description: Item list to store a curated list of DevRev objects.
            items:
              $ref: '#/components/schemas/atom-summary'
            type: array
        type: object
      description: Static collection of Devrev objects.
      title: curated-vista
    custom-object-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: custom-object-summary
    custom-part:
      allOf:
      - $ref: '#/components/schemas/part-base'
      title: custom-part
    custom-part-summary:
      allOf:
      - $ref: '#/components/schemas/part-base-summary'
      title: custom-part-summary
    custom-schema-fragment:
      discriminator:
        mapping:
          app_fragment: '#/components/schemas/app-fragment'
          custom_type_fragment: '#/components/schemas/custom-type-fragment'
          tenant_fragment: '#/components/schemas/tenant-fragment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/app-fragment'
      - $ref: '#/components/schemas/custom-type-fragment'
      - $ref: '#/components/schemas/tenant-fragment'
      properties:
        type:
          $ref: '#/components/schemas/custom-schema-fragment-type'
      required:
      - type
      title: custom-schema-fragment
      type: object
    custom-schema-fragment-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          deprecated:
            description: |
              Indicates if the fragment has been deprecated. Modifications to
              this field are done in-place and don't result in creation of a new
              fragment in chain.
            type: boolean
          description:
            description: Description of the custom schema fragment.
            type: string
          fields:
            description: List of all fields in this custom schema fragment.
            items:
              $ref: '#/components/schemas/schema-field-descriptor'
            type: array
          fragment_type:
            $ref: '#/components/schemas/custom-schema-fragment-fragment-type'
          leaf_type:
            description: Leaf type this fragment applies to.
            type: string
          new_fragment_ref:
            $ref: '#/components/schemas/atom-summary'
          old_fragment_ref:
            $ref: '#/components/schemas/atom-summary'
        type: object
      title: custom-schema-fragment-base
    custom-schema-fragment-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: custom-schema-fragment-base-summary
    custom-schema-fragment-fragment-type:
      description: Type of the custom schema fragment.
      enum:
      - app
      - custom_type
      - tenant
      type: string
    custom-schema-fragment-private:
      discriminator:
        mapping:
          app_fragment_private: '#/components/schemas/app-fragment-private'
          custom_type_fragment_private: '#/components/schemas/custom-type-fragment-private'
          tenant_fragment_private: '#/components/schemas/tenant-fragment-private'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/app-fragment-private'
      - $ref: '#/components/schemas/custom-type-fragment-private'
      - $ref: '#/components/schemas/tenant-fragment-private'
      properties:
        type:
          $ref: '#/components/schemas/custom-schema-fragment-private-type'
      required:
      - type
      title: custom-schema-fragment-private
      type: object
    custom-schema-fragment-private-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          deprecated:
            description: |
              Indicates if the fragment has been deprecated. Modifications to
              this field are done in-place and don't result in creation of a new
              fragment in chain.
            type: boolean
          description:
            description: Description of the custom schema fragment.
            type: string
          fields:
            description: List of all fields in this custom schema fragment.
            items:
              $ref: '#/components/schemas/field-descriptor'
            type: array
          fragment_type:
            $ref: '#/components/schemas/custom-schema-fragment-private-fragment-type'
          leaf_type:
            description: Leaf type this fragment applies to.
            type: string
          new_fragment_ref:
            $ref: '#/components/schemas/atom-summary'
          old_fragment_ref:
            $ref: '#/components/schemas/atom-summary'
        type: object
      title: custom-schema-fragment-private-base
    custom-schema-fragment-private-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: custom-schema-fragment-private-base-summary
    custom-schema-fragment-private-fragment-type:
      description: Type of the custom schema fragment.
      enum:
      - app
      - custom_type
      - tenant
      type: string
    custom-schema-fragment-private-type:
      enum:
      - app_fragment_private
      - custom_type_fragment_private
      - tenant_fragment_private
      type: string
    custom-schema-fragment-type:
      enum:
      - app_fragment
      - custom_type_fragment
      - tenant_fragment
      type: string
    custom-schema-fragments-get-request:
      properties:
        id:
          description: The ID of the custom schema fragment.
          type: string
      required:
      - id
      title: custom-schema-fragments-get-request
      type: object
    custom-schema-fragments-get-request-private:
      properties:
        id:
          description: The ID of the custom schema fragment.
          type: string
      required:
      - id
      title: custom-schema-fragments-get-request-private
      type: object
    custom-schema-fragments-get-response:
      properties:
        fragment:
          $ref: '#/components/schemas/custom-schema-fragment'
      required:
      - fragment
      title: custom-schema-fragments-get-response
      type: object
      x-go-name: CustomSchemaFragmentsGetResponseBody
    custom-schema-fragments-get-response-private:
      properties:
        fragment:
          $ref: '#/components/schemas/custom-schema-fragment-private'
      required:
      - fragment
      title: custom-schema-fragments-get-response-private
      type: object
    custom-schema-fragments-list-request:
      properties:
        app:
          description: The list of app names.
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        leaf_type:
          description: The list of leaf types.
          items:
            type: string
          type: array
        limit:
          description: The maximum number of items.
          format: int32
          type: integer
        sort_by:
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
          type: array
        subtype:
          description: The list of subtypes.
          items:
            type: string
          type: array
        types:
          description: |
            Filters for custom schema fragment of the provided types.
          items:
            $ref: '#/components/schemas/custom-schema-fragment-type'
          type: array
      title: custom-schema-fragments-list-request
      type: object
    custom-schema-fragments-list-request-private:
      properties:
        app:
          description: The list of app names.
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        leaf_type:
          description: The list of leaf types.
          items:
            type: string
          type: array
        limit:
          description: The maximum number of items.
          format: int32
          type: integer
        sort_by:
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
          type: array
        subtype:
          description: The list of subtypes.
          items:
            type: string
          type: array
        types:
          description: |
            Filters for custom schema fragment of the provided types.
          items:
            $ref: '#/components/schemas/custom-schema-fragment-private-type'
          type: array
      title: custom-schema-fragments-list-request-private
      type: object
    custom-schema-fragments-list-response:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        result:
          description: The custom schema fragments.
          items:
            $ref: '#/components/schemas/custom-schema-fragment'
          type: array
      required:
      - result
      title: custom-schema-fragments-list-response
      type: object
      x-go-name: CustomSchemaFragmentsListResponseBody
    custom-schema-fragments-list-response-private:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        result:
          description: The custom schema fragments.
          items:
            $ref: '#/components/schemas/custom-schema-fragment-private'
          type: array
      required:
      - result
      title: custom-schema-fragments-list-response-private
      type: object
    custom-schema-fragments-set-request:
      discriminator:
        mapping:
          app_fragment: '#/components/schemas/custom-schema-fragments-set-request-app-fragment'
          custom_type_fragment: '#/components/schemas/custom-schema-fragments-set-request-custom-type-fragment'
          tenant_fragment: '#/components/schemas/custom-schema-fragments-set-request-tenant-fragment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/custom-schema-fragments-set-request-app-fragment'
      - $ref: '#/components/schemas/custom-schema-fragments-set-request-custom-type-fragment'
      - $ref: '#/components/schemas/custom-schema-fragments-set-request-tenant-fragment'
      properties:
        deprecated:
          description: True if this fragment has been deprecated.
          type: boolean
        description:
          description: The description of the custom schema fragment.
          type: string
        fields:
          description: List of all fields in this fragment.
          items:
            $ref: '#/components/schemas/schema-field-descriptor'
          type: array
        leaf_type:
          description: The leaf type this fragment applies to.
          type: string
        type:
          $ref: '#/components/schemas/custom-schema-fragments-set-request-type'
      required:
      - description
      - leaf_type
      - type
      title: custom-schema-fragments-set-request
      type: object
    custom-schema-fragments-set-request-app-fragment:
      properties:
        app:
          description: The app this fragment applies to.
          type: string
        app_fragment_name:
          description: The name of the app fragment.
          type: string
      required:
      - app
      - app_fragment_name
      title: custom-schema-fragments-set-request-app-fragment
      type: object
    custom-schema-fragments-set-request-custom-type-fragment:
      properties:
        stock_field_enum_overrides:
          description: List of stock field enum overrides.
          items:
            $ref: '#/components/schemas/stock-field-enum-override'
          type: array
        subtype:
          description: |
            The string used to populate the subtype in the leaf type.
          type: string
        subtype_display_name:
          description: The display name of the subtype.
          type: string
      required:
      - subtype
      title: custom-schema-fragments-set-request-custom-type-fragment
      type: object
    custom-schema-fragments-set-request-private:
      discriminator:
        mapping:
          app_fragment: '#/components/schemas/custom-schema-fragments-set-request-private-app-fragment'
          custom_type_fragment: '#/components/schemas/custom-schema-fragments-set-request-private-custom-type-fragment'
          tenant_fragment: '#/components/schemas/custom-schema-fragments-set-request-private-tenant-fragment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/custom-schema-fragments-set-request-private-app-fragment'
      - $ref: '#/components/schemas/custom-schema-fragments-set-request-private-custom-type-fragment'
      - $ref: '#/components/schemas/custom-schema-fragments-set-request-private-tenant-fragment'
      properties:
        deprecated:
          description: True if this fragment has been deprecated.
          type: boolean
        description:
          description: The description of the custom schema fragment.
          type: string
        fields:
          description: List of all fields in this fragment.
          items:
            $ref: '#/components/schemas/field-descriptor'
          type: array
        leaf_type:
          description: The leaf type this fragment applies to.
          type: string
        type:
          $ref: '#/components/schemas/custom-schema-fragments-set-request-private-type'
      required:
      - description
      - leaf_type
      - type
      title: custom-schema-fragments-set-request-private
      type: object
    custom-schema-fragments-set-request-private-app-fragment:
      properties:
        app:
          description: The app this fragment applies to.
          type: string
        app_fragment_name:
          description: The name of the app fragment.
          type: string
      required:
      - app
      - app_fragment_name
      title: custom-schema-fragments-set-request-private-app-fragment
      type: object
    custom-schema-fragments-set-request-private-custom-type-fragment:
      properties:
        stock_field_enum_overrides:
          description: List of stock field enum overrides.
          items:
            $ref: '#/components/schemas/stock-field-enum-override'
          type: array
        subtype:
          description: |
            The string used to populate the subtype in the leaf type.
          type: string
        subtype_display_name:
          description: The display name of the subtype.
          type: string
      required:
      - subtype
      title: custom-schema-fragments-set-request-private-custom-type-fragment
      type: object
    custom-schema-fragments-set-request-private-tenant-fragment:
      title: custom-schema-fragments-set-request-private-tenant-fragment
      type: object
    custom-schema-fragments-set-request-private-type:
      enum:
      - app_fragment
      - custom_type_fragment
      - tenant_fragment
      type: string
    custom-schema-fragments-set-request-tenant-fragment:
      title: custom-schema-fragments-set-request-tenant-fragment
      type: object
    custom-schema-fragments-set-request-type:
      enum:
      - app_fragment
      - custom_type_fragment
      - tenant_fragment
      type: string
    custom-schema-fragments-set-response:
      properties:
        id:
          description: The ID of the custom schema fragment.
          type: string
        id_v1:
          description: The ID of the custom schema fragment.
          type: string
      required:
      - id
      title: custom-schema-fragments-set-response
      type: object
      x-go-name: CustomSchemaFragmentsSetResponseBody
    custom-schema-fragments-set-response-private:
      properties:
        id:
          description: The ID of the custom schema fragment.
          type: string
        id_v1:
          description: The ID of the custom schema fragment.
          type: string
      required:
      - id
      title: custom-schema-fragments-set-response-private
      type: object
    custom-stage:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          marketplace_ref:
            $ref: '#/components/schemas/atom-summary'
          name:
            description: The human readable name of the state.
            type: string
          name_overridden:
            description: True if the name was overridden by the DevOrg.
            type: boolean
          ordinal:
            description: Ordinal used to sort/group stages.
            format: int32
            type: integer
          state:
            $ref: '#/components/schemas/custom-state-summary'
        type: object
      title: custom-stage
    custom-stage-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: custom-stage-summary
    custom-stages-get-request:
      properties:
        id:
          description: The ID of the custom stage to get.
          type: string
      required:
      - id
      title: custom-stages-get-request
      type: object
    custom-stages-get-response:
      properties:
        custom_stage:
          $ref: '#/components/schemas/custom-stage'
      required:
      - custom_stage
      title: custom-stages-get-response
      type: object
      x-go-name: CustomStagesGetResponseBody
    custom-stages-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        limit:
          description: The maximum number of items.
          format: int32
          type: integer
        marketplace_ref:
          description: The list of marketplace ref.
          items:
            $ref: '#/components/schemas/id'
          type: array
        name:
          description: The list of stage names.
          items:
            type: string
          type: array
        ordinal:
          description: The list of stage ordinals.
          items:
            format: int32
            type: integer
          type: array
        sort_by:
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
          type: array
        state_id:
          description: The list of state IDs.
          items:
            $ref: '#/components/schemas/id'
          type: array
      title: custom-stages-list-request
      type: object
    custom-stages-list-response:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        result:
          description: The custom stages.
          items:
            $ref: '#/components/schemas/custom-stage'
          type: array
      required:
      - result
      title: custom-stages-list-response
      type: object
      x-go-name: CustomStagesListResponseBody
    custom-state:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          is_final:
            description: True if this is a final state that closes work.
            type: boolean
          name:
            description: The human readable name of the state.
            type: string
          ordinal:
            description: Ordinal used to identify system states.
            format: int32
            type: integer
        type: object
      title: custom-state
    custom-state-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: custom-state-summary
    custom-states-get-request:
      properties:
        id:
          description: The ID of the custom state to get.
          type: string
      required:
      - id
      title: custom-states-get-request
      type: object
    custom-states-get-response:
      properties:
        custom_state:
          $ref: '#/components/schemas/custom-state'
      required:
      - custom_state
      title: custom-states-get-response
      type: object
      x-go-name: CustomStatesGetResponseBody
    custom-states-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        is_final:
          description: The list of final stage indicators.
          type: boolean
        limit:
          description: The maximum number of items.
          format: int32
          type: integer
        name:
          description: The list of stage names.
          items:
            type: string
          type: array
        ordinal:
          description: The list of stage ordinals.
          items:
            format: int32
            type: integer
          type: array
        sort_by:
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
          type: array
      title: custom-states-list-request
      type: object
    custom-states-list-response:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        result:
          description: The custom states.
          items:
            $ref: '#/components/schemas/custom-state'
          type: array
      required:
      - result
      title: custom-states-list-response
      type: object
      x-go-name: CustomStatesListResponseBody
    custom-type-fragment:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-base'
      - properties:
          stage_diagram:
            $ref: '#/components/schemas/stage-diagram-summary'
          stock_field_enum_overrides:
            description: List of stock field enum overrides.
            items:
              $ref: '#/components/schemas/stock-field-enum-override'
            type: array
          subtype:
            description: |
              The string used to populate the subtype in the leaf type.
            type: string
          subtype_display_name:
            description: |
              Display name of the subtype. Modifications to this field are done
              in-place and don't result in creation of a new fragment in chain.
            type: string
        type: object
      title: custom-type-fragment
    custom-type-fragment-private:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-private-base'
      - properties:
          stage_diagram:
            $ref: '#/components/schemas/stage-diagram-summary'
          stock_field_enum_overrides:
            description: List of stock field enum overrides.
            items:
              $ref: '#/components/schemas/stock-field-enum-override'
            type: array
          subtype:
            description: |
              The string used to populate the subtype in the leaf type.
            type: string
          subtype_display_name:
            description: |
              Display name of the subtype. Modifications to this field are done
              in-place and don't result in creation of a new fragment in chain.
            type: string
        type: object
      title: custom-type-fragment-private
    custom-type-fragment-private-summary:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-private-base-summary'
      title: custom-type-fragment-private-summary
    custom-type-fragment-summary:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-base-summary'
      title: custom-type-fragment-summary
    custom-view:
      properties:
        column_properties:
          description: A list of vista's column preferences in order.
          items:
            $ref: '#/components/schemas/custom-view-column-properties'
          type: array
        show_groups:
          description: Boolean to specify whether to show groups or not.
          type: boolean
      title: custom-view
      type: object
    custom-view-column-properties:
      properties:
        name:
          description: Name of the column.
          type: string
      required:
      - name
      title: custom-view-column-properties
      type: object
    custom-work:
      allOf:
      - $ref: '#/components/schemas/work-base'
      title: custom-work
    custom-work-summary:
      allOf:
      - $ref: '#/components/schemas/work-base-summary'
      title: custom-work-summary
    data-collection-app-settings:
      description: Configuration knobs for discovery application per devorg.
      properties:
        data_collection_interval_minutes:
          description: |
            Optionally set schedule for data collection interval in minutes. If
            not defined default is used.
          format: int32
          type: integer
        git_max_coroutines:
          description: |
            Optionally set maximum Git coroutines. If not defined default is
            used.
          format: int32
          type: integer
        github_max_coroutines:
          description: |
            Optionally set maximum GitHub coroutine. If not defined default is
            useds.
          format: int32
          type: integer
        max_repo_size_mb:
          description: |
            Optionally set maximum GitHub repository size in MB. If not defined
            default is used.
          format: int32
          type: integer
      title: data-collection-app-settings
      type: object
    dataset-filter:
      description: Set of filter for dataset.
      discriminator:
        mapping:
          and: '#/components/schemas/compound-filter'
          equal: '#/components/schemas/field-filter'
          in: '#/components/schemas/field-filter'
          or: '#/components/schemas/compound-filter'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/compound-filter'
      - $ref: '#/components/schemas/compound-filter'
      - $ref: '#/components/schemas/field-filter'
      - $ref: '#/components/schemas/field-filter'
      properties:
        type:
          $ref: '#/components/schemas/dataset-filter-type'
      required:
      - type
      title: dataset-filter
      type: object
    dataset-filter-type:
      enum:
      - and
      - equal
      - in
      - or
      type: string
    dataset-get-request:
      properties:
        end_date:
          description: End date at which to end the dataset.
          format: date-time
          type: string
        filter:
          $ref: '#/components/schemas/dataset-filter'
        params:
          description: |
            Parameters to be passed if defined in the query corresponding to
            the queryId.
          items:
            $ref: '#/components/schemas/query-parameter'
          type: array
        query_id:
          description: Query ID to get the dataset for.
          type: string
        start_date:
          description: Start date from which to start the dataset.
          format: date-time
          type: string
      required:
      - query_id
      title: dataset-get-request
      type: object
    dataset-get-response:
      properties:
        dataset:
          description: The dataset for the request.
          items:
            type: object
          type: array
        last_updated_at:
          description: Last updated timestamp for the dataset.
          format: date-time
          type: string
        metadata:
          description: Metadata for the dataset.
          type: object
      required:
      - dataset
      - last_updated_at
      - metadata
      title: dataset-get-response
      type: object
      x-go-name: DatasetGetResponseBody
    date-filter:
      description: Provides ways to specify date ranges on objects.
      discriminator:
        mapping:
          preset: '#/components/schemas/date-time-preset'
          range: '#/components/schemas/date-time-filter'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/date-time-filter'
      - $ref: '#/components/schemas/date-time-preset'
      properties:
        type:
          $ref: '#/components/schemas/date-filter-type'
      required:
      - type
      title: date-filter
      type: object
    date-filter-type:
      description: Type of date filter.
      enum:
      - preset
      - range
      type: string
    date-time-filter:
      properties:
        after:
          description: |
            Filters for objects created after the provided timestamp
            (inclusive).
          format: date-time
          type: string
        before:
          description: |
            Filters for objects created before the provided timestamp
            (inclusive).
          format: date-time
          type: string
      title: date-time-filter
      type: object
    date-time-preset:
      description: Provides preset types for date filter.
      discriminator:
        mapping:
          last_n_days: '#/components/schemas/date-time-preset-last-n-days'
          next_n_days: '#/components/schemas/date-time-preset-next-n-days'
        propertyName: preset_type
      oneOf:
      - $ref: '#/components/schemas/date-time-preset-last-n-days'
      - $ref: '#/components/schemas/date-time-preset-next-n-days'
      properties:
        preset_type:
          $ref: '#/components/schemas/date-time-preset-type'
      required:
      - preset_type
      title: date-time-preset
      type: object
    date-time-preset-last-n-days:
      properties:
        days:
          description: |
            The range starts from the current timestamp and continues for the
            past n days.
          maximum: 4294967295
          minimum: 0
          type: integer
      required:
      - days
      title: date-time-preset-last-n-days
      type: object
    date-time-preset-next-n-days:
      properties:
        days:
          description: |
            The range starts from the current timestamp and continues for the
            next n days.
          maximum: 4294967295
          minimum: 0
          type: integer
      required:
      - days
      title: date-time-preset-next-n-days
      type: object
    date-time-preset-type:
      description: Type of date preset.
      enum:
      - last_n_days
      - next_n_days
      type: string
    delete-discovery-profile-request:
      properties:
        profile_id:
          description: Discovery Profile unique ID.
          type: string
      required:
      - profile_id
      title: delete-discovery-profile-request
      type: object
    delete-discovery-profile-response:
      title: delete-discovery-profile-response
      type: object
      x-go-name: DeleteDiscoveryProfileResponseBody
    delete-discovery-settings-request:
      properties:
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      title: delete-discovery-settings-request
      type: object
    delete-discovery-settings-response:
      title: delete-discovery-settings-response
      type: object
      x-go-name: DeleteDiscoverySettingsResponseBody
    delete-recurring-line-items:
      properties:
        recurring_line_item_id:
          description: Recurring line item to be deleted from the service plan.
          type: string
      required:
      - recurring_line_item_id
      title: delete-recurring-line-items
      type: object
    detail-view-ui-metadata:
      description: Detail view UI hint overrides.
      properties:
        is_hidden:
          description: Whether field is hidden in UI.
          type: boolean
      title: detail-view-ui-metadata
      type: object
    dev-org:
      allOf:
      - $ref: '#/components/schemas/org-base'
      - properties:
          auth0_org_id:
            description: Auth0 Org ID of the DevOrg.
            type: string
          available_org_connections:
            description: IDs of Auth0 connection available for this DevOrg.
            items:
              type: string
            type: array
          dev_slug:
            description: Customer chosen URL slug for the DevOrg.
            type: string
        required:
        - dev_slug
        type: object
      title: dev-org
    dev-org-auth-connections-create-request:
      description: |
        Request to create a new enterprise authentication connection.
      discriminator:
        mapping:
          google_apps: '#/components/schemas/auth-connection-options-google-apps'
          oidc: '#/components/schemas/auth-connection-options-oidc'
          samlp: '#/components/schemas/auth-connection-options-saml'
          waad: '#/components/schemas/auth-connection-options-azure-ad'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/auth-connection-options-azure-ad'
      - $ref: '#/components/schemas/auth-connection-options-google-apps'
      - $ref: '#/components/schemas/auth-connection-options-oidc'
      - $ref: '#/components/schemas/auth-connection-options-saml'
      properties:
        display_name:
          description: |
            Display name of the authentication connection. This name will be
            visible to all the users when they sign in to this Dev
            organization. For example, if the display_name is 'abclogin', then
            it would appear on the login button as 'Log in to abclogin'.
          type: string
        type:
          $ref: '#/components/schemas/dev-org-auth-connections-create-request-type'
      required:
      - type
      title: dev-org-auth-connections-create-request
      type: object
    dev-org-auth-connections-create-request-type:
      description: |
        Defines the type for the authentication connection. Different types of
        authentication connections have different configuration parameters.
      enum:
      - google_apps
      - oidc
      - samlp
      - waad
      type: string
    dev-org-auth-connections-create-response:
      description: |
        Response for the request to create a new enterprise authentication
        connection.
      properties:
        auth_connection:
          $ref: '#/components/schemas/auth-connection'
      required:
      - auth_connection
      title: dev-org-auth-connections-create-response
      type: object
      x-go-name: DevOrgAuthConnectionsCreateResponseBody
    dev-org-auth-connections-delete-request:
      description: |
        Request to delete an enterprise authentication connection for a Dev
        organization. A default connection and a connection which is currently
        enabled cannot be deleted.
      properties:
        id:
          description: ID of the authentication connection to be deleted.
          type: string
      required:
      - id
      title: dev-org-auth-connections-delete-request
      type: object
    dev-org-auth-connections-get-request:
      description: |
        Request to get configuration details of organization's authentication
        Connection.
      properties:
        id:
          description: ID of the authentication connection.
          type: string
      required:
      - id
      title: dev-org-auth-connections-get-request
      type: object
    dev-org-auth-connections-get-response:
      description: |
        Response object encapsulating the configuration details of an
        authentication connection.
      properties:
        auth_connection:
          $ref: '#/components/schemas/auth-connection'
      required:
      - auth_connection
      title: dev-org-auth-connections-get-response
      type: object
      x-go-name: DevOrgAuthConnectionsGetResponseBody
    dev-org-auth-connections-list-response:
      description: |
        Response object for the request to list all the social and enterprise
        authentication connections configured for a Dev organization.
      properties:
        auth_connections:
          description: |
            List of all the authentication connections currently configured for
            a Dev organization.
          items:
            $ref: '#/components/schemas/auth-connection'
          type: array
      required:
      - auth_connections
      title: dev-org-auth-connections-list-response
      type: object
      x-go-name: DevOrgAuthConnectionsListResponseBody
    dev-org-auth-connections-toggle-request:
      description: |
        Request to enable or disable an authentication connection for a Dev
        organization.
      properties:
        id:
          description: ID of the authentication connection to be toggled.
          type: string
        toggle:
          $ref: '#/components/schemas/auth-connection-toggle'
      required:
      - id
      title: dev-org-auth-connections-toggle-request
      type: object
    dev-org-auth-connections-update-request:
      description: |
        Request to update an enterprise authentication connection for a Dev
        organization.
      discriminator:
        mapping:
          google_apps: '#/components/schemas/auth-connection-options-google-apps'
          none: '#/components/schemas/empty'
          oidc: '#/components/schemas/auth-connection-options-oidc'
          samlp: '#/components/schemas/auth-connection-options-saml'
          waad: '#/components/schemas/auth-connection-options-azure-ad'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/auth-connection-options-azure-ad'
      - $ref: '#/components/schemas/auth-connection-options-google-apps'
      - $ref: '#/components/schemas/auth-connection-options-oidc'
      - $ref: '#/components/schemas/auth-connection-options-saml'
      properties:
        display_name:
          description: |
            New display name of the authentication connection. This name will
            be visible to all the users when they sign in to this Dev
            organization. For example, if the display_name is 'abclogin', then
            it would appear on the login button as 'Log in to abclogin'.
          type: string
        id:
          description: |
            ID of the authentication connection which is to be updated.
          type: string
        type:
          $ref: '#/components/schemas/dev-org-auth-connections-update-request-type'
      required:
      - id
      - type
      title: dev-org-auth-connections-update-request
      type: object
    dev-org-auth-connections-update-request-type:
      description: |
        Specifies the type for the authentication connection. Different types
        of authentication connections have different configuration parameters
        that can be updated.
      enum:
      - google_apps
      - none
      - oidc
      - samlp
      - waad
      type: string
    dev-org-auth-connections-update-response:
      description: |
        Response for the request to update an enterprise authentication
        connection.
      properties:
        auth_connection:
          $ref: '#/components/schemas/auth-connection'
      required:
      - auth_connection
      title: dev-org-auth-connections-update-response
      type: object
      x-go-name: DevOrgAuthConnectionsUpdateResponseBody
    dev-org-public-info-request:
      description: |
        Request object to get public information of a Dev organization.
      properties:
        slug:
          description: Slug of the Dev organization.
          type: string
      required:
      - slug
      title: dev-org-public-info-request
      type: object
    dev-org-public-info-response:
      description: Public information of a Dev organization.
      properties:
        auth0_org_id:
          description: Auth0 org ID of the Dev organization.
          type: string
      required:
      - auth0_org_id
      title: dev-org-public-info-response
      type: object
      x-go-name: DevOrgPublicInfoResponseBody
    dev-org-summary:
      allOf:
      - $ref: '#/components/schemas/org-base-summary'
      - properties:
          dev_slug:
            description: Customer chosen URL slug for the DevOrg.
            type: string
        required:
        - dev_slug
        type: object
      title: dev-org-summary
    dev-orgs-create-request:
      description: A request to create a new Dev organization.
      properties:
        credit_coupon_codes:
          description: |
            The coupon codes to be applied to give credits to the Dev
            organization.
          items:
            type: string
          type: array
        dev_org_id_prefix:
          description: Custom prefix for Dev organization ID.
          type: string
        dev_slug:
          description: Customer chosen URL slug.
          type: string
        display_name:
          description: Display name of the new Dev organization.
          type: string
        environment:
          $ref: '#/components/schemas/org-environment'
        give_domain_access:
          description: |
            Whether the Dev organization allows access based on email domain.
          type: boolean
        service_plan:
          $ref: '#/components/schemas/dev-orgs-create-request-create-service-plan'
        utm:
          $ref: '#/components/schemas/dev-orgs-create-request-u-t-m'
      title: dev-orgs-create-request
      type: object
    dev-orgs-create-request-create-service-plan:
      description: Create object for service plan.
      properties:
        service_plan_line_items:
          description: |
            Service plan line item details for creating the service plan as
            part of the Dev organization onboarding.
          items:
            $ref: '#/components/schemas/dev-orgs-create-request-create-service-plan-create-service-plan-line-item'
          type: array
      title: dev-orgs-create-request-create-service-plan
      type: object
    dev-orgs-create-request-create-service-plan-create-service-plan-line-item:
      description: Create object for service plan line item.
      properties:
        sku_family_name:
          description: |
            The sku family name detail to be included in the service plan.
          type: string
      required:
      - sku_family_name
      title: dev-orgs-create-request-create-service-plan-create-service-plan-line-item
      type: object
    dev-orgs-create-request-u-t-m:
      description: UTM parameters for the Dev organization.
      properties:
        campaign:
          description: UTM campaign for the Dev organization.
          type: string
        content:
          description: UTM content for the Dev organization.
          type: string
        medium:
          description: UTM medium for the Dev organization.
          type: string
        source:
          description: UTM source for the Dev organization.
          type: string
        term:
          description: UTM term for the Dev organization.
          type: string
      title: dev-orgs-create-request-u-t-m
      type: object
    dev-orgs-create-response:
      description: The response to creating a new Dev organization.
      properties:
        dev_org:
          $ref: '#/components/schemas/dev-org'
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
      - dev_org
      - dev_user
      title: dev-orgs-create-response
      type: object
      x-go-name: DevOrgsCreateResponseBody
    dev-orgs-delete-request:
      description: A request to delete a Dev organization.
      title: dev-orgs-delete-request
      type: object
    dev-orgs-delete-response:
      description: The response to delete a Dev organization.
      title: dev-orgs-delete-response
      type: object
      x-go-name: DevOrgsDeleteResponseBody
    dev-orgs-get-request:
      description: A request to get a Dev organization's information.
      title: dev-orgs-get-request
      type: object
    dev-orgs-get-response:
      description: The response to get a Dev organization's information.
      properties:
        dev_org:
          $ref: '#/components/schemas/dev-org'
      required:
      - dev_org
      title: dev-orgs-get-response
      type: object
      x-go-name: DevOrgsGetResponseBody
    dev-orgs-invites-create-request:
      description: |
        A request to create an invitation for a user to the Dev organization.
      properties:
        email:
          description: Email address of the user being invited.
          type: string
      required:
      - email
      title: dev-orgs-invites-create-request
      type: object
    dev-orgs-invites-create-response:
      description: |
        A response to create an invitation for a user to the Dev organization.
      properties:
        invite:
          $ref: '#/components/schemas/devu-invite'
      required:
      - invite
      title: dev-orgs-invites-create-response
      type: object
      x-go-name: DevOrgsInvitesCreateResponseBody
    dev-orgs-invites-list-request:
      description: |
        A request to get the list of invitations for the Dev organization.
      properties:
        created_by_ids:
          description: |
            Filters invitations to those created by the specified users.
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: The maximum number of invited users to be retrieved.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          description: |
            Fields to sort the invites by and the direction to sort them.
          items:
            type: string
          type: array
        state:
          description: Array of state values to be filtered.
          items:
            $ref: '#/components/schemas/devu-invite-state'
          type: array
      title: dev-orgs-invites-list-request
      type: object
    dev-orgs-invites-list-response:
      description: The response to listing the Dev organization invitations.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration. If not
            provided, then iteration has completed.
          type: string
        invites:
          description: The list of invited users.
          items:
            $ref: '#/components/schemas/devu-invite'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - invites
      title: dev-orgs-invites-list-response
      type: object
      x-go-name: DevOrgsInvitesListResponseBody
    dev-orgs-join-request:
      description: |
        A request to get the invitation link for joining the Dev organization
        for which domain-based access is allowed.
      properties:
        id:
          description: The globally unique ID of the DevRev organization.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      required:
      - id
      title: dev-orgs-join-request
      type: object
    dev-orgs-join-response:
      description: |
        The response to get the invitation link for joining the Dev
        organization.
      properties:
        invitation_link:
          description: |
            The short-lived invitation link to join the Dev organization.
          type: string
      required:
      - invitation_link
      title: dev-orgs-join-response
      type: object
      x-go-name: DevOrgsJoinResponseBody
    dev-orgs-list-request:
      description: |
        A request to get the list of Dev organizations for the authenticated
        user.
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        is_available:
          description: |
            Whether to list the Dev organizations available to join without
            invitation.
          type: boolean
        limit:
          description: The number of Dev organizations to be retrieved.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          description: |
            Fields to sort the Dev organizations by and the direction to sort
            them.
          items:
            type: string
          type: array
      title: dev-orgs-list-request
      type: object
    dev-orgs-list-response:
      description: |
        The response to get the list of Dev organizations for the authenticated
        user.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration. If not
            provided, then iteration has completed.
          type: string
        dev_orgs:
          description: List of Dev organizations.
          items:
            $ref: '#/components/schemas/dev-org'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - dev_orgs
      title: dev-orgs-list-response
      type: object
      x-go-name: DevOrgsListResponseBody
    dev-orgs-self-get-request:
      description: A request to get the authenticated user's Dev organization.
      title: dev-orgs-self-get-request
      type: object
    dev-orgs-self-get-response:
      description: |
        The response to getting the Dev organization for the authenticated
        user.
      properties:
        dev_org:
          $ref: '#/components/schemas/dev-org'
      required:
      - dev_org
      title: dev-orgs-self-get-response
      type: object
      x-go-name: DevOrgsSelfGetResponseBody
    dev-orgs-update-request:
      description: A request to update a Dev organization's information.
      properties:
        display_name:
          description: Display name of the new Dev organization.
          type: string
        environment:
          $ref: '#/components/schemas/org-environment'
        logo_id:
          description: Artifact ID of the Dev organization's logo.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          nullable: true
          type: string
      title: dev-orgs-update-request
      type: object
    dev-orgs-update-response:
      description: The response to update a Dev organization's information.
      properties:
        dev_org:
          $ref: '#/components/schemas/dev-org'
      required:
      - dev_org
      title: dev-orgs-update-response
      type: object
      x-go-name: DevOrgsUpdateResponseBody
    dev-rev-partitioner-merger:
      description: Configuration knobs for partitioners and partition mergers.
      properties:
        config:
          description: Discovery partitioner/partition merger configuration.
          type: object
        dev:
          description: Discovery Dev partitioner/merger.
          type: string
        rev:
          description: Discovery Rev partitioner/merger.
          type: string
      title: dev-rev-partitioner-merger
      type: object
    dev-user:
      allOf:
      - $ref: '#/components/schemas/user-base'
      - properties:
          address:
            $ref: '#/components/schemas/postal-address'
          auth0_user_ids:
            description: |
              IDs of the auth0 users this Dev User account is linked with.
            items:
              type: string
            type: array
          external_identities:
            description: IDs of the Dev User outside the DevRev SOR.
            items:
              $ref: '#/components/schemas/external-identity'
            type: array
          job_title:
            $ref: '#/components/schemas/dev-user-job-title'
          phone_number:
            description: Phone numbers of the Dev User.
            items:
              $ref: '#/components/schemas/phone-number'
            type: array
          profile_id:
            description: |
              Reference of the DevRev Profile this Dev User is linked to.
            type: string
          status:
            $ref: '#/components/schemas/status'
          terms_conditions_accept_at:
            description: Time when the terms and conditions were accepted.
            format: date-time
            type: string
          terms_conditions_accepted:
            description: |
              Flag to denote if terms and conditions have been accepted.
            type: boolean
        type: object
      title: dev-user
    dev-user-invitation:
      properties:
        dev_org:
          $ref: '#/components/schemas/dev-org-summary'
        expires_at:
          description: Time at which the invitation link expires.
          format: date-time
          type: string
        invitation_link:
          description: |
            Invitation link used to accept the invitation to a Dev
            organization.
          type: string
        inviter:
          $ref: '#/components/schemas/user-summary'
      required:
      - dev_org
      title: dev-user-invitation
      type: object
    dev-user-job-title:
      description: Job title of the Dev User.
      enum:
      - cxo
      - designer
      - developer
      - operations
      - others
      - product_manager
      - qa
      - support
      - tech_lead
      type: string
    dev-user-summary:
      allOf:
      - $ref: '#/components/schemas/user-base-summary'
      title: dev-user-summary
    dev-user-update-display-picture-request:
      description: A request to update the display picture of a Dev user
      properties:
        display_picture:
          description: |
            Artifact ID of the user's uploaded display picture, otherwise if
            'null', then the user's display picture is cleared.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          nullable: true
          type: string
      required:
      - display_picture
      title: dev-user-update-display-picture-request
      type: object
    dev-user-update-display-picture-response:
      description: The response to update the display picture of a Dev user.
      title: dev-user-update-display-picture-response
      type: object
      x-go-name: DevUserUpdateDisplayPictureResponseBody
    dev-users-check-phone-number-code-request:
      description: A request to check a verification code for a phone number.
      properties:
        phone_number:
          description: The phone number to check the verification code for.
          type: string
        verification_code:
          description: The verification code to check.
          type: string
      required:
      - phone_number
      - verification_code
      title: dev-users-check-phone-number-code-request
      type: object
    dev-users-check-phone-number-code-response:
      description: |
        The response to check a verification code for a phone number.
      properties:
        is_valid:
          description: Whether the verification code is valid.
          type: boolean
      required:
      - is_valid
      title: dev-users-check-phone-number-code-response
      type: object
      x-go-name: DevUsersCheckPhoneNumberCodeResponseBody
    dev-users-deactivate-request:
      description: A request to deactivate the Dev user.
      properties:
        id:
          description: The ID for the DevUser.
          type: string
      required:
      - id
      title: dev-users-deactivate-request
      type: object
    dev-users-deactivate-response:
      description: The response to deactivate the Dev user.
      title: dev-users-deactivate-response
      type: object
      x-go-name: DevUsersDeactivateResponseBody
    dev-users-delete-request:
      description: A request to delete the Dev user.
      properties:
        id:
          description: The ID for the DevUser.
          type: string
      required:
      - id
      title: dev-users-delete-request
      type: object
    dev-users-delete-response:
      description: The response to delete the Dev user.
      title: dev-users-delete-response
      type: object
      x-go-name: DevUsersDeleteResponseBody
    dev-users-get-request:
      description: A request to get a Dev user's information.
      properties:
        id:
          description: User ID of the requested Dev user.
          type: string
      required:
      - id
      title: dev-users-get-request
      type: object
    dev-users-get-response:
      description: The response to getting the information for the Dev user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
      - dev_user
      title: dev-users-get-response
      type: object
      x-go-name: DevUsersGetResponseBody
    dev-users-identities-link-request:
      description: Request to link external identity to a Dev user.
      properties:
        secondary_identity_token:
          description: |
            Signed JWT token containing verified identity of the user on
            external identity source.
          type: string
      required:
      - secondary_identity_token
      title: dev-users-identities-link-request
      type: object
    dev-users-identities-link-response:
      description: |
        Response for the request to link an external identity to a Dev user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
      - dev_user
      title: dev-users-identities-link-response
      type: object
      x-go-name: DevUsersIdentitiesLinkResponseBody
    dev-users-identities-unlink-request:
      description: Request to unlink an external identity from a Dev user.
      properties:
        issuer:
          description: Issuer that needs to be unlinked from a Dev user.
          type: string
      required:
      - issuer
      title: dev-users-identities-unlink-request
      type: object
    dev-users-identities-unlink-response:
      description: |
        Response for the request to unlink an external identity from a Dev
        user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
      - dev_user
      title: dev-users-identities-unlink-response
      type: object
      x-go-name: DevUsersIdentitiesUnlinkResponseBody
    dev-users-is-display-handle-available-request:
      description: |
        A request to check if a display handle is available for the
        authenticated user or not.
      properties:
        display_handle:
          description: Display handle to be checked for availability.
          type: string
      required:
      - display_handle
      title: dev-users-is-display-handle-available-request
      type: object
    dev-users-is-display-handle-available-response:
      description: |
        Response object to display handle availability check request.
      properties:
        is_available:
          description: Whether the display handle is available.
          type: boolean
      required:
      - is_available
      title: dev-users-is-display-handle-available-response
      type: object
      x-go-name: DevUsersIsDisplayHandleAvailableResponseBody
    dev-users-list-request:
      description: A request to get the list of Dev user's information.
      properties:
        created_by:
          description: |
            Filters list of Dev users which are created by specified list of
            Dev user IDs.
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        email:
          description: Filters Dev users based on email addresses.
          items:
            type: string
          type: array
        job_title:
          description: Filters Dev users based on job titles.
          items:
            $ref: '#/components/schemas/dev-user-job-title'
          type: array
        limit:
          description: |
            The maximum number of Dev users to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          description: |
            Fields to sort the Dev users by and the direction to sort them.
          items:
            type: string
          type: array
        state:
          description: Filters Dev users based on state.
          items:
            $ref: '#/components/schemas/user-state'
          type: array
      title: dev-users-list-request
      type: object
    dev-users-list-response:
      description: The response to listing the Dev users.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration. If not
            provided, then iteration has completed.
          type: string
        dev_users:
          description: The list of Dev users.
          items:
            $ref: '#/components/schemas/dev-user'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - dev_users
      title: dev-users-list-response
      type: object
      x-go-name: DevUsersListResponseBody
    dev-users-logout-request:
      description: |
        The request to logout from a Dev organization.It unregisters the device
        for notifications and deletes the token from STS.
      properties:
        auth_token_id:
          description: |
            The unique identifier for the token under a given Dev organization.
          type: string
        device_id:
          description: The unique identifier of the device.
          type: string
      required:
      - device_id
      title: dev-users-logout-request
      type: object
    dev-users-merge-request:
      description: Request object for DevUsersMerge call.
      properties:
        primary_user:
          description: The unique ID of the primary user.
          type: string
        secondary_user:
          description: The unique ID of the secondary user.
          type: string
      required:
      - primary_user
      - secondary_user
      title: dev-users-merge-request
      type: object
    dev-users-merge-response:
      description: The response to DevUsersMerge call.
      title: dev-users-merge-response
      type: object
      x-go-name: DevUsersMergeResponseBody
    dev-users-post-login-request:
      description: Request object for DevUsersPostLogin call.
      title: dev-users-post-login-request
      type: object
    dev-users-post-login-response:
      description: Response object for post-login request.
      properties:
        refetch_id_token:
          description: Whether a new access token is to be fetched.
          type: boolean
      required:
      - refetch_id_token
      title: dev-users-post-login-response
      type: object
      x-go-name: DevUsersPostLoginResponseBody
    dev-users-self-delete-request:
      description: A request to delete the authenticated user.
      title: dev-users-self-delete-request
      type: object
    dev-users-self-delete-response:
      description: The response to delete the authenticated user.
      title: dev-users-self-delete-response
      type: object
      x-go-name: DevUsersSelfDeleteResponseBody
    dev-users-self-request:
      description: A request to get the authenticated user's information.
      title: dev-users-self-request
      type: object
    dev-users-self-response:
      description: |
        The response to getting the information for the authenticated user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
      - dev_user
      title: dev-users-self-response
      type: object
      x-go-name: DevUsersSelfResponseBody
    dev-users-self-update-request:
      description: |
        A request to update the user's information for the authenticated Dev
        user.
      properties:
        display_handle:
          deprecated: true
          description: The updated display handle of the Dev user.
          type: string
        display_name:
          description: The updated display name of the Dev user.
          type: string
        display_picture_id:
          description: Artifact ID of a Dev user's display picture.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          nullable: true
          type: string
        full_name:
          description: The updated full name of the Dev user.
          type: string
        job_title:
          $ref: '#/components/schemas/dev-user-job-title'
        status:
          $ref: '#/components/schemas/status'
        terms_conditions_accepted:
          description: If the Dev user has accepted terms and conditions.
          type: boolean
      title: dev-users-self-update-request
      type: object
    dev-users-send-phone-number-code-request:
      description: A request to send a verification code to a phone number.
      properties:
        phone_number:
          description: The phone number to send the verification code to.
          type: string
      required:
      - phone_number
      title: dev-users-send-phone-number-code-request
      type: object
    dev-users-send-phone-number-code-response:
      description: The response to send a verification code to a phone number.
      title: dev-users-send-phone-number-code-response
      type: object
      x-go-name: DevUsersSendPhoneNumberCodeResponseBody
    dev-users-update-request:
      description: |
        A request to update the user's information corresponding to input Dev
        user ID.
      properties:
        display_handle:
          deprecated: true
          description: The updated display handle of the Dev user.
          type: string
        display_name:
          description: The updated display name of the Dev user.
          type: string
        display_picture_id:
          description: Artifact ID of a Dev user's display picture.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          nullable: true
          type: string
        full_name:
          description: The updated full name of the Dev user.
          type: string
        id:
          description: The ID for the DevUser to be updated.
          type: string
        job_title:
          $ref: '#/components/schemas/dev-user-job-title'
        status:
          $ref: '#/components/schemas/status'
      required:
      - id
      title: dev-users-update-request
      type: object
    dev-users-update-response:
      description: The response to update a Dev user.
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
      - dev_user
      title: dev-users-update-response
      type: object
      x-go-name: DevUsersUpdateResponseBody
    devrev-enum-group:
      description: Enum group information.
      properties:
        group_key:
          description: enum group key.
          type: string
        is_header_visible:
          description: true if header is visible.
          type: boolean
        label:
          description: label of the field.
          type: string
      title: devrev-enum-group
      type: object
    devrev-profile:
      allOf:
      - $ref: '#/components/schemas/user-base'
      - properties:
          bio:
            description: Professional biography of the user.
            type: string
          headline:
            description: |
              Brief description of the user's professional experience or
              interests.
            type: string
          visibility:
            $ref: '#/components/schemas/devrev-profile-visibility'
        type: object
      title: devrev-profile
    devrev-profile-summary:
      allOf:
      - $ref: '#/components/schemas/user-base-summary'
      title: devrev-profile-summary
    devrev-profile-visibility:
      description: Visibility of the profile to other users.
      enum:
      - private
      - public
      type: string
    devrev-reminder:
      allOf:
      - $ref: '#/components/schemas/notification-base'
      - properties:
          created_at:
            description: Time at which reminder was created.
            format: date-time
            type: string
          message:
            description: Message included with reminder.
            type: string
          references:
            description: The objects referenced in the message.
            items:
              $ref: '#/components/schemas/atom-summary'
            type: array
        type: object
      title: devrev-reminder
    devrev-reminder-summary:
      allOf:
      - $ref: '#/components/schemas/notification-base-summary'
      title: devrev-reminder-summary
    devu-invite:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          email:
            description: Email address of the user.
            type: string
          expires_at:
            description: Time at which invite link expires.
            format: date-time
            type: string
          invitation_id:
            description: Invitation Id of the invite sent to user.
            type: string
          invitation_link:
            description: Invitaion link associated with given email.
            type: string
          state:
            $ref: '#/components/schemas/devu-invite-state'
        type: object
      title: devu-invite
    devu-invite-state:
      description: State of the invite.
      enum:
      - accepted
      - deleted
      - expired
      - pending
      type: string
    devu-invite-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: devu-invite-summary
    discovery-app-settings:
      description: Configuration knobs for discovery application per devorg.
      properties:
        discovery_run_interval_minutes:
          description: |
            Optionally set schedule for discovery run interval in minutes. If
            not defined default is used.
          format: int32
          type: integer
        rate_limit_count_in_window:
          description: |
            Optionally set rate limit count in window. If not defined default
            is used.
          format: int32
          type: integer
      title: discovery-app-settings
      type: object
    discovery-event-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: discovery-event-base-summary
    discovery-git-commit-summary:
      allOf:
      - $ref: '#/components/schemas/discovery-event-base-summary'
      title: discovery-git-commit-summary
    discovery-git-event-summary:
      allOf:
      - $ref: '#/components/schemas/discovery-event-base-summary'
      title: discovery-git-event-summary
    discovery-github-repos-settings:
      description: Configuration knobs for GitHub repositories for devorg.
      properties:
        exclude:
          description: Repos that are excluded are part of this list.
          items:
            type: string
          type: array
        include:
          description: Repos that are included are part of this list.
          items:
            type: string
          type: array
        organization:
          description: Name of the organization for GitHub repository.
          type: string
        repos_status:
          $ref: '#/components/schemas/discovery-github-repos-settings-repos-status'
      title: discovery-github-repos-settings
      type: object
    discovery-github-repos-settings-repos-status:
      description: Enum for repositories status for inclusion and exclusion.
      enum:
      - all
      - exclude
      - include
      type: string
    discovery-profile:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          extractors:
            $ref: '#/components/schemas/extractors'
          mergers:
            $ref: '#/components/schemas/dev-rev-partitioner-merger'
          other_data_source_devorg:
            description: |
              Optionally allow to specify a different devorg's data as source. If
              missing current devorg is used.
            type: string
          other_data_source_devorg_v1:
            description: |
              Optionally allow to specify a different devorg's data as source. If
              missing current devorg is used.
            type: string
          partitioners:
            $ref: '#/components/schemas/dev-rev-partitioner-merger'
          profile_name:
            description: Name of the Discovery profile.
            type: string
        type: object
      title: discovery-profile
    discovery-profile-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: discovery-profile-summary
    discovery-run:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          completed_at:
            description: Set discovery run end time.
            format: date-time
            type: string
          failure_info:
            description: |
              Optionally set failure information if discovery run fail.
            type: string
          is_scheduled:
            description: Optionally set if discovery is scheduled.
            type: boolean
          next_status_at:
            description: |
              Optionally set next status time. This would be helpful for client
              to decide when next get status call should be made.
            format: date-time
            type: string
          profile:
            $ref: '#/components/schemas/profile-summary'
          selected_sources:
            description: |
              Limit the use of the sources defined in the default profile to the
              ones specified in this list. If this field is not provided, attempt
              to use every source defined in the default profile.
            items:
              type: string
            type: array
          sources_status:
            description: Discovery sources information.
            items:
              $ref: '#/components/schemas/source-details'
            type: array
          started_at:
            description: Set discovery run start time.
            format: date-time
            type: string
          status:
            $ref: '#/components/schemas/discovery-run-status'
          triggered_by:
            description: Set discovery run triggered by User.
            type: string
          triggered_by_v1:
            description: Set discovery run triggered by User.
            type: string
        type: object
      title: discovery-run
    discovery-run-status:
      description: Enum for discovery run status.
      enum:
      - failed
      - running
      - started
      - success
      type: string
    discovery-run-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: discovery-run-summary
    discovery-settings:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          data_collection_app_settings:
            $ref: '#/components/schemas/data-collection-app-settings'
          discovery_app_settings:
            $ref: '#/components/schemas/discovery-app-settings'
          discovery_profile_id:
            description: |
              Optionally allow to specify profile Id associated with the devorg.
            type: string
          discovery_profile_id_v1:
            description: |
              Optionally allow to specify profile Id associated with the devorg.
            type: string
          github_repos:
            description: Discovery GitHub repositories settings for devorg.
            items:
              $ref: '#/components/schemas/discovery-github-repos-settings'
            type: array
        type: object
      title: discovery-settings
    discovery-settings-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: discovery-settings-summary
    discovery-source:
      properties:
        last_captured_timestamp:
          description: |
            Timestamp at which the data was last captured for this source.
          format: date-time
          type: string
        size_bytes:
          description: |
            Size of the data, in bytes, that was collected for this source.
          format: int64
          type: integer
        source_name:
          $ref: '#/components/schemas/parts-discovery-source-name'
      required:
      - last_captured_timestamp
      - source_name
      title: discovery-source
      type: object
    dns-record:
      description: DNS record.
      properties:
        name:
          description: Name of the DNS record.
          type: string
        type:
          $ref: '#/components/schemas/dns-record-type'
        value:
          description: Value of the DNS record.
          type: string
      title: dns-record
      type: object
    dns-record-type:
      description: Type of DNS record.
      enum:
      - cname
      - txt
      type: string
    doc-field:
      description: Docs Field details.
      properties:
        doc_type:
          description: Type of doc.
          type: string
        title:
          description: Title text for the url.
          type: string
        url:
          description: URL for the field.
          type: string
      title: doc-field
      type: object
    domain-identities-create-request:
      description: The request for creating domain identity.
      properties:
        domain:
          description: Domain for which identity needs to be created.
          type: string
        keyring:
          description: |
            The ID of the keyring to be used for storing domain identities.
          type: string
      required:
      - domain
      - keyring
      title: domain-identities-create-request
      type: object
    domain-identities-create-response:
      description: The response for create domain identity.
      properties:
        dns_records:
          description: DNS Records for domain identity verification.
          items:
            $ref: '#/components/schemas/dns-record'
          type: array
      required:
      - dns_records
      title: domain-identities-create-response
      type: object
      x-go-name: DomainIdentitiesCreateResponseBody
    domain-identities-sync-request:
      description: The request for syncing the domain identity information.
      properties:
        domain:
          description: |
            Domain for which identity information needs to be synced.
          type: string
        keyring:
          description: |
            The ID of the keyring having domain identity information.
          type: string
      required:
      - domain
      - keyring
      title: domain-identities-sync-request
      type: object
    domain-identities-sync-response:
      description: The response for sync domain identity.
      properties:
        status:
          $ref: '#/components/schemas/domain-verification-status'
      required:
      - status
      title: domain-identities-sync-response
      type: object
      x-go-name: DomainIdentitiesSyncResponseBody
    domain-verification-status:
      description: Domain Verification status.
      properties:
        value:
          $ref: '#/components/schemas/domain-verification-status-value'
      title: domain-verification-status
      type: object
    domain-verification-status-value:
      description: Status of the identity.
      enum:
      - failed
      - not_started
      - pending
      - success
      - temporary_failure
      type: string
    duration:
      description: |
        Duration encapsulates the value of the duration and the type of the
        duration. For example, 1 day where value is '1' and type is 'day'.
      properties:
        type:
          $ref: '#/components/schemas/duration-type'
        value:
          description: Value defines the value of the duration.
          format: int32
          type: integer
      title: duration
      type: object
    duration-type:
      description: Type defines the type of the duration.
      enum:
      - day
      - hour
      - minute
      - month
      - one_time
      - year
      type: string
    dynamic-vista:
      allOf:
      - $ref: '#/components/schemas/vista-base'
      - discriminator:
          mapping:
            accounts: '#/components/schemas/dynamic-vista-accounts-vista'
            conversations: '#/components/schemas/dynamic-vista-conversations-vista'
            parts: '#/components/schemas/dynamic-vista-parts-vista'
            rev_orgs: '#/components/schemas/dynamic-vista-rev-orgs-vista'
            works: '#/components/schemas/dynamic-vista-works-vista'
          propertyName: filter_type
        oneOf:
        - $ref: '#/components/schemas/dynamic-vista-accounts-vista'
        - $ref: '#/components/schemas/dynamic-vista-conversations-vista'
        - $ref: '#/components/schemas/dynamic-vista-parts-vista'
        - $ref: '#/components/schemas/dynamic-vista-rev-orgs-vista'
        - $ref: '#/components/schemas/dynamic-vista-works-vista'
        properties:
          filter_type:
            $ref: '#/components/schemas/dynamic-vista-filter-type'
        required:
        - filter_type
        type: object
      description: |
        Dynamic collection of Devrev objects, all adhering to a specific
        filter.
      title: dynamic-vista
    dynamic-vista-accounts-vista:
      properties:
        filter:
          $ref: '#/components/schemas/dynamic-vista-accounts-vista-filter'
        items:
          description: Pinned items associated with the vista.
          items:
            $ref: '#/components/schemas/dynamic-vista-accounts-vista-item-value'
          type: array
      required:
      - filter
      title: dynamic-vista-accounts-vista
      type: object
    dynamic-vista-accounts-vista-filter:
      properties:
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_by_v1:
          description: Filters by creator.
          type: string
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        domains:
          description: Array of domain for Accounts to be filtered.
          items:
            type: string
          type: array
        external_refs:
          description: Array of references of Accounts to be filtered.
          items:
            type: string
          type: array
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters by owners.
          items:
            type: string
          type: array
        owned_by_v1:
          description: Filters by owners.
          type: string
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            Filters on tags. Input will be of the format (tags=<tag id
            1>=<value>&tags=<tag id 2>)
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tier:
          description: Array of tier for Accounts to be filtered.
          items:
            type: string
          type: array
      title: dynamic-vista-accounts-vista-filter
      type: object
    dynamic-vista-accounts-vista-item-value:
      properties:
        item:
          $ref: '#/components/schemas/account-summary'
      required:
      - item
      title: dynamic-vista-accounts-vista-item-value
      type: object
    dynamic-vista-conversations-vista:
      properties:
        filter:
          $ref: '#/components/schemas/dynamic-vista-conversations-vista-filter'
        items:
          description: Pinned items associated with the vista.
          items:
            $ref: '#/components/schemas/dynamic-vista-conversations-vista-item-value'
          type: array
      required:
      - filter
      title: dynamic-vista-conversations-vista
      type: object
    dynamic-vista-conversations-vista-filter:
      properties:
        applies_to_parts:
          description: |
            Filters for conversations belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_parts_v1:
          description: |
            Filters for conversations belonging to any of the provided parts.
          type: string
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        group_by:
          description: The field to group the collection by.
          type: string
        members:
          description: |
            Filters for conversations where these users are participants.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        members_v1:
          description: |
            Filters for conversations where these users are participants.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters for conversations owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_v1:
          description: Filters for conversations owned by any of these users.
          type: string
        rev_org:
          description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        rev_org_v1:
          description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          type: string
        sla_stage:
          deprecated: true
          description: |
            Filters for conversations with any of the provided SLA stages.
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        source_channels:
          description: |
            Filters for conversations with any of the provided source channels.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: |
            Filters for conversations with any of the provided states.
          items:
            type: string
          type: array
        tags:
          description: Filters for conversations with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_v1:
          description: Filters for conversations with any of the provided tags.
          type: string
        tickets:
          description: |
            Filters for conversations with any of the provided ticket IDs.
          items:
            type: string
          type: array
        tickets_v1:
          description: |
            Filters for conversations with any of the provided ticket IDs.
          type: string
      title: dynamic-vista-conversations-vista-filter
      type: object
    dynamic-vista-conversations-vista-item-value:
      properties:
        item:
          $ref: '#/components/schemas/conversation-summary'
      required:
      - item
      title: dynamic-vista-conversations-vista-item-value
      type: object
    dynamic-vista-filter-type:
      description: Type of DevRev object for which the vista is applicable.
      enum:
      - accounts
      - conversations
      - parts
      - rev_orgs
      - works
      type: string
    dynamic-vista-parts-vista:
      properties:
        filter:
          $ref: '#/components/schemas/dynamic-vista-parts-vista-filter'
        items:
          description: Pinned items associated with the vista.
          items:
            $ref: '#/components/schemas/dynamic-vista-parts-vista-item-value'
          type: array
      required:
      - filter
      title: dynamic-vista-parts-vista
      type: object
    dynamic-vista-parts-vista-filter:
      properties:
        categories:
          description: Filters for parts of the provided categories.
          items:
            $ref: '#/components/schemas/part-category'
          type: array
        created_by:
          description: Filters for parts created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
        created_by_v1:
          description: Filters for parts created by any of these users.
          type: string
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        enhancement:
          $ref: '#/components/schemas/parts-filter-enhancement'
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        name:
          description: Filters for parts of the provided name(s).
          items:
            type: string
          type: array
        owned_by:
          description: Filters for parts owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for parts owned by any of the provided users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids_v1:
          description: Filters for parts owned by any of the provided users.
          type: string
        owned_by_op:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
        owned_by_v1:
          description: Filters for parts owned by any of these users.
          type: string
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: Filters for part with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for parts with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_v1:
          description: Filters for parts with any of the provided tags.
          type: string
        tags:
          description: Filters for part with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
        tags_v1:
          description: Filters for part with any of the provided tags.
          type: string
        type:
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
        types:
          deprecated: true
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      title: dynamic-vista-parts-vista-filter
      type: object
    dynamic-vista-parts-vista-item-value:
      properties:
        item:
          $ref: '#/components/schemas/part-summary'
      required:
      - item
      title: dynamic-vista-parts-vista-item-value
      type: object
    dynamic-vista-rev-orgs-vista:
      properties:
        filter:
          $ref: '#/components/schemas/dynamic-vista-rev-orgs-vista-filter'
        items:
          description: Pinned items associated with the vista.
          items:
            $ref: '#/components/schemas/dynamic-vista-rev-orgs-vista-item-value'
          type: array
      required:
      - filter
      title: dynamic-vista-rev-orgs-vista
      type: object
    dynamic-vista-rev-orgs-vista-filter:
      properties:
        account:
          description: Filters by account.
          items:
            type: string
          type: array
        account_v1:
          description: Filters by account.
          type: string
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_by_v1:
          description: Filters by creator.
          type: string
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        domain:
          description: Array of domain for Rev organizations to be filtered.
          items:
            type: string
          type: array
        environment:
          description: Environment values to be filtered.
          items:
            $ref: '#/components/schemas/org-environment'
          type: array
        external_ref:
          description: List of external refs to filter Rev organizations for.
          items:
            type: string
          type: array
        external_ref_issuer:
          description: |
            Array of external ref issuers for Rev organizations to be filtered.
          items:
            type: string
          type: array
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters by owners.
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters by owners.
          items:
            type: string
          type: array
        owned_by_ids_v1:
          description: Filters by owners.
          type: string
        owned_by_v1:
          description: Filters by owners.
          type: string
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        state:
          description: State values to be filtered.
          items:
            $ref: '#/components/schemas/org-state'
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            Filters on tags. Input will be of the format (tags=<tag id
            1>=<value>&tags=<tag id 2>)
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tier:
          description: Array of tier for Rev organizations to be filtered.
          items:
            type: string
          type: array
        type:
          description: Types of Rev organizations to be filtered.
          items:
            $ref: '#/components/schemas/rev-org-type'
          type: array
      title: dynamic-vista-rev-orgs-vista-filter
      type: object
    dynamic-vista-rev-orgs-vista-item-value:
      properties:
        item:
          $ref: '#/components/schemas/rev-org-summary'
      required:
      - item
      title: dynamic-vista-rev-orgs-vista-item-value
      type: object
    dynamic-vista-works-vista:
      properties:
        filter:
          $ref: '#/components/schemas/dynamic-vista-works-vista-filter'
        items:
          description: Pinned items associated with the vista.
          items:
            $ref: '#/components/schemas/dynamic-vista-works-vista-item-value'
          type: array
      required:
      - filter
      title: dynamic-vista-works-vista
      type: object
    dynamic-vista-works-vista-filter:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids_v1:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          type: string
        ancestor_part_v1:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          type: string
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids_v1:
          description: Filters for work belonging to any of the provided parts.
          type: string
        applies_to_part_v1:
          description: Filters for work belonging to any of the provided parts.
          type: string
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids_v1:
          description: Filters for work created by any of these users.
          type: string
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_by_v1:
          description: Filters for work created by any of these users.
          type: string
        created_date:
          $ref: '#/components/schemas/date-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_v1:
          description: Filters for work excluding the provided work IDs.
          type: string
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids_v1:
          description: Filters for work excluding the provided work IDs.
          type: string
        group_by:
          description: The field to group the collection by.
          type: string
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids_v1:
          description: Filters for work owned by any of these users.
          type: string
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        owned_by_v1:
          description: Filters for work owned by any of these users.
          type: string
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tag_ids_v1:
          description: Filters for work with any of the provided tags.
          type: string
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_v1:
          description: Filters for work with any of the provided tags.
          type: string
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
        vista_v1:
          description: Filters for work belonging to the given vista.
          type: string
      title: dynamic-vista-works-vista-filter
      type: object
    dynamic-vista-works-vista-item-value:
      properties:
        item:
          $ref: '#/components/schemas/work-summary'
      required:
      - item
      title: dynamic-vista-works-vista-item-value
      type: object
    edge-v2:
      properties:
        link_id:
          description: ID of the link. Currently a mocked one.
          type: string
        link_type:
          $ref: '#/components/schemas/link-type'
        source_id:
          description: ID of the source object.
          type: string
        source_id_v1:
          description: ID of the source object.
          type: string
        source_object_type:
          description: Type of source object.
          type: string
        target_id:
          description: ID of target object.
          type: string
        target_id_v1:
          description: ID of target object.
          type: string
        target_object_type:
          description: Type of target object.
          type: string
      required:
      - link_id
      - link_type
      - source_id
      - source_object_type
      - target_id
      - target_object_type
      title: edge-v2
      type: object
    efficap-parts-user-working-on-get-request:
      properties:
        day_end:
          description: |
            Timestamp truncated to a day of the end of the time-frame. Defaults
            to the current day.
          format: date
          type: string
        day_start:
          description: |
            Timestamp truncated to a day of the beginning of the time-frame.
            Defaults to 7 days before end-time.
          format: date
          type: string
        shallow_contributor_threshold:
          description: |
            Specifies the threshold percentage of contribution made by a
            person, which is considered a "primary contributor" if it goes
            above the specified threshold. If the user's contribution falls
            below this threshold they are considered a "shallow contributor".
            The default value is 10%.
          format: float
          maximum: 100
          minimum: 0
          type: number
        timezone_offset:
          description: Timezone offset in seconds east of UTC. Defaults to 0.
          format: int32
          maximum: 86400
          minimum: 0
          type: integer
        user:
          description: |
            Get all parts this given user has been working on within the given
            time-frame. Defaults to authenticated user.
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
      title: efficap-parts-user-working-on-get-request
      type: object
    efficap-response:
      properties:
        work_contributions:
          description: List of contributions made in the provided time-frame.
          items:
            $ref: '#/components/schemas/efficap-work-contribution'
          type: array
      required:
      - work_contributions
      title: efficap-response
      type: object
      x-go-name: EfficapResponseBody
    efficap-users-working-on-part-request:
      properties:
        day_end:
          description: |
            Timestamp truncated to a day of the end of the time-frame. Defaults
            to the current day.
          format: date
          type: string
        day_start:
          description: |
            Timestamp truncated to a day of the beginning of the time-frame.
            Defaults to 7 days before end-time.
          format: date
          type: string
        part:
          description: |
            Get all users that have been working on this part within the given
            time-frame.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        shallow_contributor_threshold:
          description: |
            Specifies the threshold percentage of contribution made by a
            person, which is considered a "primary contributor" if it goes
            above the specified threshold. If the user's contribution falls
            below this threshold they are considered a "shallow contributor".
            The default value is 10%.
          format: float
          maximum: 100
          minimum: 0
          type: number
        timezone_offset:
          description: Timezone offset in seconds east of UTC. Defaults to 0.
          format: int32
          maximum: 86400
          minimum: 0
          type: integer
      required:
      - part
      title: efficap-users-working-on-part-request
      type: object
    efficap-work-contribution:
      properties:
        contribution_percent:
          description: |
            The computed percent of contribution this given user has performed
            on this part (and its sub-parts, if rolled-up) in the given
            time-frame.
          format: float
          maximum: 100
          minimum: 0
          type: number
        is_primary_contributor:
          description: |
            Whether this contributor is considered a "primary contributor" on
            this part (and its sub-parts, if rolled-up) within the provided
            time-frame, based on the provided threshold.
          type: boolean
        issues_with_tickets:
          description: |
            List of issues that are connected to tickets that were contributed
            to in this part (and its sub-parts, if returned by a rolled-up
            call) contribution.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        issues_with_tickets_v1:
          description: |
            List of issues that are connected to tickets that were contributed
            to in this part (and its sub-parts, if returned by a rolled-up
            call) contribution.
          type: string
        issues_without_tickets:
          description: |
            List of issues that are not connected to tickets that were
            contributed to in this part contribution.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        issues_without_tickets_v1:
          description: |
            List of issues that are not connected to tickets that were
            contributed to in this part contribution.
          type: string
        part:
          description: The part this contribution was on.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        part_path:
          description: |
            This will show the display-name of the part when not rolled up.
            When rolled up, will show all display-names in a folder format, up
            to the top-most part. E.g. 'capl-1/feat-2/enh-3'. By sorting on
            this, one can visualize the hierarchy easily.
          type: string
        part_v1:
          description: The part this contribution was on.
          type: string
        user:
          description: The user that made this contribution.
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
        user_v1:
          description: The user that made this contribution.
          type: string
      required:
      - contribution_percent
      - is_primary_contributor
      - issues_with_tickets
      - issues_without_tickets
      - part
      - part_path
      - user
      title: efficap-work-contribution
      type: object
    embed-links-create-request:
      description: |
        The request to create a new link embedded inside another create
        request.
      properties:
        link_type:
          $ref: '#/components/schemas/link-type'
        source:
          description: The ID of the source object.
          type: string
        source_id:
          deprecated: true
          description: The ID of the source object.
          type: string
        target:
          description: The ID of the target object.
          type: string
        target_id:
          deprecated: true
          description: The ID of the target object.
          type: string
        type:
          $ref: '#/components/schemas/link-type'
      title: embed-links-create-request
      type: object
    empty:
      title: empty
      type: object
    engagement:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          common_summary:
            $ref: '#/components/schemas/common-engagement-summary'
          description:
            description: Description of the engagement object.
            type: string
          engagement_type:
            $ref: '#/components/schemas/engagement-type'
          external_url:
            description: External URL associated with the engagement.
            type: string
          meeting_summary:
            $ref: '#/components/schemas/meeting-engagement-summary'
          members:
            description: The users in the engagement.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          parent:
            $ref: '#/components/schemas/atom-summary'
          scheduled_date:
            description: Time at which engagement was scheduled.
            format: date-time
            type: string
          source_id:
            $ref: '#/components/schemas/atom-summary'
          survey_summary:
            $ref: '#/components/schemas/survey-engagement-summary'
          tags:
            description: Tags associated with the object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
          title:
            description: Title of the engagement object.
            type: string
        required:
        - members
        type: object
      title: engagement
    engagement-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: engagement-summary
    engagement-type:
      description: Type of engagement.
      enum:
      - call
      - common
      - email
      - linked_in
      - meeting
      - offline_event
      - other
      - survey
      type: string
    engagements-count-request:
      properties:
        parent:
          description: Filters for engagements with the provided parent.
          items:
            type: string
          type: array
      title: engagements-count-request
      type: object
    engagements-count-response:
      properties:
        count:
          description: The number of engagements matching the filter.
          format: int64
          type: integer
      required:
      - count
      title: engagements-count-response
      type: object
      x-go-name: EngagementsCountResponseBody
    engagements-create-request:
      properties:
        description:
          description: The description of the engagement.
          type: string
        engagement_type:
          $ref: '#/components/schemas/engagement-type'
        external_url:
          description: External URL for the engagement.
          type: string
        members:
          description: IDs of the users that were part of the engagement.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        parent:
          description: |
            The parent object ID in which the engagement was created.
          type: string
        scheduled_date:
          description: The date and time when the engagement was scheduled.
          format: date-time
          type: string
        tags:
          description: Tags associated with the Account.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        title:
          description: The title of the engagement.
          type: string
      required:
      - parent
      - title
      title: engagements-create-request
      type: object
    engagements-create-response:
      properties:
        engagement:
          $ref: '#/components/schemas/engagement'
      required:
      - engagement
      title: engagements-create-response
      type: object
      x-go-name: EngagementsCreateResponseBody
    engagements-delete-request:
      properties:
        id:
          description: The engagement's ID.
          type: string
      required:
      - id
      title: engagements-delete-request
      type: object
    engagements-delete-response:
      title: engagements-delete-response
      type: object
      x-go-name: EngagementsDeleteResponseBody
    engagements-get-request:
      properties:
        id:
          description: The engagement's ID.
          type: string
      required:
      - id
      title: engagements-get-request
      type: object
    engagements-get-response:
      properties:
        engagement:
          $ref: '#/components/schemas/engagement'
      required:
      - engagement
      title: engagements-get-response
      type: object
      x-go-name: EngagementsGetResponseBody
    engagements-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: The maximum number of engagements to return.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        parent:
          description: Filters for engagements with the provided parent.
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the engagements by and the direction to sort them.
          items:
            type: string
          type: array
      title: engagements-list-request
      type: object
    engagements-list-response:
      properties:
        engagements:
          description: The list of engagements.
          items:
            $ref: '#/components/schemas/engagement'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - engagements
      title: engagements-list-response
      type: object
      x-go-name: EngagementsListResponseBody
    engagements-update-request:
      properties:
        description:
          description: Updates the description of the engagement.
          type: string
        external_url:
          description: Updates the external URL for the engagement.
          type: string
        id:
          description: The engagement's ID.
          type: string
        members:
          $ref: '#/components/schemas/engagements-update-request-members'
        scheduled_date:
          description: |
            Updates the date and time when the engagement was scheduled.
          format: date-time
          nullable: true
          type: string
        tags:
          $ref: '#/components/schemas/engagements-update-request-tags'
        title:
          description: Updates the title of the engagement.
          type: string
      required:
      - id
      title: engagements-update-request
      type: object
    engagements-update-request-members:
      properties:
        set:
          description: |
            Sets the members to the provided user IDs. If specified, this must
            not be empty.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: engagements-update-request-members
      type: object
    engagements-update-request-tags:
      properties:
        set:
          description: Sets the provided tags on the engagement item.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: engagements-update-request-tags
      type: object
    engagements-update-response:
      properties:
        engagement:
          $ref: '#/components/schemas/engagement'
      required:
      - engagement
      title: engagements-update-response
      type: object
      x-go-name: EngagementsUpdateResponseBody
    enhancement:
      allOf:
      - $ref: '#/components/schemas/part-base'
      - properties:
          mutation_info:
            $ref: '#/components/schemas/mutation-info-field'
          target_close_date:
            description: Timestamp when the enhancement is expected to be closed.
            format: date-time
            type: string
        type: object
      title: enhancement
    enhancement-summary:
      allOf:
      - $ref: '#/components/schemas/part-base-summary'
      title: enhancement-summary
    entitlement:
      description: |
        Every SKU, will contain a list of entitlements defined under it.
        Entitlement encapsulates 'HOW MUCH and HOW LONG' aspect of the given
        UOM ID under specified SKU.
      properties:
        duration:
          $ref: '#/components/schemas/duration'
        quantity:
          description: |
            Quantity, that the entitlement is entitled to use for the specified
            UOM ID. In case of UOM being a boolean type (like
            inline_compression, SAML, OAUTH) then quantity will simply be 0/1.
          format: int32
          type: integer
        scope:
          $ref: '#/components/schemas/entitlement-scope'
        uom:
          $ref: '#/components/schemas/uom-summary'
      required:
      - scope
      - uom
      title: entitlement
      type: object
    entitlement-scope:
      description: |
        Scope defines whether the entitlement is at org level or at each user
        level. Knowing this will help on enforcing them for the given SKU at
        rev, or at rev user level.
      enum:
      - org
      - user
      type: string
    error:
      properties:
        debug_message:
          description: The debug error message.
          type: string
        message:
          description: Information about the error.
          type: string
        reference_id:
          description: ID that can be used to reference the error occurrence.
          type: string
        status:
          description: The corresponding HTTP status code.
          format: int32
          type: integer
        type:
          description: The error type.
          type: string
      required:
      - message
      - status
      title: error
      type: object
    error-bad-request:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            bad_request: '#/components/schemas/error-bad-request-bad-request'
            invalid_enum_value: '#/components/schemas/error-bad-request-invalid-enum-value'
            invalid_field: '#/components/schemas/error-bad-request-invalid-field'
            missing_required_field: '#/components/schemas/error-bad-request-missing-required-field'
            parse_error: '#/components/schemas/error-bad-request-parse-error'
            value_not_permitted: '#/components/schemas/error-bad-request-value-not-permitted'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-bad-request-bad-request'
        - $ref: '#/components/schemas/error-bad-request-invalid-enum-value'
        - $ref: '#/components/schemas/error-bad-request-invalid-field'
        - $ref: '#/components/schemas/error-bad-request-missing-required-field'
        - $ref: '#/components/schemas/error-bad-request-parse-error'
        - $ref: '#/components/schemas/error-bad-request-value-not-permitted'
        properties:
          type:
            $ref: '#/components/schemas/error-bad-request-type'
        required:
        - type
        type: object
      title: error-bad-request
    error-bad-request-bad-request:
      title: error-bad-request-bad-request
      type: object
    error-bad-request-invalid-enum-value:
      properties:
        allowed_values:
          description: The allowed values for the field.
          items:
            type: string
          type: array
        field_name:
          description: The field whose enum value is invalid.
          type: string
        value:
          description: The value that was received.
          type: string
      required:
      - allowed_values
      - field_name
      - value
      title: error-bad-request-invalid-enum-value
      type: object
    error-bad-request-invalid-field:
      properties:
        field_name:
          description: The field name that's invalid.
          type: string
      required:
      - field_name
      title: error-bad-request-invalid-field
      type: object
    error-bad-request-missing-required-field:
      properties:
        field_name:
          description: The missing field's name.
          type: string
      required:
      - field_name
      title: error-bad-request-missing-required-field
      type: object
    error-bad-request-parse-error:
      title: error-bad-request-parse-error
      type: object
    error-bad-request-type:
      enum:
      - bad_request
      - invalid_enum_value
      - invalid_field
      - missing_required_field
      - parse_error
      - value_not_permitted
      type: string
    error-bad-request-value-not-permitted:
      properties:
        field_name:
          description: The field whose value is not permitted.
          type: string
        reason:
          description: The reason the value isn't permitted.
          type: string
      required:
      - field_name
      title: error-bad-request-value-not-permitted
      type: object
    error-base:
      properties:
        debug_message:
          description: The debug message associated with the error.
          type: string
        message:
          description: The message associated with the error.
          type: string
      title: error-base
      type: object
    error-conflict:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            conflict: '#/components/schemas/error-conflict-conflict'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-conflict-conflict'
        properties:
          type:
            $ref: '#/components/schemas/error-conflict-type'
        required:
        - type
        type: object
      title: error-conflict
    error-conflict-conflict:
      title: error-conflict-conflict
      type: object
    error-conflict-type:
      enum:
      - conflict
      type: string
    error-forbidden:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            forbidden: '#/components/schemas/error-forbidden-forbidden'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-forbidden-forbidden'
        properties:
          type:
            $ref: '#/components/schemas/error-forbidden-type'
        required:
        - type
        type: object
      title: error-forbidden
    error-forbidden-forbidden:
      title: error-forbidden-forbidden
      type: object
    error-forbidden-type:
      enum:
      - forbidden
      type: string
    error-internal-server-error:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            internal_error: '#/components/schemas/error-internal-server-error-internal-error'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-internal-server-error-internal-error'
        properties:
          reference_id:
            description: |
              A unique ID that's generated for the error that can be used for
              inquiry.
            type: string
          stack_trace:
            description: |
              The stack trace at error creation, otherwise empty if not captured.
            format: byte
            type: string
          type:
            $ref: '#/components/schemas/error-internal-server-error-type'
        required:
        - type
        type: object
      title: error-internal-server-error
    error-internal-server-error-internal-error:
      title: error-internal-server-error-internal-error
      type: object
    error-internal-server-error-type:
      enum:
      - internal_error
      type: string
    error-not-found:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            not_found: '#/components/schemas/error-not-found-not-found'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-not-found-not-found'
        properties:
          type:
            $ref: '#/components/schemas/error-not-found-type'
        required:
        - type
        type: object
      title: error-not-found
    error-not-found-not-found:
      title: error-not-found-not-found
      type: object
    error-not-found-type:
      enum:
      - not_found
      type: string
    error-service-unavailable:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            service_unavailable: '#/components/schemas/error-service-unavailable-service-unavailable'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-service-unavailable-service-unavailable'
        properties:
          type:
            $ref: '#/components/schemas/error-service-unavailable-type'
        required:
        - type
        type: object
      title: error-service-unavailable
    error-service-unavailable-service-unavailable:
      title: error-service-unavailable-service-unavailable
      type: object
    error-service-unavailable-type:
      enum:
      - service_unavailable
      type: string
    error-too-many-requests:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            too_many_requests: '#/components/schemas/error-too-many-requests-too-many-requests'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-too-many-requests-too-many-requests'
        properties:
          retry_after:
            description: |
              The number of seconds after which the client should retry.
            format: int64
            type: integer
          type:
            $ref: '#/components/schemas/error-too-many-requests-type'
        required:
        - type
        type: object
      title: error-too-many-requests
    error-too-many-requests-too-many-requests:
      title: error-too-many-requests-too-many-requests
      type: object
    error-too-many-requests-type:
      enum:
      - too_many_requests
      type: string
    error-unauthorized:
      allOf:
      - $ref: '#/components/schemas/error-base'
      - discriminator:
          mapping:
            unauthenticated: '#/components/schemas/error-unauthorized-unauthenticated'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/error-unauthorized-unauthenticated'
        properties:
          type:
            $ref: '#/components/schemas/error-unauthorized-type'
        required:
        - type
        type: object
      title: error-unauthorized
    error-unauthorized-type:
      enum:
      - unauthenticated
      type: string
    error-unauthorized-unauthenticated:
      title: error-unauthorized-unauthenticated
      type: object
    event-account-created:
      properties:
        account:
          $ref: '#/components/schemas/account'
      required:
      - account
      title: event-account-created
      type: object
    event-account-deleted:
      properties:
        id:
          description: The ID of the account that was deleted.
          type: string
        id_v1:
          description: The ID of the account that was deleted.
          type: string
      required:
      - id
      title: event-account-deleted
      type: object
    event-account-updated:
      properties:
        account:
          $ref: '#/components/schemas/account'
        old_account:
          $ref: '#/components/schemas/account'
      required:
      - account
      title: event-account-updated
      type: object
    event-activity:
      description: An event activity.
      properties:
        change_event:
          $ref: '#/components/schemas/timeline-change-event'
      title: event-activity
      type: object
    event-annotated:
      description: Base event for annotated type event.
      properties:
        microflow_action:
          $ref: '#/components/schemas/microflow-action-event'
        part_merge:
          $ref: '#/components/schemas/part-merge-event'
        part_promote:
          $ref: '#/components/schemas/part-promote-event'
        type:
          description: The type of the annotated event.
          type: string
      title: event-annotated
      type: object
    event-article-created:
      properties:
        article:
          $ref: '#/components/schemas/article'
      required:
      - article
      title: event-article-created
      type: object
    event-article-deleted:
      properties:
        id:
          description: The ID of the article that was deleted.
          type: string
        id_v1:
          description: The ID of the article that was deleted.
          type: string
      required:
      - id
      title: event-article-deleted
      type: object
    event-article-updated:
      properties:
        article:
          $ref: '#/components/schemas/article'
        old_article:
          $ref: '#/components/schemas/article'
      required:
      - article
      title: event-article-updated
      type: object
    event-artifact-created:
      properties:
        artifact:
          $ref: '#/components/schemas/artifact'
      required:
      - artifact
      title: event-artifact-created
      type: object
    event-artifact-deleted:
      properties:
        id:
          description: The ID of the artifact that was deleted.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        id_v1:
          description: The ID of the artifact that was deleted.
          type: string
      required:
      - id
      title: event-artifact-deleted
      type: object
    event-artifact-updated:
      properties:
        artifact:
          $ref: '#/components/schemas/artifact'
        old_artifact:
          $ref: '#/components/schemas/artifact'
      required:
      - artifact
      title: event-artifact-updated
      type: object
    event-conversation-created:
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
      required:
      - conversation
      title: event-conversation-created
      type: object
    event-conversation-deleted:
      properties:
        id:
          description: The ID of the conversation that was deleted.
          type: string
        id_v1:
          description: The ID of the conversation that was deleted.
          type: string
      required:
      - id
      title: event-conversation-deleted
      type: object
    event-conversation-updated:
      properties:
        conversation:
          $ref: '#/components/schemas/conversation'
        old_conversation:
          $ref: '#/components/schemas/conversation'
      required:
      - conversation
      title: event-conversation-updated
      type: object
    event-created:
      description: A creation event.
      properties:
        object:
          $ref: '#/components/schemas/atom-summary'
      title: event-created
      type: object
    event-deleted:
      description: A deletion event.
      properties:
        object_id:
          description: The ID correspending to the deleted object.
          type: string
        object_id_v1:
          description: The ID correspending to the deleted object.
          type: string
      title: event-deleted
      type: object
    event-dev-user-created:
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
      - dev_user
      title: event-dev-user-created
      type: object
    event-dev-user-deleted:
      properties:
        id:
          description: The ID of the Dev user that was deleted.
          type: string
        id_v1:
          description: The ID of the Dev user that was deleted.
          type: string
      required:
      - id
      title: event-dev-user-deleted
      type: object
    event-dev-user-updated:
      properties:
        dev_user:
          $ref: '#/components/schemas/dev-user'
        old_dev_user:
          $ref: '#/components/schemas/dev-user'
      required:
      - dev_user
      title: event-dev-user-updated
      type: object
    event-flow-created:
      properties:
        flow:
          $ref: '#/components/schemas/flow'
      required:
      - flow
      title: event-flow-created
      type: object
    event-flow-deleted:
      properties:
        id:
          description: The ID of the flow that was deleted.
          type: string
        id_v1:
          description: The ID of the flow that was deleted.
          type: string
      required:
      - id
      title: event-flow-deleted
      type: object
    event-flow-updated:
      properties:
        flow:
          $ref: '#/components/schemas/flow'
        old_flow:
          $ref: '#/components/schemas/flow'
      required:
      - flow
      title: event-flow-updated
      type: object
    event-link-created:
      properties:
        link:
          $ref: '#/components/schemas/link'
      required:
      - link
      title: event-link-created
      type: object
    event-link-deleted:
      properties:
        id:
          description: The ID of the link that was deleted.
          type: string
        id_v1:
          description: The ID of the link that was deleted.
          type: string
      required:
      - id
      title: event-link-deleted
      type: object
    event-link-updated:
      properties:
        link:
          $ref: '#/components/schemas/link'
        old_link:
          $ref: '#/components/schemas/link'
      required:
      - link
      title: event-link-updated
      type: object
    event-linked:
      description: A linking event.
      properties:
        link:
          $ref: '#/components/schemas/link-summary'
      title: event-linked
      type: object
    event-marketplace-item-created:
      properties:
        marketplace_item:
          $ref: '#/components/schemas/marketplace-item'
      required:
      - marketplace_item
      title: event-marketplace-item-created
      type: object
    event-marketplace-item-deleted:
      properties:
        id:
          description: The ID of the marketplace item that was deleted.
          type: string
        id_v1:
          description: The ID of the marketplace item that was deleted.
          type: string
      required:
      - id
      title: event-marketplace-item-deleted
      type: object
    event-marketplace-item-updated:
      properties:
        marketplace_item:
          $ref: '#/components/schemas/marketplace-item'
        old_marketplace_item:
          $ref: '#/components/schemas/marketplace-item'
      required:
      - marketplace_item
      title: event-marketplace-item-updated
      type: object
    event-part-created:
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
      - part
      title: event-part-created
      type: object
    event-part-deleted:
      properties:
        id:
          description: The ID of the part that was deleted.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        id_v1:
          description: The ID of the part that was deleted.
          type: string
      required:
      - id
      title: event-part-deleted
      type: object
    event-part-updated:
      properties:
        old_part:
          $ref: '#/components/schemas/part'
        part:
          $ref: '#/components/schemas/part'
      required:
      - part
      title: event-part-updated
      type: object
    event-rev-org-created:
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
      - rev_org
      title: event-rev-org-created
      type: object
    event-rev-org-deleted:
      properties:
        id:
          description: The ID of the Rev organization that was deleted.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        id_v1:
          description: The ID of the Rev organization that was deleted.
          type: string
      required:
      - id
      title: event-rev-org-deleted
      type: object
    event-rev-org-updated:
      properties:
        old_rev_org:
          $ref: '#/components/schemas/rev-org'
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
      - rev_org
      title: event-rev-org-updated
      type: object
    event-rev-user-created:
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: event-rev-user-created
      type: object
    event-rev-user-deleted:
      properties:
        id:
          description: The ID of the Rev user that was deleted.
          type: string
        id_v1:
          description: The ID of the Rev user that was deleted.
          type: string
      required:
      - id
      title: event-rev-user-deleted
      type: object
    event-rev-user-updated:
      properties:
        old_rev_user:
          $ref: '#/components/schemas/rev-user'
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: event-rev-user-updated
      type: object
    event-snap-in-created:
      properties:
        snap_in:
          $ref: '#/components/schemas/snap-in'
      required:
      - snap_in
      title: event-snap-in-created
      type: object
    event-snap-in-deleted:
      properties:
        id:
          description: The ID of the snap-in that was deleted.
          type: string
        id_v1:
          description: The ID of the snap-in that was deleted.
          type: string
        timeline_comment_draft:
          $ref: '#/components/schemas/event-snap-in-deleted-timeline-comment-draft'
      required:
      - id
      title: event-snap-in-deleted
      type: object
    event-snap-in-deleted-timeline-comment-draft:
      properties:
        artifacts:
          description: The artifacts for the comment.
          items:
            $ref: '#/components/schemas/artifact-summary'
          type: array
        body:
          description: The comment's body. This may be empty.
          type: string
        body_type:
          $ref: '#/components/schemas/timeline-comment-body-type'
        references:
          description: The objects referenced in the comment.
          items:
            $ref: '#/components/schemas/atom-summary'
          type: array
        snap_kit_body:
          description: The SnapKit Body of the comment.
          type: object
      required:
      - body
      title: event-snap-in-deleted-timeline-comment-draft
      type: object
    event-snap-in-updated:
      properties:
        old_snap_in:
          $ref: '#/components/schemas/snap-in'
        snap_in:
          $ref: '#/components/schemas/snap-in'
      required:
      - snap_in
      title: event-snap-in-updated
      type: object
    event-source:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          auth_connection_id:
            description: |
              The cellarman keyring id storing the auth details for the event
              source.
            type: string
          config:
            description: |
              JSON for the configuration of the event source, it would contain
              which repository, which user, etc.
            type: object
          context_policy:
            $ref: '#/components/schemas/policy-instance'
          db_string:
            description: |
              Stores the db for the event source as a JSON string. This db stores
              things like webhook id, secret etc. and is hidden from user.
            type: string
          metadata:
            description: |
              Any other metadata associated with the event source we might want
              to show in UI.
            type: object
          name:
            description: name given to the event source.
            type: string
          run_policy:
            $ref: '#/components/schemas/policy-instance'
          secret:
            description: |
              The secret corresponding to the event source. Only exposed to user
              if the user needs it while registration.
            type: string
          setup_instructions:
            $ref: '#/components/schemas/event-source-setup-instructions'
          source_id:
            description: |
              ID of the source (flow or snap-in) which created this event soruce.
            type: string
          source_id_v1:
            description: |
              ID of the source (flow or snap-in) which created this event soruce.
            type: string
          status:
            $ref: '#/components/schemas/event-source-status'
          trigger_task_id:
            description: |
              id of the ticker task which is responsible for scheduling this
              event. Relevant for timer-based sources.
            type: string
          trigger_url:
            description: The URL to trigger the event source.
            type: string
          type:
            description: |
              type describes which event source is being instantiated from list
              of event sources we support. It would contain values like
              pd/github/new-or-updated-pull-request, etc.
            type: string
        type: object
      title: event-source
    event-source-create-request:
      properties:
        auth_connection_id:
          description: |
            The cellarman keyring id storing the auth details for the event
            source.
          type: string
        config:
          description: |
            JSON for the configuration of the event source, it would contain
            which repository, which user, etc.
          type: object
        context_policy:
          $ref: '#/components/schemas/create-policy-instance'
        name:
          description: name given to the event source.
          type: string
        run_policy:
          $ref: '#/components/schemas/create-policy-instance'
        setup_instructions:
          $ref: '#/components/schemas/create-event-source-setup-instructions'
        source_id:
          description: |
            ID of the source (flow or snap-in) which created this event soruce.
          type: string
        status:
          $ref: '#/components/schemas/event-source-status'
        type:
          description: |
            type describes which event source is being instantiated from list
            of event sources we support. It would contain values like
            pd/github/new-or-updated-pull-request, etc.
          type: string
      required:
      - type
      title: event-source-create-request
      type: object
    event-source-create-response:
      properties:
        event_source:
          $ref: '#/components/schemas/event-source'
      required:
      - event_source
      title: event-source-create-response
      type: object
      x-go-name: EventSourceCreateResponseBody
    event-source-delete-request:
      properties:
        id:
          description: The event source's ID.
          type: string
        ignore_deactivate_error:
          description: |
            Flag to indicate if the deactivate errors must be ignored.
          type: boolean
      required:
      - id
      title: event-source-delete-request
      type: object
    event-source-get-request:
      properties:
        id:
          description: The event source's ID.
          type: string
      required:
      - id
      title: event-source-get-request
      type: object
    event-source-get-response:
      properties:
        event_source:
          $ref: '#/components/schemas/event-source'
      required:
      - event_source
      title: event-source-get-response
      type: object
      x-go-name: EventSourceGetResponseBody
    event-source-setup-instructions:
      description: Instructions.
      properties:
        content:
          description: Instructions content.
          type: string
        format:
          $ref: '#/components/schemas/instructions-format'
      title: event-source-setup-instructions
      type: object
    event-source-status:
      description: |
        Status of the event source. Disabled event sources return NotFound
        error on triggering.
      enum:
      - active
      - blocked
      - paused
      type: string
    event-source-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: event-source-summary
    event-source-update-request:
      properties:
        auth_connection_id:
          description: |
            The cellarman keyring id storing the auth details for the event
            source.
          type: string
        config:
          description: |
            JSON for the configuration of the event source, it would contain
            which repository, which user, etc.
          type: object
        context_policy:
          $ref: '#/components/schemas/update-policy-instance'
        id:
          description: The event source's ID.
          type: string
        name:
          description: name given to the event source.
          type: string
        run_policy:
          $ref: '#/components/schemas/update-policy-instance'
        setup_instructions:
          $ref: '#/components/schemas/update-event-source-setup-instructions'
        source_id:
          description: |
            ID of the source (flow or snap-in) which created this event soruce.
          type: string
        status:
          $ref: '#/components/schemas/event-source-status'
      required:
      - id
      title: event-source-update-request
      type: object
    event-source-update-response:
      properties:
        event_source:
          $ref: '#/components/schemas/event-source'
      required:
      - event_source
      title: event-source-update-response
      type: object
      x-go-name: EventSourceUpdateResponseBody
    event-sources-delete-scheduled-event-request:
      properties:
        event_key:
          description: The event key for the event which we want to delete.
          type: string
        id:
          description: The event source's ID.
          type: string
      required:
      - event_key
      - id
      title: event-sources-delete-scheduled-event-request
      type: object
    event-sources-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          description: |
            Fields to sort the event sources by and the direction to sort them.
          items:
            type: string
          type: array
        type:
          description: |
            type describes which event source is being instantiated from list
            of event sources we support. It would contain values like
            pd/github/new-or-updated-pull-request, etc.
          items:
            type: string
          type: array
      title: event-sources-list-request
      type: object
    event-sources-list-response:
      properties:
        event_sources:
          description: List of the event sources.
          items:
            $ref: '#/components/schemas/event-source'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - event_sources
      title: event-sources-list-response
      type: object
      x-go-name: EventSourcesListResponseBody
    event-sources-schedule-event-request:
      properties:
        event_key:
          description: |
            A unique key for this event (scoped to an event source) used for
            updating/getting/deleting scheduled events.
          type: string
        event_type:
          description: The type of the event.
          type: string
        id:
          description: The event source's ID.
          type: string
        payload:
          description: The raw payload of the event.
          format: byte
          type: string
        publish_timestamp:
          description: |
            The timestamp (milliseconds since Unix epoch) at which the event
            should be published. Event is guaranteed to be published after
            this. If missing, event is published immediately.
          format: int64
          type: integer
        update_if_exists:
          description: |
            Whether or not to update an existing scheduled event with the same
            event key. If this is false, and an event is already scheduled with
            the same event key, then HTTP 409 Conflict is returned.
          type: boolean
      required:
      - event_type
      - id
      - payload
      title: event-sources-schedule-event-request
      type: object
    event-sources-schedule-event-response:
      properties:
        event_key:
          description: |
            The event key for this event. Auto-generated if the caller didn't
            specify the event key. Empty if event was published immediately.
          type: string
      title: event-sources-schedule-event-response
      type: object
      x-go-name: EventSourcesScheduleEventResponseBody
    event-subscribe:
      properties:
        add:
          description: The event subscriptions that were added.
          items:
            type: string
          type: array
        add_v1:
          description: The event subscriptions that were added.
          type: string
        id:
          description: The ID provided in the subscribe action.
          type: string
        remove:
          description: The event subscriptions that were removed.
          items:
            type: string
          type: array
        remove_v1:
          description: The event subscriptions that were removed.
          type: string
      title: event-subscribe
      type: object
    event-tag-created:
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
      - tag
      title: event-tag-created
      type: object
    event-tag-deleted:
      properties:
        id:
          description: The ID of the tag that was deleted.
          example: don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          type: string
        id_v1:
          description: The ID of the tag that was deleted.
          type: string
      required:
      - id
      title: event-tag-deleted
      type: object
    event-tag-updated:
      properties:
        old_tag:
          $ref: '#/components/schemas/tag'
        tag:
          $ref: '#/components/schemas/tag'
      required:
      - tag
      title: event-tag-updated
      type: object
    event-timeline-entry-created:
      properties:
        entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
      - entry
      title: event-timeline-entry-created
      type: object
    event-timeline-entry-deleted:
      properties:
        id:
          description: The ID of the timeline entry that was deleted.
          type: string
        id_v1:
          description: The ID of the timeline entry that was deleted.
          type: string
      required:
      - id
      title: event-timeline-entry-deleted
      type: object
    event-timeline-entry-updated:
      properties:
        entry:
          $ref: '#/components/schemas/timeline-entry'
        old_entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
      - entry
      title: event-timeline-entry-updated
      type: object
    event-updated:
      description: An update event.
      properties:
        field_deltas:
          description: List of field changes.
          items:
            $ref: '#/components/schemas/field-delta'
          type: array
        object_type:
          description: Type of DevRev object.
          type: string
      title: event-updated
      type: object
    event-user-typing:
      properties:
        object:
          description: |
            The ID of the object that the user is typing in the context of.
          type: string
        object_v1:
          description: |
            The ID of the object that the user is typing in the context of.
          type: string
        timeline_comment_draft:
          $ref: '#/components/schemas/event-user-typing-timeline-comment-draft'
        user:
          $ref: '#/components/schemas/user-summary'
      required:
      - object
      - user
      title: event-user-typing
      type: object
    event-user-typing-timeline-comment-draft:
      properties:
        artifacts:
          description: The artifacts for the comment.
          items:
            $ref: '#/components/schemas/artifact-summary'
          type: array
        body:
          description: The comment's body. This may be empty.
          type: string
        body_type:
          $ref: '#/components/schemas/timeline-comment-body-type'
        references:
          description: The objects referenced in the comment.
          items:
            $ref: '#/components/schemas/atom-summary'
          type: array
        snap_kit_body:
          description: The SnapKit Body of the comment.
          type: object
      required:
      - body
      title: event-user-typing-timeline-comment-draft
      type: object
    event-vista-created:
      properties:
        vista:
          $ref: '#/components/schemas/vista'
      required:
      - vista
      title: event-vista-created
      type: object
    event-vista-deleted:
      properties:
        id:
          description: The ID of the vista that was deleted.
          type: string
        id_v1:
          description: The ID of the vista that was deleted.
          type: string
      required:
      - id
      title: event-vista-deleted
      type: object
    event-vista-updated:
      properties:
        old_vista:
          $ref: '#/components/schemas/vista'
        vista:
          $ref: '#/components/schemas/vista'
      required:
      - vista
      title: event-vista-updated
      type: object
    event-webhook-created:
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
      - webhook
      title: event-webhook-created
      type: object
    event-webhook-deleted:
      properties:
        id:
          description: The ID of the webhook that was deleted.
          example: don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>
          type: string
        id_v1:
          description: The ID of the webhook that was deleted.
          type: string
      required:
      - id
      title: event-webhook-deleted
      type: object
    event-webhook-updated:
      properties:
        old_webhook:
          $ref: '#/components/schemas/webhook'
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
      - webhook
      title: event-webhook-updated
      type: object
    event-work-created:
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
      - work
      title: event-work-created
      type: object
    event-work-deleted:
      properties:
        id:
          description: The ID of the work that was deleted.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
        id_v1:
          description: The ID of the work that was deleted.
          type: string
      required:
      - id
      title: event-work-deleted
      type: object
    event-work-updated:
      properties:
        old_work:
          $ref: '#/components/schemas/work'
        work:
          $ref: '#/components/schemas/work'
      required:
      - work
      title: event-work-updated
      type: object
    execute-snap-kit-action-request:
      properties:
        actions:
          description: List of actions triggered in the request.
          items:
            $ref: '#/components/schemas/snap-kit-action-request'
          type: array
        parent:
          description: Parent ID to which snap kit body belongs to.
          type: string
        snap_kit_body:
          description: The SnapKit body.
          type: object
      required:
      - actions
      - snap_kit_body
      title: execute-snap-kit-action-request
      type: object
    execute-snap-kit-action-response:
      title: execute-snap-kit-action-response
      type: object
      x-go-name: ExecuteSnapKitActionResponseBody
    experience-flags-get-request:
      title: experience-flags-get-request
      type: object
    experience-flags-get-response:
      properties:
        airdrop_imports_enabled:
          description: |
            Whether DevOrg on specific environment can create migration units
            and see airdrop imports tab.
          type: boolean
        airdrop_linear_enabled:
          description: Whether Linear Airdrop is enabled.
          type: boolean
        airdrop_periodic_sync_enabled:
          description: Whether Airdrop periodic sync is enabled.
          type: boolean
        airdrop_target_work_type_selection_enabled:
          description: |
            Whether UI should offer for selected source systems the ability to
            decide between importing as different work types
          type: boolean
        airdrop_zendesk_enabled:
          description: Whether the zendesk connection feature is enabled.
          type: boolean
        app_id_and_secret_section_enabled:
          description: Whether the app id and secret section is enabled
          type: boolean
        artifacts_v2_enabled:
          description: Whether the artifacts v2 feature is enabled.
          type: boolean
        aws_connection_enabled:
          description: Whether creating AWS connections is enabled in the UI.
          type: boolean
        bitbucket_connection_enabled:
          description: Whether the bitbucket connection feature is enabled.
          type: boolean
        capture_phone_number_enabled:
          description: Whether capture phone number workflow is enabled.
          type: boolean
        cellarman_capabilities_enabled:
          description: |
            Whether Cellarman's capabilities API uses Archon feature flags
          type: boolean
        clearbit_connection_enabled:
          description: Whether the clearbit connection feature is enabled.
          type: boolean
        conversation_translation_enabled:
          description: Whether conversation translation is enabled.
          type: boolean
        default_objects_creation_enabled:
          description: |
            Whether creation of default objects during onboarding is enabled.
          type: boolean
        default_vista_enabled:
          description: Whether default vistas are enabled or not.
          type: boolean
        dev_org_create_allowed:
          description: Whether Dev organization creation is allowed.
          type: boolean
        devorg_environment_enabled:
          description: Whether the devorg environment can be set.
          type: boolean
        discord_connection_enabled:
          description: Whether the discord connection feature is enabled.
          type: boolean
        domain_based_access_enabled:
          description: |
            Whether the domain based access option is available to the user on
            the basis of email.
          type: boolean
        domain_based_join_workflow_enabled:
          description: |
            Whether to enable the domain based join organization workflow.
          type: boolean
        enable_mfz:
          description: Whether MFZ is enabled.
          type: boolean
        enable_mfz_permissions:
          description: Whether MFZ permissions are enabled.
          type: boolean
        enhancement_creation_enabled:
          description: Whether enhancement creaiton is enabled.
          type: boolean
        flow_mfz_enabled:
          description: Whether MFZ is enabled for flows object type.
          type: boolean
        flows_connections_v2_enabled:
          description: |
            Whether the cellarman api for connections is enabled for flows.
          type: boolean
        flows_enabled:
          description: Whether flows are enabled or not.
          type: boolean
        initials_profile_pic_enabled:
          description: Whether to load default profile pic as initials
          type: boolean
        intercom_connection_enabled:
          description: Whether the intercom connection feature is enabled.
          type: boolean
        invitation_enabled:
          description: Whether the invitation workflow is enabled.
          type: boolean
        kubernetes_connection_enabled:
          description: |
            Whether creating Kubernetes connections is enabled in the UI.
          type: boolean
        link_profile_enabled:
          description: Whether the link devuser to profile workflow is enabled.
          type: boolean
        lobby_conversation_type_enabled:
          description: Whether to use lobby of conversation object type.
          type: boolean
        login_sequence:
          description: Login sequence that's used to force re-logins.
          format: int64
          type: integer
        maintenance_message:
          description: |
            The maintenance message that should be displayed to the user.
          type: string
        merge_devuser_enabled:
          description: Whether to enable the merge devuser workflow.
          type: boolean
        mutate_timeline_events_enabled:
          description: Whether Mutate Parts events in timeline is enabled.
          type: boolean
        nux_workflow:
          description: New user experience (NUX) workflow information.
          type: object
        part_archive_hierarchy_enabled:
          description: Whether the part hierarchy will be deleted
          type: boolean
        parts_discovery_enabled:
          description: Whether parts discovery is enabled in the UI.
          type: boolean
        passwordless_enabled:
          description: Whether password-less logins are enabled or not.
          type: boolean
        plug_domain_input_enabled:
          description: Whether plug domain input is enabled
          type: boolean
        plug_platform_integration_enabled:
          description: |
            Whether new plug platform is integrated in devrev product
          type: boolean
        plug_platform_setup_setting_enabled:
          description: Whether new plug platform setup setting is enabled.
          type: boolean
        plug_widget_articles_search_enabled:
          description: |
            Whether the search articles feature on plug widget is enabled
          type: boolean
        plug_widget_rev_user_notifications_enabled:
          description: |
            Whether the rev user notifications on plug widget are enabled
          type: boolean
        publish_post_login_event:
          description: Whether to publish post login events to blubox.
          type: boolean
        push_notifications_enabled:
          description: Whether push notifications are enabled.
          type: boolean
        sandbox_devorg:
          description: Whether this devOrg is for sandbox/demo use or not.
          type: boolean
        sendgrid_connection_enabled:
          description: Whether the sendgrid connection feature is enabled.
          type: boolean
        service_plan_details_enabled:
          description: Weather the plans page for pricing is enabled.
          type: boolean
        session_replay_masking_enabled:
          description: |
            Whether masking for the session replay feature is enabled.
          type: boolean
        session_replays_enabled:
          description: Whether the session replays feature is enabled.
          type: boolean
        stage_v2_enabled:
          description: Whether stage v2 is enabled.
          type: boolean
        sts_token_enabled:
          description: |
            Whether to enable sts token based authentication in api requests.
          type: boolean
        ui_accounts_enabled:
          description: Whether Accounts is enabled
          type: boolean
        ui_accounts_search_enabled:
          description: Whether Account global context  is enabled on the UI.
          type: boolean
        ui_analytics_enabled:
          description: Whether Analytics is enabled
          type: boolean
        ui_build_insights_enabled:
          description: Whether Build Insights is enabled.
          type: boolean
        ui_bulk_create_enhancement_enabled:
          description: |
            Whether creation of enhancement from bulk issues/tickets enabled.
          type: boolean
        ui_bulk_import_revorgs_enabled:
          description: Whether Bulk Import Revorgs is enabled in the UI.
          type: boolean
        ui_cache_clear_sequence:
          description: |
            Cache clear sequence that's used to force clear UI cache and
            reload.
          format: int64
          type: integer
        ui_clustering_threshold:
          description: Threshold below which clustering should enabled in UI.
          format: int64
          type: integer
        ui_commerce_enabled:
          description: Whether commerce is enabled or not.
          type: boolean
        ui_connections_popup_enabled:
          description: |
            Whether connections should use popup for connections requiring
            redirects.
          type: boolean
        ui_core_search_enabled:
          description: Whether Core Search is enabled
          type: boolean
        ui_credits_flow_enabled:
          description: Whether the credits dev org workflow is enabled in UI.
          type: boolean
        ui_custom_emojis_enabled:
          description: Whether Custom Emojis is enabled on the UI.
          type: boolean
        ui_custom_filters_enabled:
          description: Whether new custom filter is enabled on the UI.
          type: boolean
        ui_custom_groups_enabled:
          description: Whether custom groups are enabled
          type: boolean
        ui_custom_range_filter_enabled:
          description: |
            Whether custom range filter for date is enabled on the UI
          type: boolean
        ui_custom_stages_enabled:
          description: Whether Custom Stages are enabled on the UI.
          type: boolean
        ui_customization_admin_enabled:
          description: Whether customization admin ui is enabled or not.
          type: boolean
        ui_customization_enabled:
          description: Whether customization is enabled.
          type: boolean
        ui_delete_dev_org_enabled:
          description: Whether delete devOrg feature is enabled.
          type: boolean
        ui_dev_org_logo_v2_enabled:
          description: Whether artifacts v2 based dev-org logo enabled.
          type: boolean
        ui_dev_user_status_enabled:
          description: Whether Dev user status is enabled
          type: boolean
        ui_devrev_pat_connection_enabled:
          description: Whether the DevRev PAT connection is enabled.
          type: boolean
        ui_discovery_page_enabled:
          description: Whether discovery page is enabled on the UI
          type: boolean
        ui_domain_verification_connection_enabled:
          description: Whether domain verification connection is enabled.
          type: boolean
        ui_engagement_enabled:
          description: Whether engagements are enabled
          type: boolean
        ui_faqs_enabled:
          description: Whether the FAQs feature is enabled in UI.
          type: boolean
        ui_flows_config_event_source_enabled:
          description: |
            Whether event source selection/creation is enabled in flows
            configuration on the UI
          type: boolean
        ui_flows_editor_enabled:
          description: Whether the Flows editor feature is enabled.
          type: boolean
        ui_flows_event_source_v2_enabled:
          description: Whether event source V2 API is enabled on the UI.
          type: boolean
        ui_group_by_parts_hierarchy_enabled:
          description: |
            Whether displaying parts hierarchy on grouping by parts is enabled
          type: boolean
        ui_grouped_work_vistas_enabled:
          description: Whether grouped work vistas is enabled on the UI.
          type: boolean
        ui_growth_os_enabled:
          description: Whether GrowthOS is enabled.
          type: boolean
        ui_hide_rev_orgs_enabled:
          description: Whether hiding of rev-orgs is enabled on the UI.
          type: boolean
        ui_huddle_enabled:
          description: Whether the huddle feature is enabled in UI.
          type: boolean
        ui_invoices_flow_enabled:
          description: Whether commerce admin invoices flow is enabled or not.
          type: boolean
        ui_knowledge_v2_enabled:
          description: Whether knowledge v2 is enabled
          type: boolean
        ui_light_mode_enabled:
          description: Whether to enable the light mode.
          type: boolean
        ui_link_bitbucket_account_enabled:
          description: Whether to enable link bitbucket account button in UI.
          type: boolean
        ui_link_external_identities_enabled:
          description: |
            Whether to enable link external identities in accounts in UI.
          type: boolean
        ui_link_github_account_enabled:
          description: Whether to enable link github account button in UI.
          type: boolean
        ui_lock:
          description: Whether the UI is locked.
          type: boolean
        ui_manual_create_revorgs_enabled:
          description: Whether Manual creation of revorg is enabled.
          type: boolean
        ui_new_snap_enabled:
          description: Whether the new Snap UI is enabled.
          type: boolean
        ui_now_vista_insights_page_enabled:
          description: Whether Now vista insights page is enabled in UI.
          type: boolean
        ui_opportunity_enabled:
          description: Whether Opportunity is enabled on the UI.
          type: boolean
        ui_part_hierarchy_works_filter_enabled:
          description: |
            Whether the work items of children parts are also shown on filter
            by a part.
          type: boolean
        ui_part_insights_enabled:
          description: Whether part insights are enabled.
          type: boolean
        ui_remove_cache_last_used_org:
          description: Whether to enable caching of last used org in the UI
          type: boolean
        ui_rev_customization_enabled:
          description: Whether Rev Customization is enabled
          type: boolean
        ui_rev_dev0_fields_enabled:
          description: Flag to control dev0 specific fields.
          type: boolean
        ui_rev_environment_edit_enabled:
          description: Whether Environment field for revorg is editable.
          type: boolean
        ui_rev_environment_enabled:
          description: Whether Environment field for revorg is enabled.
          type: boolean
        ui_rev_groupby_enabled:
          description: Whether GroupBy is enabled for rev
          type: boolean
        ui_rev_insights_enabled:
          description: Whether rev insights is enabled on the UI.
          type: boolean
        ui_rev_org_tier_stock_field:
          description: Whether tier stock field is enabled for rev orgs in UI.
          type: boolean
        ui_revu_delete_enabled:
          description: Whether Rev user delete is enabled on the UI.
          type: boolean
        ui_slas_enabled:
          description: Whether the SLAs widget is enabled on the UI.
          type: boolean
        ui_sprint_board_enabled:
          description: Whether sprint board is enabled on the UI.
          type: boolean
        ui_sprint_insights_enabled:
          description: Whether Sprint Insights is enabled on the UI.
          type: boolean
        ui_streaming_comments_enabled:
          description: Whether streaming comments are enabled on the UI.
          type: boolean
        ui_ticket_clustering_enabled:
          description: Whether ticket clustering is enabled on the UI
          type: boolean
        ui_trails_v2_enabled:
          description: Whether trails v2 experience is enabled in the UI
          type: boolean
        ui_user_preferences_enabled:
          description: Whether User Preferences are enabled on the UI.
          type: boolean
        ui_v2_work_enabled:
          description: Whether to use v2 work components in UI.
          type: boolean
        ui_version:
          description: The current UI version.
          type: string
        ui_web_for_mobile:
          description: Whether web is enabled for mobile
          type: boolean
        vista_dynamic_reordering_enabled:
          description: whether reordering on dynamic vistas is enabled.
          type: boolean
        vista_mfz_enabled:
          description: Whether MFZ is enabled for vistas object type.
          type: boolean
        vista_scoping_enabled:
          description: Whether vista scoping is enabled.
          type: boolean
        work_subscribers_field_enabled:
          description: Whether subscribers are shown in work panel.
          type: boolean
      title: experience-flags-get-response
      type: object
      x-go-name: ExperienceFlagsGetResponseBody
    external-identity:
      description: External identity of a user.
      properties:
        display_name:
          description: Display name of the user in the external source.
          type: string
        id:
          description: Unique ID of the user in the external source.
          type: string
        issuer:
          description: Issuer of the external identity of the user.
          type: string
        state:
          $ref: '#/components/schemas/external-identity-state'
      title: external-identity
      type: object
    external-identity-state:
      description: State of the user in the external source.
      enum:
      - active
      - deleted
      - inactive
      type: string
    external-orgs-list-request:
      properties:
        id:
          description: The keyring's ID.
          type: string
      required:
      - id
      title: external-orgs-list-request
      type: object
    external-orgs-list-response:
      properties:
        external_orgs:
          items:
            $ref: '#/components/schemas/external-orgs-list-response-external-org'
          type: array
      required:
      - external_orgs
      title: external-orgs-list-response
      type: object
      x-go-name: ExternalOrgsListResponseBody
    external-orgs-list-response-external-org:
      properties:
        id:
          type: string
        name:
          type: string
      required:
      - id
      - name
      title: external-orgs-list-response-external-org
      type: object
    extractors:
      description: Configuration knobs for extractors.
      properties:
        config:
          description: Discovery clues extractors configuration.
          type: object
        dev:
          description: |
            Discovery mapping from a source name to a dev clue extractor.
          type: object
        rev:
          description: |
            Discovery mapping from a source name to a rev clue extractor.
          type: object
      title: extractors
      type: object
    feature:
      allOf:
      - $ref: '#/components/schemas/part-base'
      - properties:
          api_endpoints:
            description: Associated API endpoints.
            items:
              $ref: '#/components/schemas/api-endpoint'
            type: array
          api_parameters_summary:
            description: Associated API parameters.
            items:
              type: string
            type: array
          api_prefix_summary:
            description: Common Path Denominators of the Api Operations.
            items:
              type: string
            type: array
          development_owner:
            $ref: '#/components/schemas/user-summary'
          discovery_confidence:
            description: |
              A confidence score computed by the inference engine. Currently, the
              score is not normalized across different part inferences. Until
              this is improved, this should only be comparable to confidence of
              same part type.
            format: double
            type: number
          discovery_evidences:
            description: |
              A evidences that the inferer were able to find that justify the
              inference outcome.
            items:
              type: string
            type: array
          discovery_last_inferred_at:
            description: The time when this inference occurred.
            format: date-time
            type: string
          fulfilled_by:
            description: IDs of the runnables that fulfill this feature.
            items:
              $ref: '#/components/schemas/part-summary'
            type: array
          part_of_part:
            $ref: '#/components/schemas/part-summary'
          pm_owner:
            $ref: '#/components/schemas/user-summary'
          qa_owner:
            $ref: '#/components/schemas/user-summary'
          versions:
            description: Versions of the feature.
            items:
              type: string
            type: array
        type: object
      title: feature
    feature-api-operation-http-operation:
      description: |
        The HTTP Operations that can be assigned to a Feature's API Operation.
      enum:
      - connect
      - delete
      - get
      - head
      - options
      - patch
      - post
      - put
      - trace
      - unknown
      type: string
    feature-pin-summary:
      allOf:
      - $ref: '#/components/schemas/part-pin-base-summary'
      title: feature-pin-summary
    feature-summary:
      allOf:
      - $ref: '#/components/schemas/part-base-summary'
      title: feature-summary
    field-delta:
      description: A field change.
      properties:
        name:
          description: The name of the field.
          type: string
        new_value:
          $ref: '#/components/schemas/field-value'
        old_value:
          $ref: '#/components/schemas/field-value'
      title: field-delta
      type: object
    field-descriptor:
      description: Set of field attributes.
      properties:
        default_value:
          description: The default value for this field.
          type: object
        description:
          description: Description of the field.
          type: string
        devrev_composite_type:
          description: Composite type.
          type: string
        devrev_enum:
          description: Allowed values for a string or []string type.
          items:
            type: string
          type: array
        devrev_field_type:
          description: DevRev field type.
          type: string
        devrev_id_type:
          description: Object ID types.
          items:
            type: string
          type: array
        gateway:
          $ref: '#/components/schemas/field-gateway-metadata'
        is_filterable:
          description: |
            Whether this field is filterable, groupable and sortable.
          type: boolean
        is_pii:
          description: Whether this field can hold PII.
          type: boolean
        is_required:
          description: Whether this field is required or not.
          type: boolean
        is_system:
          description: Whether this field is a system field or not.
          type: boolean
        name:
          description: Name of the field.
          type: string
        origin:
          description: Field origin type.
          type: string
        ui:
          $ref: '#/components/schemas/field-ui-metadata'
        validation:
          $ref: '#/components/schemas/field-validation'
      title: field-descriptor
      type: object
    field-devrev-enum-group:
      description: Enum group information.
      properties:
        group_key:
          description: enum group key.
          type: string
        is_header_visible:
          description: true if header is visible.
          type: boolean
        label:
          description: label of the field.
          type: string
      title: field-devrev-enum-group
      type: object
    field-filter:
      properties:
        key:
          description: Key or field name for the filter.
          type: string
        value:
          description: Value to be provided for the filter.
          type: object
      required:
      - key
      - value
      title: field-filter
      type: object
    field-gateway-metadata:
      description: The schema of gateway specific fields.
      properties:
        api_name:
          description: Gateway api name of the field.
          type: string
      title: field-gateway-metadata
      type: object
    field-privilege:
      properties:
        name:
          $ref: '#/components/schemas/field-privilege-field-privilege-enum'
      required:
      - name
      title: field-privilege
      type: object
    field-privilege-field-privilege-enum:
      enum:
      - read
      - write
      type: string
    field-privileges:
      description: Field Privileges.
      properties:
        read:
          description: List of fields with the read privilege.
          items:
            type: string
          type: array
        write:
          description: List of fields with the write privilege.
          items:
            type: string
          type: array
      title: field-privileges
      type: object
    field-ui-metadata:
      description: The schema of ui specific fields.
      properties:
        allowed_values:
          description: Allowed values of the field.
          items:
            type: string
          type: array
        create_view:
          $ref: '#/components/schemas/create-view-ui-metadata'
        dependent_fields:
          description: Fields on which this field depends on.
          items:
            type: string
          type: array
        detail_view:
          $ref: '#/components/schemas/detail-view-ui-metadata'
        devrev_enum_groups:
          description: enum groups.
          items:
            $ref: '#/components/schemas/devrev-enum-group'
          type: array
        display_name:
          description: display name of the field.
          type: string
        filter_view:
          $ref: '#/components/schemas/filter-view-ui-metadata'
        is_active_in_detail_view:
          description: Whether field is active in detail view.
          type: boolean
        is_base_field:
          description: Whether stock field is rendered at top.
          type: boolean
        is_bulk_action_enabled:
          description: Whether field supports bulk action.
          type: boolean
        is_currency_field:
          description: Indicates if the field holds a currency value in USD.
          type: boolean
        is_groupable:
          description: Whether field is groupable.
          type: boolean
        is_hidden:
          description: Whether field is hidden in UI.
          type: boolean
        is_hidden_during_create:
          description: Whether field is hidden in UI during creation.
          type: boolean
        is_read_only:
          description: Whether field is read-only in UI.
          type: boolean
        is_shown_in_summary:
          description: Whether field is shown in summary.
          type: boolean
        is_sortable:
          description: Whether field is sortable.
          type: boolean
        list_view:
          $ref: '#/components/schemas/list-view-ui-metadata'
        order:
          description: Order in which field is shown.
          format: int32
          type: integer
        placeholder:
          description: Placeholder for the field.
          type: string
        summary_view:
          $ref: '#/components/schemas/summary-view-ui-metadata'
        tooltip:
          description: Tooltip for field.
          type: string
        unit:
          description: Unit of measurment.
          type: string
      title: field-ui-metadata
      type: object
    field-validation:
      description: Validation annotations.
      properties:
        contains:
          description: string contains.
          type: string
        disabled:
          description: disables validations for this field.
          type: boolean
        eq_items:
          description: exact array length.
          format: int32
          type: integer
        eq_len:
          description: exact string length.
          format: int32
          type: integer
        gt:
          description: int must be greater than this.
          format: int32
          type: integer
        gte:
          description: int must be greater or equal than this.
          format: int32
          type: integer
        lt:
          description: int must be less than this.
          format: int32
          type: integer
        lte:
          description: int must be less or equal than this.
          format: int32
          type: integer
        max_items:
          description: maximum array length.
          format: int32
          type: integer
        max_len:
          description: maximum string length.
          format: int32
          type: integer
        min_items:
          description: minimum array length.
          format: int32
          type: integer
        min_len:
          description: minimum string length.
          format: int32
          type: integer
        pattern:
          description: string pattern (re).
          type: string
        prefix:
          description: string prefix.
          type: string
        suffix:
          description: string suffix.
          type: string
      title: field-validation
      type: object
    field-value:
      discriminator:
        mapping:
          bool: '#/components/schemas/field-value-bool'
          bool_list: '#/components/schemas/field-value-bool-list'
          composite: '#/components/schemas/field-value-composite'
          date: '#/components/schemas/field-value-date-value'
          date_list: '#/components/schemas/field-value-date-list'
          date_time: '#/components/schemas/field-value-date-time-value'
          date_time_list: '#/components/schemas/field-value-date-time-list'
          double: '#/components/schemas/field-value-double'
          double_list: '#/components/schemas/field-value-double-list'
          id: '#/components/schemas/field-value-id'
          id_list: '#/components/schemas/field-value-id-list'
          int: '#/components/schemas/field-value-int64'
          int_list: '#/components/schemas/field-value-int64-list'
          stage: '#/components/schemas/field-value-stage'
          string: '#/components/schemas/field-value-string'
          string_list: '#/components/schemas/field-value-string-list'
          tag_summary: '#/components/schemas/field-value-tag-summary'
          tag_summary_list: '#/components/schemas/field-value-tag-summary-list'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/field-value-bool'
      - $ref: '#/components/schemas/field-value-bool-list'
      - $ref: '#/components/schemas/field-value-composite'
      - $ref: '#/components/schemas/field-value-date-list'
      - $ref: '#/components/schemas/field-value-date-time-list'
      - $ref: '#/components/schemas/field-value-date-time-value'
      - $ref: '#/components/schemas/field-value-date-value'
      - $ref: '#/components/schemas/field-value-double'
      - $ref: '#/components/schemas/field-value-double-list'
      - $ref: '#/components/schemas/field-value-id'
      - $ref: '#/components/schemas/field-value-id-list'
      - $ref: '#/components/schemas/field-value-int64'
      - $ref: '#/components/schemas/field-value-int64-list'
      - $ref: '#/components/schemas/field-value-stage'
      - $ref: '#/components/schemas/field-value-string'
      - $ref: '#/components/schemas/field-value-string-list'
      - $ref: '#/components/schemas/field-value-tag-summary'
      - $ref: '#/components/schemas/field-value-tag-summary-list'
      properties:
        placeholder:
          type: string
        type:
          $ref: '#/components/schemas/field-value-type'
      required:
      - type
      title: field-value
      type: object
    field-value-bool:
      properties:
        value:
          type: boolean
      required:
      - value
      title: field-value-bool
      type: object
    field-value-bool-list:
      properties:
        values:
          items:
            type: boolean
          type: array
      required:
      - values
      title: field-value-bool-list
      type: object
    field-value-composite:
      properties:
        fields:
          $ref: '#/components/schemas/field-value-composite-fields-entry'
      required:
      - fields
      title: field-value-composite
      type: object
    field-value-composite-fields-entry:
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/field-value'
      required:
      - key
      - value
      title: field-value-composite-fields-entry
      type: object
    field-value-date-list:
      properties:
        values:
          items:
            format: date
            type: string
          type: array
      required:
      - values
      title: field-value-date-list
      type: object
    field-value-date-time-list:
      properties:
        values:
          items:
            format: date-time
            type: string
          type: array
      required:
      - values
      title: field-value-date-time-list
      type: object
    field-value-date-time-value:
      properties:
        value:
          format: date-time
          type: string
      required:
      - value
      title: field-value-date-time-value
      type: object
    field-value-date-value:
      properties:
        value:
          format: date
          type: string
      required:
      - value
      title: field-value-date-value
      type: object
    field-value-double:
      properties:
        value:
          format: double
          type: number
      required:
      - value
      title: field-value-double
      type: object
    field-value-double-list:
      properties:
        values:
          items:
            format: double
            type: number
          type: array
      required:
      - values
      title: field-value-double-list
      type: object
    field-value-id:
      properties:
        value:
          type: string
        value_v1:
          type: string
      required:
      - value
      title: field-value-id
      type: object
    field-value-id-list:
      properties:
        values:
          items:
            type: string
          type: array
        values_v1:
          type: string
      required:
      - values
      title: field-value-id-list
      type: object
    field-value-int64:
      properties:
        value:
          format: int64
          type: integer
      required:
      - value
      title: field-value-int64
      type: object
    field-value-int64-list:
      properties:
        values:
          items:
            format: int64
            type: integer
          type: array
      required:
      - values
      title: field-value-int64-list
      type: object
    field-value-stage:
      properties:
        name:
          type: string
        notes:
          type: string
      title: field-value-stage
      type: object
    field-value-string:
      properties:
        value:
          type: string
      required:
      - value
      title: field-value-string
      type: object
    field-value-string-list:
      properties:
        values:
          items:
            type: string
          type: array
      required:
      - values
      title: field-value-string-list
      type: object
    field-value-tag-summary:
      properties:
        name:
          type: string
        style:
          type: string
        tag_id:
          type: string
        tag_id_v1:
          type: string
      required:
      - tag_id
      title: field-value-tag-summary
      type: object
    field-value-tag-summary-list:
      properties:
        values:
          items:
            $ref: '#/components/schemas/field-value-tag-summary'
          type: array
      required:
      - values
      title: field-value-tag-summary-list
      type: object
    field-value-type:
      enum:
      - bool
      - bool_list
      - composite
      - date
      - date_list
      - date_time
      - date_time_list
      - double
      - double_list
      - id
      - id_list
      - int
      - int_list
      - stage
      - string
      - string_list
      - tag_summary
      - tag_summary_list
      type: string
    file:
      description: Defines a file object.
      properties:
        key:
          description: S3 key for the file.
          type: string
        name:
          description: Name of the file.
          type: string
        size:
          description: Size of the file in bytes.
          format: int32
          type: integer
        type:
          description: Type of the file.
          type: string
      title: file
      type: object
    filter-view-ui-metadata:
      description: Filter view UI hint overrides.
      properties:
        is_hidden:
          description: Whether field is hidden in UI.
          type: boolean
      title: filter-view-ui-metadata
      type: object
    flow:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          automations:
            description: List of automations used in the flow.
            items:
              $ref: '#/components/schemas/flow-name-reference-mapping'
            type: array
          commands:
            description: List of commands used in the flow.
            items:
              $ref: '#/components/schemas/flow-name-reference-mapping'
            type: array
          connections:
            description: List of connections used in the flow.
            items:
              $ref: '#/components/schemas/flow-name-value-pair'
            type: array
          description:
            description: Description of the flow.
            type: string
          event_sources:
            description: List of event sources used in the flow.
            items:
              $ref: '#/components/schemas/flow-name-reference-mapping'
            type: array
          flow_config:
            $ref: '#/components/schemas/flow-config'
          inputs:
            description: |
              List of inputs to be provided from the user to be used in the flow.
            items:
              $ref: '#/components/schemas/global-input'
            type: array
          inputs_snap_kit:
            description: Snap-kit for the inputs part of flow.
            type: object
          marketplace_item:
            $ref: '#/components/schemas/marketplace-item-summary'
          marketplace_item_version:
            description: |
              Version of the Marketplace Item template through which this flow
              was installed.
            type: string
          name:
            description: Name of the flow.
            type: string
          raw_template:
            description: Raw template which created the flow.
            type: string
          secrets:
            description: List of secrets used in the flow.
            items:
              $ref: '#/components/schemas/flow-name-reference-mapping'
            type: array
          service_account:
            description: Service account associated with this flow.
            type: string
          service_account_v1:
            description: Service account associated with this flow.
            type: string
          setup_resources:
            description: List of resources created as part of the flow.
            items:
              $ref: '#/components/schemas/flow-setup-resource'
            type: array
          snap_kit_actions:
            description: |
              List of snapkit actions used in the flow. An snapkit action is a
              synchronous code path called when an interactive element on the
              snap-kit is interacted with. Interactive elements include buttons,
              checkboxes, date-pickers etc. A snapkit action is defined as change
              in value of these elements.
            items:
              $ref: '#/components/schemas/flow-name-reference-mapping'
            type: array
          status:
            $ref: '#/components/schemas/flow-status'
        type: object
      title: flow
    flow-config:
      properties:
        connections:
          description: List of connections in flow definition.
          items:
            $ref: '#/components/schemas/flow-connection'
          type: array
        event_sources:
          description: List of event sources in flow definition.
          items:
            $ref: '#/components/schemas/flow-event-source'
          type: array
        global_inputs:
          description: List of inputs in flow definition.
          items:
            $ref: '#/components/schemas/flow-global-input'
          type: array
        secrets:
          description: List of secrets in flow definition.
          items:
            $ref: '#/components/schemas/flow-secret'
          type: array
      title: flow-config
      type: object
    flow-connection:
      properties:
        display_name:
          description: Display name of connection in flow definition.
          type: string
        name:
          description: Name of connection in flow definition.
          type: string
        types:
          description: List of keyring types this connection can be.
          items:
            type: string
          type: array
      required:
      - name
      - types
      title: flow-connection
      type: object
    flow-delete-request:
      properties:
        id:
          description: The flow's ID.
          type: string
      required:
      - id
      title: flow-delete-request
      type: object
    flow-event-source:
      properties:
        display_name:
          description: Display name of event source in flow definition.
          type: string
        name:
          description: Name of event source in flow definition.
          type: string
        type:
          description: Type of event source in flow definition.
          type: string
      required:
      - name
      - type
      title: flow-event-source
      type: object
    flow-get-request:
      properties:
        id:
          description: The flow's ID.
          type: string
      required:
      - id
      title: flow-get-request
      type: object
    flow-get-response:
      properties:
        flow:
          $ref: '#/components/schemas/flow'
      required:
      - flow
      title: flow-get-response
      type: object
      x-go-name: FlowGetResponseBody
    flow-global-input:
      properties:
        allowed_values:
          description: Allowed values for the input.
          items:
            type: string
          type: array
        default_value:
          description: Default value for the input.
          type: string
        description:
          description: Description of the input value.
          type: string
        display_name:
          description: Display name for the input.
          type: string
        name:
          description: Name of input in the flow definition.
          type: string
        type:
          $ref: '#/components/schemas/flow-global-input-type'
      required:
      - name
      - type
      title: flow-global-input
      type: object
    flow-global-input-type:
      description: Type of the input.
      enum:
      - bool
      - email_address
      - enum
      - enum_list
      - float
      - float_list
      - integer
      - integer_list
      - json
      - key_values
      - part
      - string
      - string_list
      - user
      type: string
    flow-name-reference-mapping:
      description: |
        Stores mapping from template defined name to corresponding ID.
      properties:
        name:
          description: |
            Name by which the object is being referred in the flow. May be
            different from the value of the `name` field (if present) of the
            object.
          type: string
        reference:
          $ref: '#/components/schemas/atom-summary'
      required:
      - name
      title: flow-name-reference-mapping
      type: object
    flow-name-value-pair:
      description: Stores a string name to string value mapping.
      properties:
        name:
          description: Name.
          type: string
        value:
          description: Value.
          type: string
      required:
      - name
      title: flow-name-value-pair
      type: object
    flow-secret:
      properties:
        description:
          description: Description of secret in flow definition.
          type: string
        display_name:
          description: Display name of secret in flow definition.
          type: string
        name:
          description: Name of secret in flow definition.
          type: string
      required:
      - name
      title: flow-secret
      type: object
    flow-setup-resource:
      description: Resource created as part of setup of a flow.
      properties:
        resource:
          $ref: '#/components/schemas/flow-name-reference-mapping'
        resource_type:
          $ref: '#/components/schemas/setup-resource-resource-type'
      title: flow-setup-resource
      type: object
    flow-status:
      description: Deployment status of the flow.
      enum:
      - active
      - draft
      - error
      - inactive
      type: string
    flow-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          description:
            description: Description of the flow.
            type: string
          name:
            description: Name of the flow.
            type: string
        type: object
      title: flow-summary
    flow-update-request:
      properties:
        automations:
          description: List of automations used in the flow
          items:
            $ref: '#/components/schemas/update-flow-name-reference-mapping'
          type: array
        commands:
          description: List of commands used in the flow
          items:
            $ref: '#/components/schemas/update-flow-name-reference-mapping'
          type: array
        connections:
          description: List of connections used in the flow
          items:
            $ref: '#/components/schemas/update-flow-name-value-pair'
          type: array
        description:
          description: Description of the flow
          type: string
        event_sources:
          description: List of event sources used in the flow
          items:
            $ref: '#/components/schemas/update-flow-name-reference-mapping'
          type: array
        id:
          description: The flow's ID.
          type: string
        inputs:
          description: |
            List of inputs to be provided from the user to be used in the flow
          items:
            $ref: '#/components/schemas/update-global-input'
          type: array
        inputs_snap_kit_action_payload:
          description: |
            The action payload generated by user interaction if the inputs are
            being updated via snap-kits.
          type: object
        marketplace_item_version:
          description: |
            Version of the Marketplace Item template through which this flow
            was installed
          type: string
        name:
          description: Name of the flow
          type: string
        raw_template:
          description: Raw template which created the flow
          type: string
        secrets:
          description: List of secrets used in the flow
          items:
            $ref: '#/components/schemas/update-flow-name-reference-mapping'
          type: array
        setup_resources:
          description: List of resources created as part of the flow
          items:
            $ref: '#/components/schemas/update-flow-setup-resource'
          type: array
        snap_kit_actions:
          description: |
            List of snapkit actions used in the flow. An snapkit action is a
            synchronous code path called when an interactive element on the
            snap-kit is interacted with. Interactive elements include buttons,
            checkboxes, date-pickers etc. A snapkit action is defined as change
            in value of these elements.
          items:
            $ref: '#/components/schemas/update-flow-name-reference-mapping'
          type: array
        status:
          $ref: '#/components/schemas/flow-status'
      required:
      - id
      title: flow-update-request
      type: object
    flow-update-response:
      properties:
        flow:
          $ref: '#/components/schemas/flow'
      required:
      - flow
      title: flow-update-response
      type: object
      x-go-name: FlowUpdateResponseBody
    flows-github-create-request:
      properties:
        enabled_transitions:
          description: The transitions to enable for the flow.
          items:
            $ref: '#/components/schemas/github-flow-event-transition'
          type: array
        event_source_id:
          description: |
            ID of the GitHub event source. If provided, this event source is
            used instead of creating a new one.
          type: string
        new_branch_works_part_id:
          description: |
            The default part ID to use for the autonomous works created via
            this flow.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      title: flows-github-create-request
      type: object
    flows-github-create-response:
      properties:
        flow:
          $ref: '#/components/schemas/flow'
        webhook_secret:
          description: |
            Secret value to use while configuring the webhook on GitHub.
          type: string
        webhook_url:
          description: |
            Webhook URL to be configured manually on GitHub webhooks page.
          type: string
      required:
      - flow
      - webhook_secret
      - webhook_url
      title: flows-github-create-response
      type: object
      x-go-name: FlowsGithubCreateResponseBody
    flows-list-request:
      properties:
        cursor:
          description: The cursor to begin iteration from.
          type: string
        marketplace_item:
          description: ID of Marketplace Item which installed this flow.
          items:
            type: string
          type: array
        omit_raw_template:
          description: |
            Parameter to indicate if the response must omit the raw_template.
          type: boolean
        sort_by:
          description: |
            Fields to sort the flows by and the direction to sort them.
          items:
            type: string
          type: array
        status:
          description: Deployment status of the flow.
          items:
            $ref: '#/components/schemas/flow-status'
          type: array
      title: flows-list-request
      type: object
    flows-list-response:
      properties:
        cursor:
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        flows:
          description: List of flows.
          items:
            $ref: '#/components/schemas/flow'
          type: array
      required:
      - flows
      title: flows-list-response
      type: object
      x-go-name: FlowsListResponseBody
    function-definition:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          config_policy:
            $ref: '#/components/schemas/policy-instance'
          function_name:
            description: Name of the function.
            type: string
          namespace:
            description: Namespace of the function.
            type: string
        type: object
      title: function-definition
    function-definition-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: function-definition-summary
    function-definitions-create-request:
      properties:
        function_definition:
          $ref: '#/components/schemas/create-function-definition'
      required:
      - function_definition
      title: function-definitions-create-request
      type: object
    function-definitions-create-response:
      properties:
        function_definition:
          $ref: '#/components/schemas/function-definition'
      required:
      - function_definition
      title: function-definitions-create-response
      type: object
      x-go-name: FunctionDefinitionsCreateResponseBody
    function-definitions-delete-request:
      properties:
        id:
          description: The function definition's DON.
          type: string
      required:
      - id
      title: function-definitions-delete-request
      type: object
    function-definitions-get-request:
      properties:
        id:
          description: The function definition's DON.
          type: string
      required:
      - id
      title: function-definitions-get-request
      type: object
    function-definitions-get-response:
      properties:
        function_definition:
          $ref: '#/components/schemas/function-definition'
      required:
      - function_definition
      title: function-definitions-get-response
      type: object
      x-go-name: FunctionDefinitionsGetResponseBody
    function-definitions-list-request:
      properties:
        page:
          description: Page number for paginated function definition items.
          format: int32
          type: integer
        per_page:
          description: |
            Number of function definition items to return per page. Default is
            50.
          format: int32
          type: integer
        sort_by:
          description: |
            List of fields to sort the function definition items by and how to
            sort them. Default is to sort by created_date in descending order.
          items:
            type: string
          type: array
      title: function-definitions-list-request
      type: object
    function-definitions-list-response:
      properties:
        function_definitions:
          description: List of function definitions.
          items:
            $ref: '#/components/schemas/function-definition'
          type: array
        total:
          description: |
            Total number of function definition items for the request. The
            function definition items in the response correspond to just one
            page of results which makes up a portion of the total.
          format: int32
          type: integer
      required:
      - function_definitions
      - total
      title: function-definitions-list-response
      type: object
      x-go-name: FunctionDefinitionsListResponseBody
    function-definitions-update-request:
      properties:
        function_definition:
          $ref: '#/components/schemas/update-function-definition'
        id:
          description: The function definition's DON.
          type: string
      required:
      - function_definition
      - id
      title: function-definitions-update-request
      type: object
    function-definitions-update-response:
      properties:
        function_definition:
          $ref: '#/components/schemas/function-definition'
      required:
      - function_definition
      title: function-definitions-update-response
      type: object
      x-go-name: FunctionDefinitionsUpdateResponseBody
    general-preferences-group:
      description: Preferences group for General settings.
      properties:
        availabilty:
          $ref: '#/components/schemas/availability-preferences-group'
      title: general-preferences-group
      type: object
    generate-reply-request:
      description: The request to generate a reply for a conversation.
      properties:
        messages:
          description: List of messages in chronological order.
          items:
            $ref: '#/components/schemas/generate-reply-request-message'
          minItems: 1
          type: array
      required:
      - messages
      title: generate-reply-request
      type: object
    generate-reply-request-message:
      properties:
        created_by:
          description: ID of the user who created the message.
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
        text:
          description: Text content of the message.
          type: string
      required:
      - text
      title: generate-reply-request-message
      type: object
    generate-reply-response:
      description: The response for the generated reply.
      properties:
        reply:
          description: |
            The reply string that's generated for the requested messages.
          type: string
        sources:
          description: Source articles from which the reply is generated.
          items:
            $ref: '#/components/schemas/article-summary'
          type: array
      title: generate-reply-response
      type: object
      x-go-name: GenerateReplyResponseBody
    get-discovery-profile-request:
      properties:
        profile_id:
          description: Discovery Profile unique ID.
          type: string
      required:
      - profile_id
      title: get-discovery-profile-request
      type: object
    get-discovery-profile-response:
      properties:
        discovery_profile:
          $ref: '#/components/schemas/discovery-profile'
      required:
      - discovery_profile
      title: get-discovery-profile-response
      type: object
      x-go-name: GetDiscoveryProfileResponseBody
    get-discovery-run-request:
      properties:
        id:
          description: Discovery run unique ID.
          type: string
      required:
      - id
      title: get-discovery-run-request
      type: object
    get-discovery-run-response:
      properties:
        run:
          $ref: '#/components/schemas/discovery-run'
      required:
      - run
      title: get-discovery-run-response
      type: object
      x-go-name: GetDiscoveryRunResponseBody
    get-discovery-settings-request:
      properties:
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      title: get-discovery-settings-request
      type: object
    get-discovery-settings-response:
      properties:
        discovery_settings:
          $ref: '#/components/schemas/discovery-settings'
      required:
      - discovery_settings
      title: get-discovery-settings-response
      type: object
      x-go-name: GetDiscoverySettingsResponseBody
    get-object-member-request:
      description: A request to get an object member by its DON.
      properties:
        object_member_id:
          description: |
            Globally unique DevRev Object Name (DON) for the Object Member.
          type: string
      required:
      - object_member_id
      title: get-object-member-request
      type: object
    get-object-member-response:
      properties:
        object_member:
          $ref: '#/components/schemas/object-member'
      required:
      - object_member
      title: get-object-member-response
      type: object
      x-go-name: GetObjectMemberResponseBody
    get-rev-org-sample-csv-request:
      description: Request object to get sample CSV for bulk ingestion.
      title: get-rev-org-sample-csv-request
      type: object
    get-rev-org-sample-csv-response:
      description: Response object to get sample CSV for bulk ingestion.
      properties:
        sample_csv:
          description: Sample CSV for bulk import.
          type: string
      required:
      - sample_csv
      title: get-rev-org-sample-csv-response
      type: object
      x-go-name: GetRevOrgSampleCsvResponseBody
    get-rev-user-sample-csv-request:
      description: Request object to get sample CSV for bulk ingestion.
      title: get-rev-user-sample-csv-request
      type: object
    get-rev-user-sample-csv-response:
      description: Response object to get sample CSV for bulk ingestion.
      properties:
        sample_csv:
          description: Sample CSV for bulk import.
          type: string
      required:
      - sample_csv
      title: get-rev-user-sample-csv-response
      type: object
      x-go-name: GetRevUserSampleCsvResponseBody
    github-flow-event-transition:
      description: Github flow event transition.
      enum:
      - new_branch_transition
      - new_branch_work_create_transition
      - new_commit_transition
      - pr_merged_inprogress_to_closed_transition
      - pr_merged_open_to_closed_transition
      - pr_opened_transition
      type: string
    global-input:
      description: |
        global_input defines the schema for input to get from user deploying
        the flows.
      properties:
        allowed_values:
          description: |
            Allowed values for this input, applicable only for enum and
            enum_list types.
          items:
            type: string
          type: array
        default_value:
          description: Default value to be used if value is not provided.
          type: string
        description:
          description: |
            Description of the input to be provided by flow author to help the
            flow user to provide value.
          type: string
        display_name:
          description: Display Name.
          type: string
        input_type:
          $ref: '#/components/schemas/global-input-input-type'
        name:
          description: Name.
          type: string
        schema:
          description: JSON Schema object.
          type: string
        value:
          description: Value.
          type: string
      required:
      - name
      title: global-input
      type: object
    global-input-input-type:
      description: The type of input expected from the user.
      enum:
      - bool
      - email_address
      - enum
      - enum_list
      - float
      - float_list
      - integer
      - integer_list
      - json
      - key_values
      - part
      - string
      - string_list
      - user
      type: string
    graphql-request:
      properties:
        query:
          description: The GraphQL request query.
          type: string
        variables:
          description: The variables to substitute into the query.
          type: object
      required:
      - query
      title: graphql-request
      type: object
    graphql-response:
      properties:
        data:
          description: The response data.
          type: object
        errors:
          description: The resulting errors.
          items:
            type: object
          type: array
        extensions:
          description: Extensions for the response data.
          type: object
      required:
      - data
      title: graphql-response
      type: object
      x-go-name: GraphqlResponseBody
    group:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          default_version:
            description: Version of the default group.
            type: string
          description:
            description: Description of the group.
            type: string
          is_default:
            description: Whether it is a default group.
            type: boolean
          member_types:
            description: Types of the members allowed in the group.
            items:
              $ref: '#/components/schemas/group-member-types'
            type: array
          name:
            description: Name of the group.
            type: string
          owner:
            $ref: '#/components/schemas/user-summary'
        required:
        - is_default
        - member_types
        type: object
      title: group
    group-base:
      properties:
        custom_view:
          $ref: '#/components/schemas/custom-view'
        description:
          description: Description of the group.
          type: string
        end_date:
          description: Timestamp when the vista group item ends.
          format: date-time
          type: string
        icon_type:
          description: Icon associated with the group in the UI.
          type: string
        id:
          description: Globally unique object ID.
          type: string
        id_v1:
          description: Globally unique object ID.
          type: string
        name:
          description: Name of the group.
          type: string
        parent:
          $ref: '#/components/schemas/group-base-parent'
        start_date:
          description: Timestamp when the vista group item starts.
          format: date-time
          type: string
        state:
          $ref: '#/components/schemas/vista-group-item-state'
      required:
      - id
      - name
      title: group-base
      type: object
    group-base-parent:
      properties:
        name:
          description: Name of parent vista of the vista group item.
          type: string
      title: group-base-parent
      type: object
    group-member-types:
      description: Types of the members allowed in the group.
      enum:
      - dev_user
      - rev_user
      - svc_acc
      type: string
    group-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: Name of the group.
            type: string
        type: object
      title: group-summary
    grouped-vista:
      allOf:
      - $ref: '#/components/schemas/vista-base'
      - discriminator:
          mapping:
            parts: '#/components/schemas/grouped-vista-parts-vista'
            works: '#/components/schemas/grouped-vista-works-vista'
          propertyName: filter_type
        oneOf:
        - $ref: '#/components/schemas/grouped-vista-parts-vista'
        - $ref: '#/components/schemas/grouped-vista-works-vista'
        properties:
          filter_type:
            $ref: '#/components/schemas/grouped-vista-filter-type'
          flavor:
            $ref: '#/components/schemas/grouped-vista-flavor'
        required:
        - filter_type
        type: object
      description: Represents a group of multiple vistas as a single unit.
      title: grouped-vista
    grouped-vista-filter-type:
      description: |
        Type of DevRev object for which the grouped vista is applicable.
      enum:
      - parts
      - works
      type: string
    grouped-vista-flavor:
      description: Denotes the use case of the grouped vista.
      enum:
      - nnl
      - sprint_board
      type: string
    grouped-vista-parts-vista:
      properties:
        filter:
          $ref: '#/components/schemas/grouped-vista-parts-vista-filter'
        groups:
          description: The list of vista groups.
          items:
            $ref: '#/components/schemas/parts-vista-group-item'
          type: array
      title: grouped-vista-parts-vista
      type: object
    grouped-vista-parts-vista-filter:
      properties:
        categories:
          description: Filters for parts of the provided categories.
          items:
            $ref: '#/components/schemas/part-category'
          type: array
        created_by:
          description: Filters for parts created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
        created_by_v1:
          description: Filters for parts created by any of these users.
          type: string
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        enhancement:
          $ref: '#/components/schemas/parts-filter-enhancement'
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        name:
          description: Filters for parts of the provided name(s).
          items:
            type: string
          type: array
        owned_by:
          description: Filters for parts owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for parts owned by any of the provided users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids_v1:
          description: Filters for parts owned by any of the provided users.
          type: string
        owned_by_op:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
        owned_by_v1:
          description: Filters for parts owned by any of these users.
          type: string
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: Filters for part with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for parts with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_v1:
          description: Filters for parts with any of the provided tags.
          type: string
        tags:
          description: Filters for part with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
        tags_v1:
          description: Filters for part with any of the provided tags.
          type: string
        type:
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
        types:
          deprecated: true
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      title: grouped-vista-parts-vista-filter
      type: object
    grouped-vista-works-vista:
      properties:
        filter:
          $ref: '#/components/schemas/grouped-vista-works-vista-filter'
        groups:
          description: The list of vista groups.
          items:
            $ref: '#/components/schemas/works-vista-group-item'
          type: array
      title: grouped-vista-works-vista
      type: object
    grouped-vista-works-vista-filter:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids_v1:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          type: string
        ancestor_part_v1:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          type: string
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids_v1:
          description: Filters for work belonging to any of the provided parts.
          type: string
        applies_to_part_v1:
          description: Filters for work belonging to any of the provided parts.
          type: string
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids_v1:
          description: Filters for work created by any of these users.
          type: string
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_by_v1:
          description: Filters for work created by any of these users.
          type: string
        created_date:
          $ref: '#/components/schemas/date-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_v1:
          description: Filters for work excluding the provided work IDs.
          type: string
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids_v1:
          description: Filters for work excluding the provided work IDs.
          type: string
        group_by:
          description: The field to group the collection by.
          type: string
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids_v1:
          description: Filters for work owned by any of these users.
          type: string
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        owned_by_v1:
          description: Filters for work owned by any of these users.
          type: string
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tag_ids_v1:
          description: Filters for work with any of the provided tags.
          type: string
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_v1:
          description: Filters for work with any of the provided tags.
          type: string
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
        vista_v1:
          description: Filters for work belonging to the given vista.
          type: string
      title: grouped-vista-works-vista-filter
      type: object
    groups-create-request:
      description: A request to create a new group.
      properties:
        description:
          description: Description of the group.
          type: string
        name:
          description: Unique name of the group.
          type: string
        owner:
          description: Owner of the group.
          type: string
      required:
      - description
      - name
      title: groups-create-request
      type: object
    groups-create-response:
      description: The response to group creation.
      properties:
        group:
          $ref: '#/components/schemas/group'
      required:
      - group
      title: groups-create-response
      type: object
      x-go-name: GroupsCreateResponseBody
    groups-delete-request:
      description: A request to delete a group.
      properties:
        id:
          description: The ID of the group to delete.
          type: string
      required:
      - id
      title: groups-delete-request
      type: object
    groups-delete-response:
      description: The response to deleting a group.
      title: groups-delete-response
      type: object
      x-go-name: GroupsDeleteResponseBody
    groups-list-request:
      description: A request to get information about a list of groups.
      title: groups-list-request
      type: object
    groups-list-response:
      description: The response to listing the groups.
      properties:
        groups:
          description: The list of groups.
          items:
            $ref: '#/components/schemas/group'
          type: array
      required:
      - groups
      title: groups-list-response
      type: object
      x-go-name: GroupsListResponseBody
    groups-update-request:
      description: A request to update a group.
      properties:
        description:
          description: The updated group's description.
          type: string
        id:
          description: The ID of the group to update.
          type: string
        name:
          description: The updated group's name.
          type: string
        owner:
          description: The updated group's owner.
          type: string
      required:
      - id
      title: groups-update-request
      type: object
    groups-update-response:
      description: The response to group update.
      properties:
        group:
          $ref: '#/components/schemas/group'
      required:
      - group
      title: groups-update-response
      type: object
      x-go-name: GroupsUpdateResponseBody
    id:
      properties:
        id:
          type: string
      required:
      - id
      title: id
      type: object
    inference-details:
      description: |
        Holds details about the inference of a part. Including evidence and
        confidence.
      properties:
        confidence:
          description: |
            A confidence score computed by the inference engine. Currently, the
            score is not normalized across different part inferences. Until
            this is improved, this should only be comparable to confidence of
            same part type.
          format: double
          type: number
        evidences:
          description: |
            A evidences that the inferer were able to find that justify the
            inference outcome.
          items:
            type: string
          type: array
        inferred_at:
          description: The time when this inference occured.
          format: date-time
          type: string
      title: inference-details
      type: object
    initial-submission:
      description: A request to create a new marketplace submission.
      properties:
        artifact_ids:
          description: Artifact IDs relevant to the marketplace submission.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        coming_soon:
          description: |
            Flag indicating whether marketplace submission will be soon
            available to purchase.
          type: boolean
        description:
          description: |
            Description of the marketplace submission (Markdown formatted
            text).
          type: string
        icon_artifact_id:
          description: Artifact ID relevant to the marketplace submission icon.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        item_type:
          $ref: '#/components/schemas/marketplace-submission-item-type'
        keywords:
          description: Keywords of the marketplace submission.
          type: string
        manifest:
          description: Manifest of the marketplace submission.
          type: string
        marketplace_category_ids:
          description: |
            Marketplace category IDs relevant to the marketplace submission.
          items:
            type: string
          type: array
        marketplace_id:
          description: |
            Markteplace where the marketplace submission will be created.
          type: string
        name:
          description: The name of the marketplace submission.
          type: string
        sku_ids:
          description: |
            Stock keeping unit IDs relevant to the marketplace submission.
          items:
            type: string
          type: array
        summary:
          description: Summary of the marketplace submission.
          type: string
        tagline:
          description: Tagline of the marketplace submission.
          type: string
        template:
          $ref: '#/components/schemas/marketplace-submission-upsert-template'
      required:
      - description
      - icon_artifact_id
      - marketplace_id
      - name
      - summary
      - tagline
      title: initial-submission
      type: object
    insight:
      discriminator:
        mapping:
          real_time_insight: '#/components/schemas/real-time-insight'
          window_based_insight: '#/components/schemas/window-based-insight'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/real-time-insight'
      - $ref: '#/components/schemas/window-based-insight'
      properties:
        type:
          $ref: '#/components/schemas/insight-type'
      required:
      - type
      title: insight
      type: object
    insight-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          description:
            description: Description of insight.
            type: string
          insight_type:
            $ref: '#/components/schemas/insight-type'
          inverted:
            description: If true, a lower value of this insight is better.
            type: boolean
          name:
            description: Name of the insight.
            type: string
          parent_ids:
            description: Parents of this insight.
            items:
              type: string
            type: array
          parent_ids_v1:
            description: Parents of this insight.
            type: string
        type: object
      title: insight-base
    insight-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: insight-base-summary
    insight-type:
      enum:
      - real_time_insight
      - window_based_insight
      type: string
    insight-value:
      discriminator:
        mapping:
          real_time_insight_value: '#/components/schemas/real-time-insight-value'
          window_based_insight_value: '#/components/schemas/window-based-insight-value'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/real-time-insight-value'
      - $ref: '#/components/schemas/window-based-insight-value'
      properties:
        type:
          $ref: '#/components/schemas/insight-value-type'
      required:
      - type
      title: insight-value
      type: object
    insight-value-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          for_object_id:
            description: Id of the object for which this value corresponds to.
            type: string
          for_object_id_v1:
            description: Id of the object for which this value corresponds to.
            type: string
          insight_id:
            description: Id of the insight for which this value corresponds to.
            type: string
          insight_id_v1:
            description: Id of the insight for which this value corresponds to.
            type: string
          insight_value_type:
            $ref: '#/components/schemas/insight-value-type'
        type: object
      title: insight-value-base
    insight-value-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: insight-value-base-summary
    insight-value-type:
      enum:
      - real_time_insight_value
      - window_based_insight_value
      type: string
    insights-get-request:
      properties:
        id:
          description: The insights's ID.
          type: string
      required:
      - id
      title: insights-get-request
      type: object
    insights-get-response:
      properties:
        insight:
          $ref: '#/components/schemas/insight'
      required:
      - insight
      title: insights-get-response
      type: object
      x-go-name: InsightsGetResponseBody
    insights-list-request:
      properties:
        cursor:
          description: |
            The cursor to begin iteration from, otherwise if not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of insights to return. If not set, then the
            default is '50'.
          format: int32
          type: integer
      title: insights-list-request
      type: object
    insights-list-response:
      properties:
        cursor:
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        insights:
          description: The list of insights.
          items:
            $ref: '#/components/schemas/insight'
          type: array
      required:
      - insights
      title: insights-list-response
      type: object
      x-go-name: InsightsListResponseBody
    insights-values-list-request:
      properties:
        cursor:
          description: |
            The cursor to begin iteration from, otherwise if not provided, then
            iteration starts from the beginning.
          type: string
        for_object_ids:
          description: Filter based on for_object_id.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        insight_ids:
          description: Filter based on insight ids.
          items:
            type: string
          type: array
        limit:
          description: |
            The maximum number of insights to return. If not set, then the
            default is '50'.
          format: int32
          type: integer
      title: insights-values-list-request
      type: object
    insights-values-list-response:
      properties:
        cursor:
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        insight_values:
          description: The list of insight values.
          items:
            $ref: '#/components/schemas/insight-value'
          type: array
      required:
      - insight_values
      title: insights-values-list-response
      type: object
      x-go-name: InsightsValuesListResponseBody
    instructions-format:
      description: Format in which content is defined.
      enum:
      - markdown
      type: string
    invoice:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          amount_due:
            description: |
              Final amount due at this time for this invoice. If the invoice
              total is smaller than the minimum charge amount, for example, or if
              there is account credit that can be applied to the invoice, the
              amount_due may be 0. If there is a positive starting_balance for
              the invoice (the customer owes money), the amount_due will also
              take that into account. The charge that gets generated for the
              invoice will be for the amount specified in amount_due.
            format: double
            type: number
          amount_paid:
            description: The amount that was paid.
            format: double
            type: number
          amount_remaining:
            description: The amount remaining that is due.
            format: double
            type: number
          billing_date:
            description: Date on which invoice was generated.
            format: date-time
            type: string
          billing_details:
            $ref: '#/components/schemas/contact-details'
          billing_email:
            description: The billing contact's email.
            type: string
          client_key:
            description: |
              If the invoice is to be paid, this key needs to be used on the
              frontend side to complete the payment.
            type: string
          currency:
            description: The currency for which the invoice is generated.
            type: string
          due_date:
            description: |
              The date on which payment for this invoice is due. This value will
              be null for invoices where collection_method=charge_automatically.
            format: date-time
            type: string
          invoice_items:
            description: The individual line items that make up the invoice.
            items:
              $ref: '#/components/schemas/invoice-item'
            type: array
          invoice_number:
            description: |
              A unique, identifying string that appears on emails sent to the
              customer for this invoice.
            type: string
          payment_intent_id:
            description: |
              If the invoice is to be paid, this id needs to be used on the
              frontend side to complete the payment.
            type: string
          pdf_url:
            description: URL to download the invoice in pdf format.
            type: string
          period_end:
            description: |
              End of the usage period during which invoice items were added to
              this invoice.
            format: date-time
            type: string
          period_start:
            description: |
              Start of the usage period during which invoice items were added to
              this invoice.
            format: date-time
            type: string
          rev:
            $ref: '#/components/schemas/org-summary'
          service_plan:
            $ref: '#/components/schemas/service-plan-summary'
          shipping_details:
            $ref: '#/components/schemas/contact-details'
          status:
            $ref: '#/components/schemas/invoice-status'
          subtotal:
            description: |
              Total of all subscriptions, invoice items, and prorations on the
              invoice before any invoice level discount or tax is applied.
            format: double
            type: number
          tax:
            description: |
              The amount of tax on this invoice. This is the sum of all the tax
              amounts on this invoice.
            format: double
            type: number
          total:
            description: |
              The invoice total is the sum of charges included in the invoice.
            format: double
            type: number
        required:
        - amount_due
        - amount_paid
        - amount_remaining
        - billing_date
        - currency
        - invoice_number
        - period_end
        - period_start
        - status
        - subtotal
        - tax
        - total
        type: object
      title: invoice
    invoice-item:
      description: |
        Invoice item describes what is being charged. It contains charged
        specific to a SKU.
      properties:
        invoice_item_price_details:
          description: |
            Price Details of the invoice item 1. It would contain a single row
            if the pricing is standard or item is one time. 2. Multiple rows in
            case of tiered (graduated/volume) pricing.
          items:
            $ref: '#/components/schemas/invoice-item-price-details'
          type: array
        sku_name:
          description: |
            SKU for which line item is generated (Used as name of invoice line
            items for better readability. It is against this name, pricing
            fields such as quantity, unit_amount, amount, etc are shown).
          type: string
      required:
      - invoice_item_price_details
      - sku_name
      title: invoice-item
      type: object
    invoice-item-price-details:
      description: Price details of the invoice line item.
      properties:
        amount:
          description: Total amount for the line item (quantity * unit_price).
          format: double
          type: number
        description:
          description: Description of the invoice line item.
          type: string
        quantity:
          description: Quantity of the line item.
          format: int32
          type: integer
        unit_price:
          description: Per unit price of the subscription item.
          format: double
          type: number
      required:
      - amount
      - description
      - quantity
      - unit_price
      title: invoice-item-price-details
      type: object
    invoice-status:
      description: Status of the invoice.
      enum:
      - open
      - paid
      - uncollectible
      - void
      type: string
    invoice-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: invoice-summary
    invoices-collection-method:
      description: Collection method type of the invoice.
      enum:
      - charge_automatically
      - send_invoice
      type: string
    invoices-get-request:
      properties:
        id:
          description: The invoice object's DON.
          type: string
      required:
      - id
      title: invoices-get-request
      type: object
    invoices-get-response:
      properties:
        invoice:
          $ref: '#/components/schemas/invoice'
      required:
      - invoice
      title: invoices-get-response
      type: object
      x-go-name: InvoicesGetResponseBody
    invoices-list-request:
      properties:
        after_billing_date:
          description: |
            Filter items which have billing date after the timestamp provided.
          format: date-time
          type: string
        after_due_date:
          description: |
            Filter items which have due date after the timestamp provided.
          format: date-time
          type: string
        before_billing_date:
          description: |
            Filter items which have billing date before the timestamp provided.
          format: date-time
          type: string
        before_due_date:
          description: |
            Filter items which have due date before the timestamp provided.
          format: date-time
          type: string
        collection_method:
          $ref: '#/components/schemas/invoices-collection-method'
        rev_org_ids:
          description: |
            Filter items by doing queries on revs. To allow devs filter
            invoices for specific revs.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        service_plan_id:
          description: Filter items by doing queries on service plan.
          type: string
        statuses:
          description: Filter items by doing queries on invoice status.
          items:
            $ref: '#/components/schemas/invoice-status'
          type: array
      title: invoices-list-request
      type: object
    invoices-list-response:
      properties:
        invoices:
          description: List of invoices.
          items:
            $ref: '#/components/schemas/invoice'
          type: array
      required:
      - invoices
      title: invoices-list-response
      type: object
      x-go-name: InvoicesListResponseBody
    issue:
      allOf:
      - $ref: '#/components/schemas/work-base'
      - properties:
          actual_effort:
            description: Actual effort to complete the issue.
            format: double
            type: number
          applies_to_versions:
            description: Part versions relevant to the work.
            items:
              type: string
            type: array
          developed_with:
            description: Parts associated based on git events.
            items:
              $ref: '#/components/schemas/part-summary'
            type: array
          estimated_effort:
            description: Estimated effort to complete the issue.
            format: double
            type: number
          priority:
            $ref: '#/components/schemas/issue-priority'
          release_versions:
            description: Versions that will contain the resolving commit IDs.
            items:
              type: string
            type: array
          rev_orgs:
            description: Rev orgs associated to issues.
            items:
              $ref: '#/components/schemas/org-summary'
            type: array
          sprint:
            $ref: '#/components/schemas/vista-group-item-summary'
        type: object
      title: issue
    issue-priority:
      description: Priority of the work based upon impact and criticality.
      enum:
      - p0
      - p1
      - p2
      - p3
      type: string
    issue-summary:
      allOf:
      - $ref: '#/components/schemas/work-base-summary'
      - properties:
          priority:
            $ref: '#/components/schemas/issue-priority'
        type: object
      title: issue-summary
    key-value-pair:
      description: Stores a string key to string value mapping.
      properties:
        key:
          description: Key.
          type: string
        value:
          description: Value.
          type: string
      required:
      - key
      title: key-value-pair
      type: object
    keyring:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          categories:
            description: Categories associated with the keyring.
            items:
              type: string
            type: array
          description:
            description: Description of the keyring.
            type: string
          external_org_id:
            description: External organization ID (e.g. id of github org).
            type: string
          external_org_name:
            description: External organization (e.g. name of github org).
            type: string
          is_key_expirable:
            description: Does key have expiration time.
            type: boolean
          key_expiration:
            description: Key expiration time.
            format: date-time
            type: string
          key_type:
            description: |
              Key type in authorization header (token, Bearer, Basic, ...).
            type: string
          name:
            description: Name of the keyring. Doesn't have to be unique.
            type: string
          scope:
            $ref: '#/components/schemas/keyring-scope'
          status:
            $ref: '#/components/schemas/keyring-status'
          status_message:
            description: keyring status message.
            type: string
          type:
            $ref: '#/components/schemas/keyring-type'
        type: object
      title: keyring
    keyring-scope:
      description: Scope of keyring.
      enum:
      - org
      - user
      type: string
    keyring-status:
      description: keyring status.
      enum:
      - active
      - collection_pending
      - error
      - select_org
      - user_action_required
      - warning
      type: string
    keyring-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: keyring-summary
    keyring-type:
      description: |
        Keyring type defines the external system authentication method.
      enum:
      - aws
      - bitbucket
      - cci
      - clearbit
      - datadog
      - devrev_aat
      - devrev_pat
      - discord
      - discourse_pat
      - domain_verification
      - flow_secret
      - gcp
      - gh_app
      - gh_oauth
      - gh_pat
      - google
      - hubspot_oauth
      - hubspot_pat
      - intercom
      - jira
      - kubernetes
      - linear_oauth
      - linear_pat
      - outreach
      - salesforce_sales
      - salesforce_service
      - sendgrid
      - service_accounts
      - servicenow
      - slack
      - stripe
      - zendesk
      - zendesk_pat
      type: string
    keyrings-create-callback-request:
      properties:
        authuser:
          description: Request for user sign-in authentication
          type: string
        code:
          description: Code to exchange for an access token
          type: string
        error:
          description: OAuth2 short error
          type: string
        error_description:
          description: OAuth2 error description
          type: string
        guild_id:
          description: |
            Server ID where the application is authorized [for discord]
          type: string
        hd:
          description: The hosted domain of the user account
          type: string
        installation_id:
          description: Github installation ID
          type: string
        permissions:
          description: OAuth2 permissions for an application
          type: string
        prompt:
          description: User consent dialog
          type: string
        scope:
          description: OAuth2 scope
          type: string
        setup_action:
          description: Github action information
          type: string
        state:
          description: State value given to the authorization request
          type: string
      title: keyrings-create-callback-request
      type: object
    keyrings-create-request:
      properties:
        keyring:
          $ref: '#/components/schemas/create-keyring'
        subdomain:
          description: |
            Optional subdomain used for API calls to the external system (for
            oauth2).
          type: string
        ui_callback_url:
          description: UI callback (for oauth2).
          type: string
      required:
      - keyring
      title: keyrings-create-request
      type: object
    keyrings-create-response:
      properties:
        keyring:
          $ref: '#/components/schemas/keyring'
        redirect_url:
          description: Redirect to.
          type: string
      title: keyrings-create-response
      type: object
      x-go-name: KeyringsCreateResponseBody
    keyrings-delete-request:
      properties:
        id:
          description: The keyring's ID.
          type: string
      required:
      - id
      title: keyrings-delete-request
      type: object
    keyrings-get-request:
      properties:
        id:
          description: The keyring's ID.
          type: string
      required:
      - id
      title: keyrings-get-request
      type: object
    keyrings-get-response:
      properties:
        keyring:
          $ref: '#/components/schemas/keyring'
      required:
      - keyring
      title: keyrings-get-response
      type: object
      x-go-name: KeyringsGetResponseBody
    keyrings-list-request:
      properties:
        categories:
          description: Filters keyrings with associated categories.
          items:
            type: string
          type: array
        cursor:
          description: The cursor to begin iteration from
          type: string
        sort_by:
          description: |
            Comma separated fields to sort the items by and how to sort them
            (field_name1:[asc/desc],field_name2:[asc/desc]).
          type: string
        types:
          description: Filters for keyring of the provided types.
          items:
            $ref: '#/components/schemas/keyring-type'
          type: array
      title: keyrings-list-request
      type: object
    keyrings-list-response:
      properties:
        cursor:
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        keyrings:
          description: List of keyrings.
          items:
            $ref: '#/components/schemas/keyring'
          type: array
      required:
      - keyrings
      title: keyrings-list-response
      type: object
      x-go-name: KeyringsListResponseBody
    keyrings-update-request:
      properties:
        id:
          description: The keyring's ID.
          type: string
        keyring:
          $ref: '#/components/schemas/update-keyring'
        ui_callback_url:
          description: UI callback (for oauth2).
          type: string
      required:
      - id
      title: keyrings-update-request
      type: object
    keyrings-update-response:
      properties:
        keyring:
          $ref: '#/components/schemas/keyring'
        redirect_url:
          description: The updated keyring.
          type: string
      title: keyrings-update-response
      type: object
      x-go-name: KeyringsUpdateResponseBody
    knowledge-v2-request:
      title: knowledge-v2-request
      type: object
    knowledge-v2-response:
      properties:
        edges:
          description: List of all the edges in knowledge graph
          items:
            $ref: '#/components/schemas/edge-v2'
          type: array
        vertices:
          description: List of all the vertices in knowledge graph
          items:
            $ref: '#/components/schemas/vertex-v2'
          type: array
      required:
      - edges
      - vertices
      title: knowledge-v2-response
      type: object
      x-go-name: KnowledgeV2ResponseBody
    language-resource:
      properties:
        language:
          description: |
            Supported language code, generally consisting of its ISO 639-1
            identifier. (E.g. 'en', 'ja'). In certain cases, BCP-47 codes
            including language + region identifiers are returned (e.g. 'zh-TW'
            and 'zh-CH').
          type: string
        name:
          description: |
            Human readable name of the language localized to the target
            language.
          type: string
      required:
      - language
      - name
      title: language-resource
      type: object
    line-item-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          is_mandatory:
            description: |
              Tells if the item is added as mandatory to the service plan.
            type: boolean
          pricing:
            $ref: '#/components/schemas/pricing-summary'
          quantity:
            description: The quantity of units purchased.
            format: int32
            type: integer
          rev:
            $ref: '#/components/schemas/org-summary'
          service_plan:
            $ref: '#/components/schemas/service-plan-summary'
          sku:
            $ref: '#/components/schemas/sku-summary'
          used_quantity:
            description: The used quantity units.
            format: int32
            type: integer
        required:
        - is_mandatory
        - pricing
        - quantity
        - rev
        - service_plan
        - sku
        - used_quantity
        type: object
      title: line-item-base
    line-item-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          is_mandatory:
            description: |
              Tells if the item is added as mandatory to the service plan.
            type: boolean
          pricing:
            $ref: '#/components/schemas/pricing-summary'
          sku:
            $ref: '#/components/schemas/sku-summary'
        required:
        - is_mandatory
        - pricing
        - sku
        type: object
      title: line-item-base-summary
    link:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          link_type:
            $ref: '#/components/schemas/link-type'
          source:
            $ref: '#/components/schemas/link-endpoint-summary'
          target:
            $ref: '#/components/schemas/link-endpoint-summary'
          type:
            $ref: '#/components/schemas/link-type'
        required:
        - link_type
        - source
        - target
        - type
        type: object
      title: link
    link-endpoint-summary:
      discriminator:
        mapping:
          artifact: '#/components/schemas/artifact-summary'
          capability: '#/components/schemas/capability-summary'
          conversation: '#/components/schemas/conversation-summary'
          custom_part: '#/components/schemas/custom-part-summary'
          custom_work: '#/components/schemas/custom-work-summary'
          enhancement: '#/components/schemas/enhancement-summary'
          feature: '#/components/schemas/feature-summary'
          issue: '#/components/schemas/issue-summary'
          linkable: '#/components/schemas/linkable-summary'
          opportunity: '#/components/schemas/opportunity-summary'
          product: '#/components/schemas/product-summary'
          runnable: '#/components/schemas/runnable-summary'
          task: '#/components/schemas/task-summary'
          ticket: '#/components/schemas/ticket-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/artifact-summary'
      - $ref: '#/components/schemas/capability-summary'
      - $ref: '#/components/schemas/conversation-summary'
      - $ref: '#/components/schemas/custom-part-summary'
      - $ref: '#/components/schemas/custom-work-summary'
      - $ref: '#/components/schemas/enhancement-summary'
      - $ref: '#/components/schemas/feature-summary'
      - $ref: '#/components/schemas/issue-summary'
      - $ref: '#/components/schemas/linkable-summary'
      - $ref: '#/components/schemas/opportunity-summary'
      - $ref: '#/components/schemas/product-summary'
      - $ref: '#/components/schemas/runnable-summary'
      - $ref: '#/components/schemas/task-summary'
      - $ref: '#/components/schemas/ticket-summary'
      properties:
        type:
          $ref: '#/components/schemas/link-endpoint-type'
      required:
      - type
      title: link-endpoint-summary
      type: object
    link-endpoint-type:
      enum:
      - artifact
      - capability
      - conversation
      - custom_part
      - custom_work
      - enhancement
      - feature
      - issue
      - linkable
      - opportunity
      - product
      - runnable
      - task
      - ticket
      type: string
    link-rev-user-to-rev-org-request:
      description: A request to link a rev user to a rev org.
      properties:
        rev_org_don:
          description: The don of the rev org to link the rev user to.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        user_don:
          description: The don of the rev user to link.
          type: string
      required:
      - rev_org_don
      - user_don
      title: link-rev-user-to-rev-org-request
      type: object
    link-rev-user-to-rev-org-response:
      description: The response to link a rev user to a rev org.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: link-rev-user-to-rev-org-response
      type: object
      x-go-name: LinkRevUserToRevOrgResponseBody
    link-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          link:
            $ref: '#/components/schemas/link-summary'
        required:
        - link
        type: object
      title: link-search-summary
    link-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          link_type:
            $ref: '#/components/schemas/link-type'
          source:
            $ref: '#/components/schemas/link-endpoint-summary'
          target:
            $ref: '#/components/schemas/link-endpoint-summary'
        required:
        - link_type
        - source
        - target
        type: object
      title: link-summary
    link-target-request:
      description: Link target request.
      properties:
        context:
          $ref: '#/components/schemas/work-context'
        link_type:
          $ref: '#/components/schemas/link-type'
        num_results:
          description: Number of results to be returned.
          format: int32
          type: integer
        source:
          description: |
            Boolean to indicate if the work context is source of the link
            relationship.
          type: boolean
        target_types:
          description: |
            List of target object types for which recommendations are
            requested.
          items:
            $ref: '#/components/schemas/target-object-type'
          type: array
      required:
      - context
      - link_type
      - source
      title: link-target-request
      type: object
    link-target-response:
      description: Link target response.
      properties:
        results:
          description: The link target results.
          items:
            $ref: '#/components/schemas/link-target-result'
          type: array
      required:
      - results
      title: link-target-response
      type: object
      x-go-name: LinkTargetResponseBody
    link-target-result:
      description: A link target result.
      properties:
        part:
          $ref: '#/components/schemas/part-summary'
        recommendation:
          enum:
          - part
          - work
          type: string
        work:
          $ref: '#/components/schemas/work-summary'
      title: link-target-result
      type: object
    link-type:
      description: Type of link used to define the relationship.
      enum:
      - developed_with
      - imports
      - is_dependent_on
      - is_duplicate_of
      - is_parent_of
      - is_part_of
      - is_related_to
      - serves
      type: string
    linkable:
      allOf:
      - $ref: '#/components/schemas/part-base'
      - properties:
          code_inferred_surface_area:
            description: |
              Code part surface area is defined as all the source files or file
              globs that make up this code part. This field lists the surface
              area of this code part as it was inferred automatically.
            items:
              type: string
            type: array
          code_last_inference_details:
            $ref: '#/components/schemas/inference-details'
          code_repo_paths:
            description: Paths in the repository for the code part.
            type: string
          code_repo_url:
            description: URL to the server & repo for the code part.
            type: string
          code_versions:
            description: Versions of the code.
            items:
              $ref: '#/components/schemas/code-version-summary'
            type: array
          discovery_confidence:
            description: |
              A confidence score computed by the inference engine. Currently, the
              score is not normalized across different part inferences. Until
              this is improved, this should only be comparable to confidence of
              same part type.
            format: double
            type: number
          discovery_evidences:
            description: |
              A evidences that the inferer were able to find that justify the
              inference outcome.
            items:
              type: string
            type: array
          discovery_last_inferred_at:
            description: The time when this inference occurred.
            format: date-time
            type: string
          kind:
            $ref: '#/components/schemas/linkable-kind'
        type: object
      title: linkable
    linkable-kind:
      description: The kind of linkable.
      enum:
      - component
      - library
      type: string
    linkable-pin-summary:
      allOf:
      - $ref: '#/components/schemas/part-pin-base-summary'
      title: linkable-pin-summary
    linkable-summary:
      allOf:
      - $ref: '#/components/schemas/part-base-summary'
      title: linkable-summary
    links-create-request:
      description: The request to create a new link.
      properties:
        link_type:
          $ref: '#/components/schemas/link-type'
        source:
          description: The ID of the source object.
          type: string
        source_id:
          deprecated: true
          description: The ID of the source object.
          type: string
        target:
          description: The ID of the target object.
          type: string
        target_id:
          deprecated: true
          description: The ID of the target object.
          type: string
        type:
          $ref: '#/components/schemas/link-type'
      title: links-create-request
      type: object
    links-create-response:
      description: The response to creating a new link.
      properties:
        link:
          $ref: '#/components/schemas/link'
      required:
      - link
      title: links-create-response
      type: object
      x-go-name: LinksCreateResponseBody
    links-delete-request:
      description: The request to delete a link.
      properties:
        id:
          description: The ID of the link to delete.
          type: string
      required:
      - id
      title: links-delete-request
      type: object
    links-delete-response:
      description: The response for deleting a link.
      title: links-delete-response
      type: object
      x-go-name: LinksDeleteResponseBody
    links-direction:
      description: |
        The direction of link, which can either be outbound such that the
        object is the source of the link, otherwise inbound where the object is
        the target of the link.
      enum:
      - is_source
      - is_target
      type: string
    links-get-request:
      description: The request to get a link's information.
      properties:
        id:
          description: The requested link's ID.
          type: string
      required:
      - id
      title: links-get-request
      type: object
    links-get-response:
      description: The response to getting a link's information.
      properties:
        link:
          $ref: '#/components/schemas/link'
      required:
      - link
      title: links-get-response
      type: object
      x-go-name: LinksGetResponseBody
    links-group:
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        key:
          description: Unique key according to which the items are grouped.
          type: string
        links:
          description: The group of links.
          items:
            $ref: '#/components/schemas/link'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - key
      - links
      title: links-group
      type: object
    links-group-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        direction:
          $ref: '#/components/schemas/links-direction'
        group_by:
          description: The field to group the links by.
          type: string
        limit:
          description: |
            The maximum number of groups to return. If not set, then the
            default is '10'.
          format: int32
          type: integer
        limit_per_group:
          description: |
            The maximum number of links to return for an individual group. If
            not set, then the default is '50'.
          format: int32
          type: integer
        link_type:
          description: |
            The link type(s) to filter for, otherwise if not present, all link
            types are included.
          items:
            $ref: '#/components/schemas/link-type'
          type: array
        mode:
          $ref: '#/components/schemas/list-mode'
        object:
          description: The ID of the object to list the link groups for.
          type: string
        object_id:
          deprecated: true
          description: The ID of the object to list the link groups for.
          type: string
        types:
          deprecated: true
          description: |
            The link types to filter for, otherwise if not present, all link
            types are included.
          items:
            $ref: '#/components/schemas/link-type'
          type: array
      required:
      - group_by
      title: links-group-request
      type: object
    links-group-response:
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        groups:
          description: The list of groups.
          items:
            $ref: '#/components/schemas/links-group'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - groups
      title: links-group-response
      type: object
      x-go-name: LinksGroupResponseBody
    links-list-request:
      description: The request to get information about a list of links.
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        direction:
          $ref: '#/components/schemas/links-direction'
        limit:
          description: |
            The maximum number of links to return. If not set, then the default
            is '50'.
          format: int32
          type: integer
        link_type:
          description: |
            The link type(s) to filter for, otherwise if not present, all link
            types are included.
          items:
            $ref: '#/components/schemas/link-type'
          type: array
        mode:
          $ref: '#/components/schemas/list-mode'
        object:
          description: The ID of the object to list the links for.
          type: string
        object_id:
          deprecated: true
          description: The ID of the object to list the links for.
          type: string
        types:
          deprecated: true
          description: |
            The link types to filter for, otherwise if not present, all link
            types are included.
          items:
            $ref: '#/components/schemas/link-type'
          type: array
      title: links-list-request
      type: object
    links-list-response:
      description: The response to listing the links.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        links:
          description: The list of links.
          items:
            $ref: '#/components/schemas/link'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - links
      title: links-list-response
      type: object
      x-go-name: LinksListResponseBody
    links-replace-request:
      description: The request to replace a link.
      properties:
        link_type:
          $ref: '#/components/schemas/link-type'
        replace_link_id:
          description: The ID of the link object to be replaced.
          type: string
        source:
          description: The ID of the source object.
          type: string
        source_id:
          deprecated: true
          description: The ID of the source object.
          type: string
        target:
          description: The ID of the target object.
          type: string
        target_id:
          deprecated: true
          description: The ID of the target object.
          type: string
        type:
          $ref: '#/components/schemas/link-type'
      required:
      - replace_link_id
      title: links-replace-request
      type: object
    links-replace-response:
      description: The response to replacing a link.
      properties:
        link:
          $ref: '#/components/schemas/link'
      required:
      - link
      title: links-replace-response
      type: object
      x-go-name: LinksReplaceResponseBody
    list-dev-user-invitations-request:
      description: |
        A request to get the list of Dev organizations that the user is
        invited.
      title: list-dev-user-invitations-request
      type: object
    list-dev-user-invitations-response:
      description: |
        The response to get the list of Dev organizations that the user is
        invited to.
      properties:
        invites:
          description: |
            List of invitations to Dev organizations the user is invited to.
          items:
            $ref: '#/components/schemas/dev-user-invitation'
          type: array
      required:
      - invites
      title: list-dev-user-invitations-response
      type: object
      x-go-name: ListDevUserInvitationsResponseBody
    list-discovery-profiles-request:
      properties:
        created_after_date:
          description: |
            Filters for discovery profile created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          description: |
            Filters for discovery profile created before the timestamp
            provided.
          format: date-time
          type: string
        created_by_ids:
          description: |
            Filters for discovery profile created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of discovery profiles to return. If not set,
            then the default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_after_date:
          description: |
            Filters for discovery profile modified after the provided
            timestamp.
          format: date-time
          type: string
        modified_before_date:
          description: |
            Filters for discovery profile modified before the provided
            timestamp.
          format: date-time
          type: string
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
        profile_name:
          description: Filters for discovery profile with any of these names.
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the works by and the direction to sort them.
          items:
            type: string
          type: array
      title: list-discovery-profiles-request
      type: object
    list-discovery-profiles-response:
      properties:
        discovery_profile:
          description: The list of discovery profiles.
          items:
            $ref: '#/components/schemas/discovery-profile'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - discovery_profile
      title: list-discovery-profiles-response
      type: object
      x-go-name: ListDiscoveryProfilesResponseBody
    list-discovery-sources-request:
      properties:
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      title: list-discovery-sources-request
      type: object
    list-discovery-sources-response:
      properties:
        discovery_sources:
          description: |
            List of sources from which data was collected for parts discovery.
          items:
            $ref: '#/components/schemas/discovery-source'
          type: array
      required:
      - discovery_sources
      title: list-discovery-sources-response
      type: object
      x-go-name: ListDiscoverySourcesResponseBody
    list-marketplace-items-filter-created-by-operator-type:
      enum:
      - any
      - not_any
      type: string
    list-mode:
      description: |
        The iteration mode to use. If "after", then entries after the provided
        cursor will be returned, or if no cursor is provided, then from the
        beginning. If "before", then entries before the provided cursor will be
        returned, or if no cursor is provided, then from the end. Entries will
        always be returned in the specified sort-by order.
      enum:
      - after
      - before
      type: string
    list-object-member-request:
      description: A request to list object members.
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of object members to return. If not set, then
            the default is '50'.
          format: int32
          type: integer
        member_ids:
          description: ID of the user or group.
          items:
            type: string
          type: array
        mode:
          $ref: '#/components/schemas/list-mode'
        object_ids:
          description: |
            Globally unique DevRev Object Name (DON) for the object where the
            member is being added.
          items:
            type: string
          type: array
      title: list-object-member-request
      type: object
    list-object-member-response:
      description: List of filtered object members.
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        object_members:
          description: List of filtered object members.
          items:
            $ref: '#/components/schemas/object-member'
          type: array
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - object_members
      title: list-object-member-response
      type: object
      x-go-name: ListObjectMemberResponseBody
    list-snap-components-request:
      properties:
        created_after_date:
          description: |
            Filters for snap component created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          description: |
            Filters for snap component created before the timestamp provided.
          format: date-time
          type: string
        created_by_ids:
          description: |
            Filters for snap component created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        include_snap_component_ids:
          description: "Ordered list of snap component ids such that the response
            is sorted\nby ids from this set. \n"
          items:
            type: string
          type: array
        limit:
          description: |
            The maximum number of snap components profiles to return. If not
            set, then the default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_after_date:
          description: |
            Filters for snap component modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          description: |
            Filters for snap component modified before the provided timestamp.
          format: date-time
          type: string
        name:
          description: Filters for snap components with any of these names.
          items:
            type: string
          type: array
        sort_by:
          description: "Fields to sort the snap components by and the direction to
            sort\nthem. This is used only if \n"
          items:
            type: string
          type: array
      title: list-snap-components-request
      type: object
    list-snap-components-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        snap_component:
          description: The list of snap components.
          items:
            $ref: '#/components/schemas/snap-component'
          type: array
      required:
      - snap_component
      title: list-snap-components-response
      type: object
      x-go-name: ListSnapComponentsResponseBody
    list-view-ui-metadata:
      description: List view UI hint overrides.
      properties:
        is_hidden:
          description: Whether field is hidden in UI.
          type: boolean
      title: list-view-ui-metadata
      type: object
    lobbies-list-request:
      description: The request to get information about a list of lobbies.
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of lobbies to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
      title: lobbies-list-request
      type: object
    lobbies-list-response:
      description: The response to listing the lobbies.
      properties:
        lobbies:
          description: The list of lobbies.
          items:
            $ref: '#/components/schemas/conversation'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - lobbies
      title: lobbies-list-response
      type: object
      x-go-name: LobbiesListResponseBody
    marketplace:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          description:
            description: Description of the marketplace.
            type: string
          marketplace_type:
            $ref: '#/components/schemas/marketplace-type'
          name:
            description: |
              Name of the marketplace. It must be longer than 3 characters and no
              longer than 128 characters.
            type: string
          slug:
            description: |
              URL slug of the marketplace. The slug cannot be changed after it
              has been set. Its' value needs to be in the right format and it has
              to be globally unique. Slug value must start with  one or more
              lowercase letters or digits, optionally followed  by zero or more
              hyphen-separated groups of lowercase letters or digits. For
              example, a valid slug value might be 'my-marketplace-123', but an
              invalid value might be 'MyMarketplace' or '123456'.
            type: string
        type: object
      title: marketplace
    marketplace-categories-get-request:
      properties:
        id:
          description: The marketplace category ID.
          type: string
      required:
      - id
      title: marketplace-categories-get-request
      type: object
    marketplace-categories-get-response:
      properties:
        marketplace_category:
          $ref: '#/components/schemas/marketplace-category'
      required:
      - marketplace_category
      title: marketplace-categories-get-response
      type: object
      x-go-name: MarketplaceCategoriesGetResponseBody
    marketplace-categories-list-request:
      properties:
        exclude_empty_categories:
          description: Whether to exclude empty categories.
          type: boolean
        marketplace_id:
          description: The marketplace ID.
          type: string
      required:
      - marketplace_id
      title: marketplace-categories-list-request
      type: object
    marketplace-categories-list-response:
      properties:
        marketplace_categories:
          description: The list of marketplace categories.
          items:
            $ref: '#/components/schemas/marketplace-category'
          type: array
      required:
      - marketplace_categories
      title: marketplace-categories-list-response
      type: object
      x-go-name: MarketplaceCategoriesListResponseBody
    marketplace-category:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          access_level:
            $ref: '#/components/schemas/access-level'
          description:
            description: An informative description for the category.
            type: string
          marketplace:
            $ref: '#/components/schemas/marketplace-summary'
          name:
            description: |
              The name of the category. The name is guaranteed to be unique. The
              name can be changed at any time as long as the new name is still
              unique per marketplace.
            type: string
          parent_marketplace_category:
            $ref: '#/components/schemas/marketplace-category-summary'
        required:
        - name
        type: object
      title: marketplace-category
    marketplace-category-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: |
              The name of the category. The name is guaranteed to be unique. The
              name can be changed at any time as long as the new name is still
              unique per marketplace.
            type: string
        required:
        - name
        type: object
      title: marketplace-category-summary
    marketplace-item:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          artifacts:
            description: |
              Artifacts relevant to the marketplace item (e.g. screenshots,
              videos, banner image, icon).
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          categories:
            description: |
              Categories relevant to the marketplace item.  One can provide at
              most three categories. It's important to note that the categories
              must belong to the same marketplace as the marketplace item does.
              Categories can be fetched from 'marketplace_categories.list' API
              endpoint. Marketplace item can associate only leaf categories (i.e.
              ones without a child category). Categories are used to organize and
              classify items on a marketplace, making it easier for users to find
              and browse related products. Therefore one needs to select only the
              categories that are relevant to this specific item.
            items:
              $ref: '#/components/schemas/marketplace-category-summary'
            type: array
          coming_soon:
            description: |
              Flag indicating whether marketplace item will be soon available to
              purchase and install. Coming soon items doesn't have to have a
              manifest or pricing.
            type: boolean
          description:
            description: |
              The description provides detailed information about the marketplace
              item. It can be plain text or markdown formatted text. Description
              text should describe all the major futures  of the marketplace
              items and some installation guidelines.
            type: string
          icon_artifact:
            $ref: '#/components/schemas/artifact-summary'
          item_type:
            $ref: '#/components/schemas/marketplace-item-item-type'
          keywords:
            description: Keywords relevant to the marketplace item.
            type: string
          marketplace:
            $ref: '#/components/schemas/marketplace-summary'
          meta_score:
            description: |
              Meta score of the marketplace items. Its value must be in range
              from 1 to 100000. It is used for ranking marketplace items on the
              Marketplace home page. Items with higher meta_score will be placed
              on the top of the list.
            format: int64
            type: integer
          name:
            description: |
              Name of the marketplace item.  The value for a name can be any
              string with  a minimum length of 3 and a maximum length of 128.
            type: string
          owned_by:
            $ref: '#/components/schemas/org-summary'
          slug:
            description: |
              URL slug of the marketplace item. Slug cannot be changed after it
              has been set. Its' value needs to be in the right format and it has
              to be unique per marketplace. Slug value must start with  a
              lowercase letter, followed by zero or more lowercase letters or
              hyphens, and must end with a lowercase letter. For example, a valid
              slug value might be 'my-automation', but an invalid value might be
              'MyAutomation' or 'my-automation-1'.
            type: string
          state:
            $ref: '#/components/schemas/marketplace-item-state'
          stock_keeping_units:
            description: |
              Stock keeping units relevant to the marketplace item. Coming soon
              marketplace items and free marketplace items are allowed to have no
              references to the SKUs.
            items:
              $ref: '#/components/schemas/sku-summary'
            type: array
          summary:
            description: Summary is a short description of the marketplace item.
            type: string
          tagline:
            description: |
              Tagline is a one-liner description of the marketplace item. It is
              used when presenting a marketplace item on the home page.
            type: string
          template:
            $ref: '#/components/schemas/template'
          type:
            $ref: '#/components/schemas/marketplace-item-type'
        type: object
      title: marketplace-item
    marketplace-item-artifact-list-update:
      properties:
        add:
          description: Artifact IDs to be added to the marketplace item.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        remove:
          description: Artifact IDs to be removed from the marketplace item.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        set:
          description: Artifact IDs to be set to the marketplace item.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
      title: marketplace-item-artifact-list-update
      type: object
    marketplace-item-category-list-update:
      properties:
        add:
          description: Categories to be added to the marketplace item.
          items:
            type: string
          type: array
        remove:
          description: Categories to be removed from the marketplace item.
          items:
            type: string
          type: array
        set:
          description: Categories to be set to the marketplace item.
          items:
            type: string
          type: array
      title: marketplace-item-category-list-update
      type: object
    marketplace-item-item-type:
      description: |
        Marketplace item type defines what backing service will be used  when
        validating a create marketplace item request, installing marketplace
        items in some organizations, etc. It is important to note that
        marketplace items of type app  are not backed by any service and are
        only placeholders for existing functionality in the DevRev platform
        (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
        instead.
      enum:
      - app
      - flow
      - snapin
      type: string
    marketplace-item-sku-list-update:
      properties:
        add:
          description: SKUs to be added to the marketplace item.
          items:
            type: string
          type: array
        remove:
          description: SKUs to be removed from the marketplace item.
          items:
            type: string
          type: array
        set:
          description: SKUs to be set to the marketplace item.
          items:
            type: string
          type: array
      title: marketplace-item-sku-list-update
      type: object
    marketplace-item-state:
      description: |
        The state represents the life cycle of the marketplace item. When a new
        marketplace item is created it is put in the state 'draft'. Once
        publisher (member of an organization who created a marketplace item)
        finishes editing the item he will transition it into the state
        'in_review'. Marketplace owner (member of an organization that owns the
        marketplace) will be able to do a review of the submission and either
        transition it  back into state 'draft' (if changes are required) or in
        state 'published'  (if submission met the required standards).
        Publisher can transit the published marketplace item into the state
        'end_of_sale' if he wants to temporarily remove the marketplace item
        from the shelves ( the item won't appear on the marketplace and users
        won't be able to install it). From state 'end_of_sale' one can
        transition the item back into state 'draft' or  'published' (if there
        were no changes done). Once an item is deleted it is transitioned into
        the state 'end_of_life'.
      enum:
      - draft
      - end_of_life
      - end_of_sale
      - in_review
      - published
      type: string
    marketplace-item-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          item_type:
            $ref: '#/components/schemas/marketplace-item-item-type'
          name:
            description: |
              Name of the marketplace item.  The value for a name can be any
              string with  a minimum length of 3 and a maximum length of 128.
            type: string
        type: object
      title: marketplace-item-summary
    marketplace-item-type:
      enum:
      - app
      - flow
      - snapin
      type: string
    marketplace-item-upsert-template:
      properties:
        artifact_id:
          description: Artifact ID relevant to the marketplace item template.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        version:
          description: Version of the latest marketplace item template.
          type: string
      required:
      - artifact_id
      - version
      title: marketplace-item-upsert-template
      type: object
    marketplace-items-create-request:
      description: A request to create a new marketplace item.
      properties:
        artifact_ids:
          description: Artifact IDs relevant to the marketplace item.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        coming_soon:
          description: |
            Flag indicating whether marketplace item will be soon available to
            purchase.
          type: boolean
        description:
          description: |
            Description of the marketplace item (Markdown formatted text).
          type: string
        icon_artifact_id:
          description: Artifact ID relevant to the marketplace item icon.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        item_type:
          $ref: '#/components/schemas/marketplace-item-item-type'
        keywords:
          description: Keywords of the marketplace item.
          type: string
        manifest:
          description: Manifest of the marketplace item.
          type: string
        marketplace_category_ids:
          description: |
            Marketplace category IDs relevant to the marketplace item.
          items:
            type: string
          type: array
        marketplace_id:
          description: Markteplace where the marketplace item will be created.
          type: string
        meta_score:
          description: Meta score of the marketplace item.
          format: int64
          type: integer
        name:
          description: The name of the marketplace item.
          type: string
        sku_ids:
          description: Stock keeping unit IDs relevant to the marketplace item.
          items:
            type: string
          type: array
        slug:
          description: URL slug of the marketplace item.
          type: string
        summary:
          description: Summary of the marketplace item.
          type: string
        tagline:
          description: Tagline of the marketplace item.
          type: string
        template:
          $ref: '#/components/schemas/marketplace-item-upsert-template'
        type:
          $ref: '#/components/schemas/marketplace-item-type'
      required:
      - description
      - icon_artifact_id
      - marketplace_id
      - name
      - slug
      - summary
      - tagline
      title: marketplace-items-create-request
      type: object
    marketplace-items-create-response:
      properties:
        marketplace_item:
          $ref: '#/components/schemas/marketplace-item'
      required:
      - marketplace_item
      title: marketplace-items-create-response
      type: object
      x-go-name: MarketplaceItemsCreateResponseBody
    marketplace-items-delete-request:
      properties:
        id:
          description: The marketplace item's ID.
          type: string
      required:
      - id
      title: marketplace-items-delete-request
      type: object
    marketplace-items-get-request:
      properties:
        id:
          description: The marketplace item's ID.
          type: string
        marketplace_id:
          description: |
            Markteplace ID where to search a marketplace item by slug.
          type: string
        slug:
          description: The marketplace item's slug.
          type: string
      title: marketplace-items-get-request
      type: object
    marketplace-items-get-response:
      properties:
        marketplace_item:
          $ref: '#/components/schemas/marketplace-item'
      required:
      - marketplace_item
      title: marketplace-items-get-response
      type: object
      x-go-name: MarketplaceItemsGetResponseBody
    marketplace-items-install-request:
      properties:
        id:
          description: The marketplace item's ID.
          type: string
      required:
      - id
      title: marketplace-items-install-request
      type: object
    marketplace-items-install-response:
      properties:
        created_object:
          $ref: '#/components/schemas/atom-summary'
      required:
      - created_object
      title: marketplace-items-install-response
      type: object
      x-go-name: MarketplaceItemsInstallResponseBody
    marketplace-items-list-request:
      properties:
        categories:
          description: Filters marketplace items relevant for these categories.
          items:
            type: string
          type: array
        created_by:
          description: |
            Filters for marketplace items created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/list-marketplace-items-filter-created-by-operator-type'
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            To start listing marketplace items cursor field should not be
            provided. Set cursor to value returned by the previous call to list
            items in the next page.
          type: string
        limit:
          description: |
            Limit for how many items to be retrieved per page. Default is 50.
          format: int32
          type: integer
        marketplace_id:
          description: Markteplace ID where to list marketplace items.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: |
            Filters for marketplace items owned by some organization.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
        sort_by:
          description: |
            List of fields to sort the marketplace item object, by and how to
            sort them. Default is to sort by created_date in descending order.
          items:
            type: string
          type: array
        state:
          description: Filters on state for marketplace items.
          items:
            $ref: '#/components/schemas/marketplace-item-state'
          type: array
      title: marketplace-items-list-request
      type: object
    marketplace-items-list-response:
      properties:
        cursor:
          description: |
            Next cursor to continue listing marketplace items. If cursor is not
            set you have reached the last page of items.
          type: string
        marketplace_items:
          description: The list of marketplace items.
          items:
            $ref: '#/components/schemas/marketplace-item'
          type: array
      required:
      - marketplace_items
      title: marketplace-items-list-response
      type: object
      x-go-name: MarketplaceItemsListResponseBody
    marketplace-items-transition-request:
      properties:
        id:
          description: The marketplace item's ID.
          type: string
        state:
          $ref: '#/components/schemas/marketplace-item-state'
      required:
      - id
      - state
      title: marketplace-items-transition-request
      type: object
    marketplace-items-transition-response:
      properties:
        marketplace_item:
          $ref: '#/components/schemas/marketplace-item'
      required:
      - marketplace_item
      title: marketplace-items-transition-response
      type: object
      x-go-name: MarketplaceItemsTransitionResponseBody
    marketplace-items-update-request:
      properties:
        artifact_ids:
          $ref: '#/components/schemas/marketplace-item-artifact-list-update'
        category_ids:
          $ref: '#/components/schemas/marketplace-item-category-list-update'
        coming_soon:
          description: |
            Flag indicating whether marketplace item will be soon available to
            purchase.
          type: boolean
        description:
          description: Description of the marketplace item.
          type: string
        icon_artifact_id:
          description: Artifact ID relevant to the marketplace item icon.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        id:
          description: The marketplace item's ID.
          type: string
        item_type:
          $ref: '#/components/schemas/marketplace-item-item-type'
        keywords:
          description: Keywords of the marketplace item.
          type: string
        manifest:
          description: Manifest of the marketplace item.
          type: string
        meta_score:
          description: Meta score of the marketplace item.
          format: int64
          type: integer
        name:
          description: Name of the marketplace item.
          type: string
        sku_ids:
          $ref: '#/components/schemas/marketplace-item-sku-list-update'
        summary:
          description: Summary of the marketplace item.
          type: string
        tagline:
          description: Tagline of the marketplace item.
          type: string
        template:
          $ref: '#/components/schemas/marketplace-item-upsert-template'
      required:
      - id
      title: marketplace-items-update-request
      type: object
    marketplace-items-update-response:
      properties:
        marketplace_item:
          $ref: '#/components/schemas/marketplace-item'
      required:
      - marketplace_item
      title: marketplace-items-update-response
      type: object
      x-go-name: MarketplaceItemsUpdateResponseBody
    marketplace-submission:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          artifacts:
            description: |
              Artifacts relevant to the marketplace listing (e.g. screenshots,
              videos, banner image, icon).
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          categories:
            description: |
              Categories relevant to the marketplace listing. One can provide at
              most three categories. It's important to note that the categories
              must belong to the same marketplace as the marketplace listing
              does. Categories can be fetched from 'marketplace_categories.list'
              API endpoint. Marketplace listing can associate only leaf
              categories (i.e. ones without a child category). Categories are
              used to organize and classify listings on a marketplace, making it
              easier for users to find and browse related products. Therefore one
              needs to select only the categories that are relevant to this
              specific listing.
            items:
              $ref: '#/components/schemas/marketplace-category-summary'
            type: array
          coming_soon:
            description: |
              Flag indicating whether marketplace listing will be soon available
              to purchase and install. Coming soon listings doesn't have to have
              a manifest or pricing.
            type: boolean
          conversation_id:
            $ref: '#/components/schemas/conversation-summary'
          description:
            description: |
              The description provides detailed information about the marketplace
              listing. It can be plain text or markdown formatted text.
              Description text should describe all the major futures of the
              marketplace listings and some installation guidelines.
            type: string
          destination_marketplace_item:
            $ref: '#/components/schemas/marketplace-item-summary'
          icon_artifact:
            $ref: '#/components/schemas/artifact-summary'
          item_type:
            $ref: '#/components/schemas/marketplace-submission-item-type'
          keywords:
            description: Keywords relevant to the marketplace listing.
            type: string
          marketplace:
            $ref: '#/components/schemas/marketplace-summary'
          name:
            description: |
              Name of the marketplace listing. The value for a name can be any
              string with a minimum length of 3 and a maximum length of 128.
            type: string
          slug:
            description: |
              Unique slug of the marketplace listing (derived from metadata.name
              value).
            type: string
          source_marketplace_item:
            $ref: '#/components/schemas/marketplace-item-summary'
          state:
            $ref: '#/components/schemas/marketplace-submission-state'
          stock_keeping_units:
            description: |
              Stock keeping units relevant to the marketplace listing. Coming
              soon marketplace listings and free marketplace listings are allowed
              to have no references to the SKUs.
            items:
              $ref: '#/components/schemas/sku-summary'
            type: array
          summary:
            description: |
              Summary is a short description of the marketplace listing.
            type: string
          tagline:
            description: |
              Tagline is a one-liner description of the marketplace listing. It
              is used when presenting a marketplace listing on the home page.
            type: string
          template:
            $ref: '#/components/schemas/template'
        type: object
      title: marketplace-submission
    marketplace-submission-item-type:
      description: |
        Marketplace listing type defines what backing service will be used when
        validating a create marketplace submission request, installing
        marketplace items in some organizations, etc. It is important to note
        that marketplace listings of type app are not backed by any service and
        are only placeholders for existing functionality in the DevRev platform
        (e.g. Jira Airdrop). Note: 'flow' type is deprecated, use 'snapin'
        instead.
      enum:
      - app
      - flow
      - snapin
      type: string
    marketplace-submission-state:
      description: "The state represents the life cycle of the marketplace submission.
        When\na new marketplace submission is created it is put in the state 'draft'.\nOnce
        publisher (member of an organization who created the submission)\nfinishes
        editing it he will transition it into the state 'in_review'.\nMarketplace
        owner (member of an organization that owns the marketplace)\nwill be able
        to do a review of the submission and either transition it \ninto state 'rejected'
        (if changes are required) or in state 'approved' \n(if submission met the
        required standards).\n"
      enum:
      - approved
      - draft
      - in_review
      - rejected
      type: string
    marketplace-submission-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          item_type:
            $ref: '#/components/schemas/marketplace-submission-item-type'
          name:
            description: |
              Name of the marketplace listing. The value for a name can be any
              string with a minimum length of 3 and a maximum length of 128.
            type: string
        type: object
      title: marketplace-submission-summary
    marketplace-submission-upsert-template:
      properties:
        artifact_id:
          description: |
            Artifact ID relevant to the marketplace submission template.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        version:
          description: Version of the latest marketplace submission template.
          type: string
      required:
      - artifact_id
      - version
      title: marketplace-submission-upsert-template
      type: object
    marketplace-submissions-create-request:
      properties:
        initial_submission:
          $ref: '#/components/schemas/initial-submission'
        marketplace_item_id:
          description: The marketplace items's ID.
          type: string
      title: marketplace-submissions-create-request
      type: object
    marketplace-submissions-create-response:
      properties:
        marketplace_submission:
          $ref: '#/components/schemas/marketplace-submission'
      required:
      - marketplace_submission
      title: marketplace-submissions-create-response
      type: object
      x-go-name: MarketplaceSubmissionsCreateResponseBody
    marketplace-submissions-get-request:
      properties:
        id:
          description: The marketplace submissions's ID.
          type: string
      required:
      - id
      title: marketplace-submissions-get-request
      type: object
    marketplace-submissions-get-response:
      properties:
        marketplace_submission:
          $ref: '#/components/schemas/marketplace-submission'
      required:
      - marketplace_submission
      title: marketplace-submissions-get-response
      type: object
      x-go-name: MarketplaceSubmissionsGetResponseBody
    marketplace-submissions-transition-request:
      properties:
        id:
          description: The marketplace submission's ID.
          type: string
        state:
          $ref: '#/components/schemas/marketplace-submission-state'
      required:
      - id
      - state
      title: marketplace-submissions-transition-request
      type: object
    marketplace-submissions-transition-response:
      properties:
        marketplace_submission:
          $ref: '#/components/schemas/marketplace-submission'
      required:
      - marketplace_submission
      title: marketplace-submissions-transition-response
      type: object
      x-go-name: MarketplaceSubmissionsTransitionResponseBody
    marketplace-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          marketplace_type:
            $ref: '#/components/schemas/marketplace-type'
          name:
            description: |
              Name of the marketplace. It must be longer than 3 characters and no
              longer than 128 characters.
            type: string
          slug:
            description: |
              URL slug of the marketplace. The slug cannot be changed after it
              has been set. Its' value needs to be in the right format and it has
              to be globally unique. Slug value must start with  one or more
              lowercase letters or digits, optionally followed  by zero or more
              hyphen-separated groups of lowercase letters or digits. For
              example, a valid slug value might be 'my-marketplace-123', but an
              invalid value might be 'MyMarketplace' or '123456'.
            type: string
        type: object
      title: marketplace-summary
    marketplace-type:
      description: |
        A marketplace can be either of two types universal or organizational. A
        universal marketplace is publicly available (all the users on the
        internet can access it). While an organizational marketplace can be
        accessed only by the members of the organization. Also, only
        organization members can install its marketplace items. Once the
        marketplace type value is set it can't be changed.
      enum:
      - organization
      - universal
      type: string
    marketplaces-get-request:
      properties:
        id:
          description: The marketplace DON.
          type: string
      required:
      - id
      title: marketplaces-get-request
      type: object
    marketplaces-get-response:
      properties:
        marketplace:
          $ref: '#/components/schemas/marketplace'
      required:
      - marketplace
      title: marketplaces-get-response
      type: object
      x-go-name: MarketplacesGetResponseBody
    marketplaces-list-request:
      title: marketplaces-list-request
      type: object
    marketplaces-list-response:
      properties:
        marketplaces:
          description: The list of marketplaces.
          items:
            $ref: '#/components/schemas/marketplace'
          type: array
      required:
      - marketplaces
      title: marketplaces-list-response
      type: object
      x-go-name: MarketplacesListResponseBody
    media:
      description: Media object details.
      properties:
        artifact:
          $ref: '#/components/schemas/artifact-summary'
        source:
          description: Source of the media.
          type: string
        url:
          description: URL to an external media.
          type: string
      required:
      - source
      title: media
      type: object
    meeting:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          channel:
            $ref: '#/components/schemas/meeting-channel'
          description:
            description: Description of the engagement object.
            type: string
          ended_date:
            description: Time at which meeting ended.
            format: date-time
            type: string
          external_url:
            description: External URL associated with the engagement.
            type: string
          members:
            description: The users in the engagement.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          parent:
            $ref: '#/components/schemas/atom-summary'
          recording_url:
            description: Recording URL of the meeting.
            type: string
          scheduled_date:
            description: Time at which engagement was scheduled.
            format: date-time
            type: string
          state:
            $ref: '#/components/schemas/meeting-state'
          tags:
            description: Tags associated with the object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
          title:
            description: Title of the engagement object.
            type: string
        required:
        - members
        type: object
      title: meeting
    meeting-channel:
      description: The channel of meeting.
      enum:
      - google_meet
      - offline
      - other
      - teams
      - zoom
      type: string
    meeting-engagement-summary:
      description: meeting engagement summary object.
      properties:
        channel:
          $ref: '#/components/schemas/meeting-engagement-summary-channel'
        ended_date:
          description: Time at which meeting ended.
          format: date-time
          type: string
        recording_url:
          description: Recording URL of the meeting.
          type: string
        state:
          $ref: '#/components/schemas/meeting-engagement-summary-state'
      title: meeting-engagement-summary
      type: object
    meeting-engagement-summary-channel:
      description: The channel of meeting.
      enum:
      - google_meet
      - offline
      - other
      - teams
      - zoom
      type: string
    meeting-engagement-summary-state:
      description: The state of meeting.
      enum:
      - canceled
      - completed
      - scheduled
      type: string
    meeting-state:
      description: The state of meeting.
      enum:
      - canceled
      - completed
      - scheduled
      type: string
    meeting-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: meeting-summary
    meetings-count-request:
      properties:
        parent:
          description: Filters for meetings with the provided parent.
          items:
            type: string
          type: array
      title: meetings-count-request
      type: object
    meetings-count-response:
      properties:
        count:
          description: The number of meetings matching the filter.
          format: int64
          type: integer
      required:
      - count
      title: meetings-count-response
      type: object
      x-go-name: MeetingsCountResponseBody
    meetings-create-request:
      properties:
        channel:
          $ref: '#/components/schemas/meeting-channel'
        description:
          description: The description of the meeting.
          type: string
        ended_date:
          description: Time at which meeting ended.
          format: date-time
          type: string
        external_url:
          description: External URL for the meeting.
          type: string
        members:
          description: IDs of the users that were part of the meeting.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        parent:
          description: The parent object ID in which the meeting was created.
          type: string
        recording_url:
          description: The recording url of the meeting.
          type: string
        scheduled_date:
          description: The date and time when the meeting was scheduled.
          format: date-time
          type: string
        state:
          $ref: '#/components/schemas/meeting-state'
        tags:
          description: Tags associated with the meeting.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        title:
          description: The title of the meeting.
          type: string
      required:
      - parent
      - title
      title: meetings-create-request
      type: object
    meetings-create-response:
      properties:
        meeting:
          $ref: '#/components/schemas/meeting'
      required:
      - meeting
      title: meetings-create-response
      type: object
      x-go-name: MeetingsCreateResponseBody
    meetings-delete-request:
      properties:
        id:
          description: The meeting's ID.
          type: string
      required:
      - id
      title: meetings-delete-request
      type: object
    meetings-delete-response:
      title: meetings-delete-response
      type: object
      x-go-name: MeetingsDeleteResponseBody
    meetings-get-request:
      properties:
        id:
          description: The meeting's ID.
          type: string
      required:
      - id
      title: meetings-get-request
      type: object
    meetings-get-response:
      properties:
        meeting:
          $ref: '#/components/schemas/meeting'
      required:
      - meeting
      title: meetings-get-response
      type: object
      x-go-name: MeetingsGetResponseBody
    meetings-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: The maximum number of meetings to return.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        parent:
          description: Filters for meetings with the provided parent.
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the meetings by and the direction to sort them.
          items:
            type: string
          type: array
      title: meetings-list-request
      type: object
    meetings-list-response:
      properties:
        meetings:
          description: The list of meetings.
          items:
            $ref: '#/components/schemas/meeting'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - meetings
      title: meetings-list-response
      type: object
      x-go-name: MeetingsListResponseBody
    meetings-update-request:
      properties:
        channel:
          $ref: '#/components/schemas/meeting-channel'
        description:
          description: The description of the meeting.
          type: string
        ended_date:
          description: Updates the date and time when the meeting ended.
          format: date-time
          nullable: true
          type: string
        external_url:
          description: External URL for the meeting.
          type: string
        id:
          description: The meetings ID.
          type: string
        members:
          $ref: '#/components/schemas/meetings-update-request-members'
        recording_url:
          description: The recording URL of the meeting.
          type: string
        scheduled_date:
          description: |
            Updates the date and time when the meeting was scheduled.
          format: date-time
          nullable: true
          type: string
        state:
          $ref: '#/components/schemas/meeting-state'
        tags:
          $ref: '#/components/schemas/meetings-update-request-tags'
        title:
          description: The title of the meeting.
          type: string
      required:
      - id
      title: meetings-update-request
      type: object
    meetings-update-request-members:
      properties:
        set:
          description: |
            Sets the members to the provided user IDs. This must not be empty.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: meetings-update-request-members
      type: object
    meetings-update-request-tags:
      properties:
        set:
          description: Sets the provided tags on the meeting item.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: meetings-update-request-tags
      type: object
    meetings-update-response:
      properties:
        meeting:
          $ref: '#/components/schemas/meeting'
      required:
      - meeting
      title: meetings-update-response
      type: object
      x-go-name: MeetingsUpdateResponseBody
    metric-data-point:
      properties:
        dimensions:
          description: |
            Key/Value pairs used for specifying additional attributes.
          items:
            $ref: '#/components/schemas/metric-data-point-dimension'
          type: array
        timestamp_nsecs:
          description: |
            Timestamp in unix nanoseconds when metric value is captured.
          format: int64
          type: integer
        value:
          description: Metric value denoting object usage, object state etc.
          format: double
          type: number
      required:
      - timestamp_nsecs
      - value
      title: metric-data-point
      type: object
    metric-data-point-dimension:
      properties:
        name:
          description: key is used to specify dimension name.
          type: string
        value:
          description: value is used to specify value for given dimension name.
          type: string
      required:
      - name
      - value
      title: metric-data-point-dimension
      type: object
    metric-definition:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          applies_to:
            description: |
              The list of item types on which the metric might be applied.
            items:
              $ref: '#/components/schemas/metric-definition-applies-to'
            type: array
          description:
            description: Description of the purpose and operation of the metric.
            type: string
          metric_type:
            $ref: '#/components/schemas/metric-definition-metric-type'
          name:
            description: Human readable name of the metric.
            type: string
        required:
        - applies_to
        type: object
      title: metric-definition
    metric-definition-applies-to:
      description: The list of item types on which the metric might be applied.
      enum:
      - conversation
      - issue
      - task
      - ticket
      type: string
    metric-definition-metric-type:
      description: |
        The type of the metric, differentiating time-based metrics, which
        actually track real time from other metrics tracking general values.
      enum:
      - time
      - value
      type: string
    metric-definition-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          metric_type:
            $ref: '#/components/schemas/metric-definition-metric-type'
          name:
            description: Human readable name of the metric.
            type: string
        type: object
      title: metric-definition-summary
    metric-definitions-list-request:
      properties:
        applies_to_type:
          description: The type of objects the metric definition applies to.
          items:
            $ref: '#/components/schemas/metric-definition-applies-to'
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of records to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          description: |
            Fields to sort the records by and the direction to sort them.
          items:
            type: string
          type: array
        type:
          description: The type of metric definitions sought.
          items:
            $ref: '#/components/schemas/metric-definition-metric-type'
          type: array
      title: metric-definitions-list-request
      type: object
    metric-definitions-list-response:
      properties:
        metric_definitions:
          description: The list of metric definitions.
          items:
            $ref: '#/components/schemas/metric-definition'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - metric_definitions
      title: metric-definitions-list-response
      type: object
      x-go-name: MetricDefinitionsListResponseBody
    metrics-data:
      properties:
        data_points:
          description: One or more data points collected for a given metric.
          items:
            $ref: '#/components/schemas/metric-data-point'
          type: array
        name:
          description: |
            Name of metric which is being measured. For eg. #ofAPIcalls,
            #ofActiveUsers etc.
          type: string
        org_ref:
          description: |
            Rev Org ID or customer org ref for which metric is being published.
          type: string
        user_ref:
          description: |
            Rev User ID or user ref for which metric is being published.
          type: string
      required:
      - data_points
      - name
      title: metrics-data
      type: object
    metrics-data-ingest-request:
      properties:
        metrics:
          description: Metrics records received from Dev orgs.
          items:
            $ref: '#/components/schemas/metrics-data'
          type: array
      required:
      - metrics
      title: metrics-data-ingest-request
      type: object
    mfz-defaults-seed-request:
      description: |
        A request to seed default groups, conditional roles and group members
        for the authenticated user's dev organization.
      properties:
        backfill:
          description: |
            Whether to fill the existing users into default groups for the
            authenticated dev organization.
          type: boolean
      required:
      - backfill
      title: mfz-defaults-seed-request
      type: object
    mfz-defaults-seed-response:
      description: Response object for seeding mfz defaults request.
      title: mfz-defaults-seed-response
      type: object
      x-go-name: MfzDefaultsSeedResponseBody
    microflow-action-event:
      description: Microflow action external annotated event.
      properties:
        app:
          description: The name of source app.
          type: string
        app_user_id:
          description: The user ID of the user in source app.
          type: string
        event_id:
          description: The ID of the event.
          type: string
        event_metadata:
          description: The metadata of the event.
          items:
            $ref: '#/components/schemas/key-value-pair'
          type: array
        event_summary:
          description: The summary of the event.
          type: string
        event_type:
          description: The type of the event.
          type: string
        event_url:
          description: The URL of the event.
          type: string
        message:
          description: The message in the event.
          type: string
      title: microflow-action-event
      type: object
    microflow-definition:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          categorization_fields_json:
            description: |
              JSON defining how microflow is categorized for object type.
            type: string
          defined_on_object_type:
            $ref: '#/components/schemas/microflow-definition-defined-on-object-type'
          description:
            description: Description of the microflow.
            type: string
          draft_of_microflow_id:
            $ref: '#/components/schemas/atom-summary'
          name:
            description: Name of the microflow.
            type: string
          publish_status:
            $ref: '#/components/schemas/microflow-definition-publish-status'
          state_field_path:
            description: Path of the state field (in dotted notation).
            type: string
          states:
            description: |
              Possible states of the object on which microflow is defined.
            items:
              $ref: '#/components/schemas/microflow-target-object-state'
            type: array
          transitions:
            description: Possible transitions in the microflow.
            items:
              $ref: '#/components/schemas/microflow-target-object-transition'
            type: array
        type: object
      title: microflow-definition
    microflow-definition-defined-on-object-type:
      description: Object type on which the microflow is defined on.
      enum:
      - part
      - work
      type: string
    microflow-definition-publish-status:
      description: Publish status of the microflow.
      enum:
      - active
      - deprecated
      - draft
      type: string
    microflow-definition-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: microflow-definition-summary
    microflow-definitions-create-draft-request:
      properties:
        published_microflow_id:
          description: |
            The DON of the published microflow whose draft is being created.
            The draft microflow will be created as a copy of the published
            microflow.
          type: string
      required:
      - published_microflow_id
      title: microflow-definitions-create-draft-request
      type: object
    microflow-definitions-create-draft-response:
      properties:
        microflow_definition:
          $ref: '#/components/schemas/microflow-definition'
      required:
      - microflow_definition
      title: microflow-definitions-create-draft-response
      type: object
      x-go-name: MicroflowDefinitionsCreateDraftResponseBody
    microflow-definitions-create-request:
      properties:
        microflow_definition:
          $ref: '#/components/schemas/create-microflow-definition'
      required:
      - microflow_definition
      title: microflow-definitions-create-request
      type: object
    microflow-definitions-create-response:
      properties:
        microflow_definition:
          $ref: '#/components/schemas/microflow-definition'
      required:
      - microflow_definition
      title: microflow-definitions-create-response
      type: object
      x-go-name: MicroflowDefinitionsCreateResponseBody
    microflow-definitions-delete-request:
      properties:
        id:
          description: The microflow definition's ID.
          type: string
      required:
      - id
      title: microflow-definitions-delete-request
      type: object
    microflow-definitions-get-draft-request:
      properties:
        published_microflow_id:
          description: The published microflow's DON
          type: string
      required:
      - published_microflow_id
      title: microflow-definitions-get-draft-request
      type: object
    microflow-definitions-get-draft-response:
      properties:
        microflow_definition:
          $ref: '#/components/schemas/microflow-definition'
      required:
      - microflow_definition
      title: microflow-definitions-get-draft-response
      type: object
      x-go-name: MicroflowDefinitionsGetDraftResponseBody
    microflow-definitions-get-or-create-draft-request:
      properties:
        published_microflow_id:
          description: The published microflow's DON
          type: string
      required:
      - published_microflow_id
      title: microflow-definitions-get-or-create-draft-request
      type: object
    microflow-definitions-get-or-create-draft-response:
      properties:
        microflow_definition:
          $ref: '#/components/schemas/microflow-definition'
      required:
      - microflow_definition
      title: microflow-definitions-get-or-create-draft-response
      type: object
      x-go-name: MicroflowDefinitionsGetOrCreateDraftResponseBody
    microflow-definitions-get-request:
      properties:
        id:
          description: The microflow definition's ID.
          type: string
      required:
      - id
      title: microflow-definitions-get-request
      type: object
    microflow-definitions-get-response:
      properties:
        microflow_definition:
          $ref: '#/components/schemas/microflow-definition'
      required:
      - microflow_definition
      title: microflow-definitions-get-response
      type: object
      x-go-name: MicroflowDefinitionsGetResponseBody
    microflow-definitions-list-request:
      properties:
        page:
          description: Page number for paginated microflow definition items.
          format: int32
          type: integer
        per_page:
          description: |
            Number of microflow definition items to return per page. Default is
            50.
          format: int32
          type: integer
        sort_by:
          description: |
            List of fields to sort the microflow definition items by and how to
            sort them. Default is to sort by created_date in descending order.
          items:
            type: string
          type: array
      title: microflow-definitions-list-request
      type: object
    microflow-definitions-list-response:
      properties:
        microflow_definitions:
          description: List of microflow definitions.
          items:
            $ref: '#/components/schemas/microflow-definition'
          type: array
        total:
          description: |
            Total number of microflow definition items for the request. The
            microflow definition items in the response correspond to just one
            page of results which makes up a portion of the total.
          format: int32
          type: integer
      required:
      - microflow_definitions
      - total
      title: microflow-definitions-list-response
      type: object
      x-go-name: MicroflowDefinitionsListResponseBody
    microflow-definitions-publish-request:
      properties:
        id:
          description: The microflow definition's ID.
          type: string
      required:
      - id
      title: microflow-definitions-publish-request
      type: object
    microflow-definitions-update-request:
      properties:
        id:
          description: The microflow definition's ID.
          type: string
        microflow_definition:
          $ref: '#/components/schemas/update-microflow-definition'
      required:
      - id
      - microflow_definition
      title: microflow-definitions-update-request
      type: object
    microflow-definitions-update-response:
      properties:
        microflow_definition:
          $ref: '#/components/schemas/microflow-definition'
      required:
      - microflow_definition
      title: microflow-definitions-update-response
      type: object
      x-go-name: MicroflowDefinitionsUpdateResponseBody
    microflow-target-object-state:
      description: Represents state of object on which microflow is defined.
      properties:
        description:
          description: Description of the state.
          type: string
        id:
          description: System generated ID of the state.
          type: string
        name:
          description: Name of the state.
          type: string
      title: microflow-target-object-state
      type: object
    microflow-target-object-transition:
      description: Defined logic for transition between states.
      properties:
        allowed_triggers:
          description: Set of triggers which could execute this transition.
          items:
            $ref: '#/components/schemas/microflow-trigger-definition'
          type: array
        conditions:
          $ref: '#/components/schemas/policy-instance'
        description:
          description: Description of the transition.
          type: string
        from_states:
          description: Set of source states for the transition.
          items:
            type: string
          type: array
        global:
          description: Whether this is a global transition.
          type: boolean
        id:
          description: |
            Identifier for this transition (unique within a microflow).
          type: string
        initial:
          description: Whether this is an initial transition.
          type: boolean
        is_ui_action:
          description: Whether a button is displayed for the transition.
          type: boolean
        name:
          description: The name of the transition, unique within a microflow.
          type: string
        post_function_definitions_ids:
          description: |
            Functions executed asynchronously, on transition success.
          items:
            $ref: '#/components/schemas/atom-summary'
          type: array
        pre_function_definitions_ids:
          description: Functions executed synchronously with state change.
          items:
            $ref: '#/components/schemas/atom-summary'
          type: array
        to_state:
          description: The destination state of the transition.
          type: string
        validations:
          $ref: '#/components/schemas/policy-instance'
      title: microflow-target-object-transition
      type: object
    microflow-trigger-definition:
      description: Defines a trigger for a microflow.
      properties:
        config:
          description: |
            Configuration defining applicable events from the source.
          type: string
        event_source_id:
          description: ID of the event source being subscribed.
          type: string
        event_source_id_v1:
          description: ID of the event source being subscribed.
          type: string
      title: microflow-trigger-definition
      type: object
    microflows-target-object-states-create-request:
      properties:
        microflow_id:
          description: The microflow definition's ID.
          type: string
        state:
          $ref: '#/components/schemas/create-microflow-target-object-state'
      required:
      - microflow_id
      - state
      title: microflows-target-object-states-create-request
      type: object
    microflows-target-object-states-create-response:
      properties:
        state:
          $ref: '#/components/schemas/microflow-target-object-state'
      required:
      - state
      title: microflows-target-object-states-create-response
      type: object
      x-go-name: MicroflowsTargetObjectStatesCreateResponseBody
    microflows-target-object-states-delete-request:
      properties:
        microflow_id:
          description: The microflow definition's ID.
          type: string
        state_id:
          description: The state's ID.
          type: string
      required:
      - microflow_id
      - state_id
      title: microflows-target-object-states-delete-request
      type: object
    microflows-target-object-states-update-request:
      properties:
        microflow_id:
          description: The microflow definition's ID.
          type: string
        state:
          $ref: '#/components/schemas/update-microflow-target-object-state'
        state_id:
          description: The state's ID.
          type: string
      required:
      - microflow_id
      - state
      - state_id
      title: microflows-target-object-states-update-request
      type: object
    microflows-target-object-states-update-response:
      properties:
        state:
          $ref: '#/components/schemas/microflow-target-object-state'
      required:
      - state
      title: microflows-target-object-states-update-response
      type: object
      x-go-name: MicroflowsTargetObjectStatesUpdateResponseBody
    microflows-target-object-transitions-create-request:
      properties:
        microflow_id:
          description: The microflow definition's ID.
          type: string
        transition:
          $ref: '#/components/schemas/create-microflow-target-object-transition'
      required:
      - microflow_id
      - transition
      title: microflows-target-object-transitions-create-request
      type: object
    microflows-target-object-transitions-create-response:
      properties:
        transition:
          $ref: '#/components/schemas/microflow-target-object-transition'
      required:
      - transition
      title: microflows-target-object-transitions-create-response
      type: object
      x-go-name: MicroflowsTargetObjectTransitionsCreateResponseBody
    microflows-target-object-transitions-delete-request:
      properties:
        microflow_id:
          description: The microflow definition's ID.
          type: string
        transition_id:
          description: The transition's ID.
          type: string
      required:
      - microflow_id
      - transition_id
      title: microflows-target-object-transitions-delete-request
      type: object
    microflows-target-object-transitions-update-request:
      properties:
        microflow_id:
          description: The microflow definition's ID.
          type: string
        transition:
          $ref: '#/components/schemas/update-microflow-target-object-transition'
        transition_id:
          description: The transition's ID.
          type: string
      required:
      - microflow_id
      - transition
      - transition_id
      title: microflows-target-object-transitions-update-request
      type: object
    microflows-target-object-transitions-update-response:
      properties:
        transition:
          $ref: '#/components/schemas/microflow-target-object-transition'
      required:
      - transition
      title: microflows-target-object-transitions-update-response
      type: object
      x-go-name: MicroflowsTargetObjectTransitionsUpdateResponseBody
    microservice:
      allOf:
      - $ref: '#/components/schemas/part-base'
      - properties:
          development_owner:
            $ref: '#/components/schemas/user-summary'
          pm_owner:
            $ref: '#/components/schemas/user-summary'
          qa_owner:
            $ref: '#/components/schemas/user-summary'
        type: object
      title: microservice
    microservice-summary:
      allOf:
      - $ref: '#/components/schemas/part-base-summary'
      title: microservice-summary
    mutation-info-field:
      description: Mutation purpose and related metadata.
      properties:
        merged_to_part:
          $ref: '#/components/schemas/part-summary'
        old_parent_parts:
          description: Parent Ids of the part before mutation.
          items:
            $ref: '#/components/schemas/part-summary'
          type: array
        promoted_part:
          $ref: '#/components/schemas/part-summary'
        purpose:
          description: Purpose of mutation.
          type: string
      required:
      - old_parent_parts
      title: mutation-info-field
      type: object
    new-invoice-item-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: new-invoice-item-summary
    new-invoice-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: new-invoice-summary
    news:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          access_level:
            $ref: '#/components/schemas/access-level'
          content:
            $ref: '#/components/schemas/content'
          cover_media:
            description: Media that is shown on the cover of the news.
            items:
              $ref: '#/components/schemas/media'
            type: array
          keywords:
            description: Keywords associated with the object.
            items:
              type: string
            type: array
          scheduled_from:
            description: |
              Timestamp from when this news will be visible in the feed.
            format: date-time
            type: string
          scheduled_until:
            description: |
              Timestamp until when this news will be visible in the feed.
            format: date-time
            type: string
          status:
            description: Status of the news post.
            type: string
          title:
            description: Title of the news.
            type: string
        required:
        - content
        - title
        type: object
      title: news
    news-create-request:
      description: The request to create a news item.
      properties:
        content:
          $ref: '#/components/schemas/news-create-request-news-content'
        cover_media:
          description: Cover media for the news item.
          items:
            $ref: '#/components/schemas/news-create-request-news-media'
          type: array
        keywords:
          description: Keywords that describe the news item.
          items:
            type: string
          type: array
        scheduled_from:
          description: The time at which the news item is scheduled.
          format: date-time
          type: string
        scheduled_until:
          description: The time until when the news item is scheduled.
          format: date-time
          type: string
        status:
          $ref: '#/components/schemas/news-create-request-status-value'
        title:
          description: Title of the news item.
          type: string
      required:
      - content
      - cover_media
      - keywords
      - title
      title: news-create-request
      type: object
    news-create-request-news-content:
      properties:
        body:
          description: Body of the news item.
          type: string
        format:
          description: Format of the content in the new item.
          type: string
      required:
      - body
      - format
      title: news-create-request-news-content
      type: object
    news-create-request-news-media:
      properties:
        artifact:
          description: |
            ID of the artifact, otherwise not set if the source type isn't
            'artifact'.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        source:
          enum:
          - artifact
          - url
          type: string
        url:
          description: |
            URL of the external media, otherwise not set if the source type
            isn't 'url'.
          type: string
      title: news-create-request-news-media
      type: object
    news-create-request-status-value:
      enum:
      - archived
      - draft
      - published
      type: string
    news-create-response:
      description: The response for the create news item request.
      properties:
        news:
          $ref: '#/components/schemas/news'
      required:
      - news
      title: news-create-response
      type: object
      x-go-name: NewsCreateResponseBody
    news-delete-request:
      description: The request to delete a news item.
      properties:
        id:
          description: The ID of the news item.
          type: string
      required:
      - id
      title: news-delete-request
      type: object
    news-get-request:
      description: The request to get a news item.
      properties:
        id:
          description: The ID of the requested news item.
          type: string
      required:
      - id
      title: news-get-request
      type: object
    news-get-response:
      description: The response for the get news item request.
      properties:
        news:
          $ref: '#/components/schemas/news'
      required:
      - news
      title: news-get-response
      type: object
      x-go-name: NewsGetResponseBody
    news-list-request:
      description: The request to list news items.
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of news items to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
      title: news-list-request
      type: object
    news-list-response:
      description: The response for the list news request.
      properties:
        news:
          description: The news entries matching the request.
          items:
            $ref: '#/components/schemas/news'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - news
      title: news-list-response
      type: object
      x-go-name: NewsListResponseBody
    news-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: news-summary
    notification:
      discriminator:
        mapping:
          conversation_created_notification: '#/components/schemas/conversation-created-notification'
          conversation_inactivity_reminder: '#/components/schemas/conversation-inactivity-reminder'
          devrev_reminder: '#/components/schemas/devrev-reminder'
          object_assignment_notification: '#/components/schemas/object-assignment-notification'
          pr_review_reminder: '#/components/schemas/pr-review-reminder'
          user_mentioned_notification: '#/components/schemas/user-mentioned-notification'
          user_participation_notification: '#/components/schemas/user-participation-notification'
          vista_shared_notification: '#/components/schemas/vista-shared-notification'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/conversation-created-notification'
      - $ref: '#/components/schemas/conversation-inactivity-reminder'
      - $ref: '#/components/schemas/devrev-reminder'
      - $ref: '#/components/schemas/object-assignment-notification'
      - $ref: '#/components/schemas/pr-review-reminder'
      - $ref: '#/components/schemas/user-mentioned-notification'
      - $ref: '#/components/schemas/user-participation-notification'
      - $ref: '#/components/schemas/vista-shared-notification'
      properties:
        type:
          $ref: '#/components/schemas/notification-type'
      required:
      - type
      title: notification
      type: object
    notification-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          actor:
            $ref: '#/components/schemas/user-summary'
          origin:
            description: Origin of the notification.
            type: string
          parent:
            $ref: '#/components/schemas/atom-summary'
          parent_type:
            description: |
              The object type of parent associated with the notification.
            type: string
          priority:
            $ref: '#/components/schemas/notification-priority'
          state:
            $ref: '#/components/schemas/notification-state'
          timestamp:
            description: Timestamp of the event that triggered the notification.
            format: date-time
            type: string
          user:
            $ref: '#/components/schemas/user-summary'
        type: object
      title: notification-base
    notification-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          actor:
            $ref: '#/components/schemas/user-summary'
          parent:
            $ref: '#/components/schemas/atom-summary'
          state:
            $ref: '#/components/schemas/notification-state'
        type: object
      title: notification-base-summary
    notification-parent-type:
      description: Notification parent types.
      enum:
      - account
      - conversation
      - issue
      - part
      - rev_org
      - rev_user
      - ticket
      type: string
    notification-preferences-group:
      description: Preferences group for Notifications.
      properties:
        email_notifications:
          $ref: '#/components/schemas/notification-preferences-group-email-notifications'
      title: notification-preferences-group
      type: object
    notification-preferences-group-email-notifications:
      description: Email notifications.
      enum:
      - all
      - important
      - nothing
      type: string
    notification-priority:
      description: Priority of the notification.
      enum:
      - high
      - low
      - medium
      type: string
    notification-state:
      description: The state of the notification.
      enum:
      - archived
      - read
      - unread
      type: string
    notification-type:
      enum:
      - conversation_created_notification
      - conversation_inactivity_reminder
      - devrev_reminder
      - object_assignment_notification
      - pr_review_reminder
      - user_mentioned_notification
      - user_participation_notification
      - vista_shared_notification
      type: string
    notifications-channel:
      properties:
        channel_id:
          description: ID of the channel.
          type: string
        description:
          description: Description of the channel.
          type: string
        name:
          description: Name of the channel.
          type: string
      required:
      - channel_id
      - name
      title: notifications-channel
      type: object
    notifications-channels-request:
      properties:
        device_type:
          description: The type of mobile device.
          type: string
      title: notifications-channels-request
      type: object
    notifications-channels-response:
      properties:
        channels:
          description: The list of notification channels.
          items:
            $ref: '#/components/schemas/notifications-channel'
          type: array
      required:
      - channels
      title: notifications-channels-response
      type: object
      x-go-name: NotificationsChannelsResponseBody
    notifications-filter:
      properties:
        actor_ids:
          description: Actor user IDs by which to filter the response.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        ids:
          description: Notification IDs by which to filter the response.
          items:
            type: string
          type: array
        parent_ids:
          description: Parent IDs by which to filter the response.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        parent_types:
          description: Parent object types by which to filter the response.
          items:
            $ref: '#/components/schemas/notification-parent-type'
          type: array
        states:
          description: Notification states by which to filter the response.
          items:
            $ref: '#/components/schemas/notification-state'
          type: array
        types:
          description: Notification types by which to filter the response.
          items:
            $ref: '#/components/schemas/notification-type'
          type: array
      title: notifications-filter
      type: object
    notifications-group:
      properties:
        cursor:
          description: |
            The cursor from where to resume iteration. If not provided, then
            iteration has completed.
          type: string
        key:
          description: Grouping key.
          type: string
        notifications:
          description: List of notifications as grouped by the grouping key.
          items:
            $ref: '#/components/schemas/notification'
          type: array
      required:
      - key
      - notifications
      title: notifications-group
      type: object
    notifications-group-request:
      properties:
        actor_ids:
          description: Actor user IDs by which to filter the response.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor from where to begin iteration. Start from beginning if
            not provided.
          type: string
        group_by:
          description: The field to group the notifications by.
          type: string
        ids:
          description: Notification IDs by which to filter the response.
          items:
            type: string
          type: array
        limit:
          description: |
            The maximum number of groups to return. If not set, then the
            default is '10'.
          format: int32
          type: integer
        limit_per_group:
          description: |
            The maximum number of notifications to return for an individual
            group. Default is '50'.
          format: int32
          type: integer
        parent_ids:
          description: Parent IDs by which to filter the response.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        parent_types:
          description: Parent object types by which to filter the response.
          items:
            $ref: '#/components/schemas/notification-parent-type'
          type: array
        sort_by:
          description: Comma-separated fields to sort the notifications by.
          items:
            type: string
          type: array
        states:
          description: Notification states by which to filter the response.
          items:
            $ref: '#/components/schemas/notification-state'
          type: array
        types:
          description: Notification types by which to filter the response.
          items:
            $ref: '#/components/schemas/notification-type'
          type: array
      required:
      - group_by
      title: notifications-group-request
      type: object
    notifications-group-response:
      properties:
        cursor:
          description: |
            The cursor from where to resume iteration for the groups. If not
            provided, then iteration has completed.
          type: string
        groups:
          description: The list of groups.
          items:
            $ref: '#/components/schemas/notifications-group'
          type: array
        total:
          description: The total number of notifications available.
          format: int32
          type: integer
        total_groups:
          description: The total number of groups of notifications available.
          format: int32
          type: integer
      required:
      - groups
      - total
      - total_groups
      title: notifications-group-response
      type: object
      x-go-name: NotificationsGroupResponseBody
    notifications-list-request:
      description: Notifications list request.
      properties:
        actor_ids:
          description: Actor user IDs by which to filter the response.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor from where to begin iteration. Start from beginning if
            not provided.
          type: string
        ids:
          description: Notification IDs by which to filter the response.
          items:
            type: string
          type: array
        limit:
          description: |
            The maximum number of notifications to return. Default is 50.
          format: int32
          type: integer
        parent_ids:
          description: Parent IDs by which to filter the response.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        parent_types:
          description: Parent object types by which to filter the response.
          items:
            $ref: '#/components/schemas/notification-parent-type'
          type: array
        sort_by:
          description: Comma-separated fields to sort the notifications by.
          items:
            type: string
          type: array
        states:
          description: Notification states by which to filter the response.
          items:
            $ref: '#/components/schemas/notification-state'
          type: array
        types:
          description: Notification types by which to filter the response.
          items:
            $ref: '#/components/schemas/notification-type'
          type: array
      title: notifications-list-request
      type: object
    notifications-list-response:
      description: Notifications list response.
      properties:
        cursor:
          description: |
            The cursor from where to resume iteration. If not provided, then
            iteration has completed.
          type: string
        notifications:
          description: The list of the notifications.
          items:
            $ref: '#/components/schemas/notification'
          type: array
        total:
          description: The total number of notifications available.
          format: int32
          type: integer
      required:
      - notifications
      - total
      title: notifications-list-response
      type: object
      x-go-name: NotificationsListResponseBody
    notifications-mark-request:
      properties:
        filter:
          $ref: '#/components/schemas/notifications-filter'
        state:
          $ref: '#/components/schemas/notification-state'
      title: notifications-mark-request
      type: object
    notifications-send-request:
      properties:
        notifications:
          description: The list of notifications to send.
          items:
            $ref: '#/components/schemas/send-notification'
          type: array
      required:
      - notifications
      title: notifications-send-request
      type: object
    notifications-send-response:
      title: notifications-send-response
      type: object
      x-go-name: NotificationsSendResponseBody
    oasis-data:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          data_window:
            $ref: '#/components/schemas/time-range'
          metric_name:
            description: The name of the metric.
            type: string
          path:
            description: Path to where the metric data is stored.
            type: string
          rev_org:
            $ref: '#/components/schemas/org-summary'
          size:
            description: Size of the file containing the metric data (bytes).
            format: int32
            type: integer
        required:
        - data_window
        - metric_name
        - path
        - size
        type: object
      title: oasis-data
    oasis-data-create-request:
      description: The request to create the data for a metric.
      properties:
        data_path:
          description: The path where the data is located.
          type: string
        metric_name:
          description: The name of the metric.
          type: string
        rev_org:
          description: The Rev org for which the data belongs.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        size:
          description: The size of the data in bytes.
          format: int64
          type: integer
        time_range:
          $ref: '#/components/schemas/time-range'
      required:
      - data_path
      - metric_name
      - size
      - time_range
      title: oasis-data-create-request
      type: object
    oasis-data-create-response:
      description: The response to creating the oasis data.
      properties:
        data:
          $ref: '#/components/schemas/oasis-data'
      required:
      - data
      title: oasis-data-create-response
      type: object
      x-go-name: OasisDataCreateResponseBody
    oasis-data-fetch-request:
      description: |
        The request to get information related to the data for a metric.
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of data items to return. The default is '50'.
          format: int32
          type: integer
        metric_name:
          description: The metric name for which the data is requested.
          type: string
        mode:
          $ref: '#/components/schemas/list-mode'
        rev_org:
          description: |
            Filters the data that is associated with any of the provided Rev
            organizations.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        time_range:
          $ref: '#/components/schemas/date-filter'
      title: oasis-data-fetch-request
      type: object
    oasis-data-fetch-response:
      description: The response to fetching the oasis data.
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        oasis_data:
          description: The list of data items.
          items:
            $ref: '#/components/schemas/oasis-data'
          type: array
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - oasis_data
      title: oasis-data-fetch-response
      type: object
      x-go-name: OasisDataFetchResponseBody
    oasis-data-query-request:
      description: The request to query the data for a metric.
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of query results to return. The default is '50'.
          format: int32
          type: integer
        metric_name:
          description: The metric name for which the data is requested.
          type: string
        mode:
          $ref: '#/components/schemas/list-mode'
        query:
          description: Query to be executed on the metric table.
          type: string
        rev_org:
          description: |
            Filters the data that is associated with any of the provided Rev
            organizations.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        time_range:
          $ref: '#/components/schemas/date-filter'
      required:
      - query
      title: oasis-data-query-request
      type: object
    oasis-data-query-response:
      description: The response to quering the oasis data.
      properties:
        metadata:
          description: The result set of the query.
          nullable: true
          type: object
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - metadata
      title: oasis-data-query-response
      type: object
      x-go-name: OasisDataQueryResponseBody
    oasis-data-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: oasis-data-summary
    object-assignment-notification:
      allOf:
      - $ref: '#/components/schemas/notification-base'
      - properties:
          source:
            $ref: '#/components/schemas/atom-summary'
        type: object
      title: object-assignment-notification
    object-assignment-notification-summary:
      allOf:
      - $ref: '#/components/schemas/notification-base-summary'
      title: object-assignment-notification-summary
    object-frame:
      properties:
        action_type:
          $ref: '#/components/schemas/action-type-value'
        id:
          type: string
      required:
      - action_type
      - id
      title: object-frame
      type: object
    object-member:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          member:
            $ref: '#/components/schemas/atom-summary'
          member_rev_org:
            $ref: '#/components/schemas/org-summary'
          object:
            $ref: '#/components/schemas/atom-summary'
          target_object_type:
            description: Type of target object.
            type: string
          valid_from_date:
            description: Timestamp when this membership is valid.
            format: date-time
            type: string
          valid_to_date:
            description: Timestamp when this membership expires.
            format: date-time
            type: string
        type: object
      title: object-member
    object-member-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: object-member-summary
    object-member-v1:
      description: Object member.
      properties:
        conditional_roles:
          description: Conditional roles the membership includes.
          items:
            $ref: '#/components/schemas/conditional-role-v1'
          type: array
        member_id:
          $ref: '#/components/schemas/atom-summary'
        member_type:
          $ref: '#/components/schemas/object-member-v1-member-type'
        valid_from_date:
          description: Timestamp when this membership is valid.
          format: date-time
          type: string
        valid_to_date:
          description: Timestamp when this membership expires.
          format: date-time
          type: string
      required:
      - conditional_roles
      title: object-member-v1
      type: object
    object-member-v1-member-type:
      description: Type of this member.
      enum:
      - group
      - user
      type: string
    object-reaction:
      description: Reaction.
      properties:
        emoji_id:
          description: ID of the timeline reaction.
          type: string
        reaction_count:
          description: Count of reactions.
          format: int32
          type: integer
      title: object-reaction
      type: object
    object-type-proto:
      enum:
      - access_control_entry
      - account
      - addon_rule
      - alert
      - api_operation
      - api_parameter
      - app_fragment
      - article
      - artifact
      - auth0_user
      - automation
      - bug
      - capability
      - change_event
      - code
      - collection
      - command
      - comment
      - communication
      - component
      - conditional_role
      - conversation
      - conversation_created
      - conversation_inactivity_reminder
      - credit
      - credit_coupon
      - custom_object
      - custom_part
      - custom_schema_fragment
      - custom_stage
      - custom_state
      - custom_type
      - custom_type_fragment
      - custom_work
      - dev_org
      - dev_org_commerce_details
      - dev_user
      - devrev_profile
      - devrev_reminder
      - devu_invite
      - discovery_git_commit
      - discovery_git_event
      - discovery_profile
      - discovery_run
      - discovery_settings
      - emoji
      - engagement
      - enhancement
      - event_source
      - external_sync_unit
      - external_system
      - external_system_type
      - feature
      - feature_pin
      - flow
      - function_definition
      - group
      - incident
      - invalid
      - invoice
      - invoice_line_item
      - issue
      - job
      - keyring
      - link
      - linkable
      - linkable_pin
      - marketplace
      - marketplace_category
      - marketplace_item
      - marketplace_submission
      - meeting
      - metric_definition
      - metric_tracker
      - microflow_definition
      - microservice
      - namespace
      - news
      - oasis_data
      - object_assignment
      - object_member
      - one_time_line_item
      - opportunity
      - org_preferences
      - org_schedule
      - org_schedule_fragment
      - part_pin
      - payment_method_bank_account
      - payment_method_card
      - plug_preferences
      - plug_setting
      - pr_review_reminder
      - pricing
      - problem
      - product
      - project
      - push_device
      - question_answer
      - real_time_insight
      - real_time_insight_value
      - recurring_line_item
      - request
      - rev_org
      - rev_org_commerce_details
      - rev_user
      - reward
      - reward_transaction
      - role
      - room
      - rule
      - runnable
      - runnable_pin
      - schedule
      - schedule_fragment
      - schema
      - service_plan
      - settings
      - sku
      - sku_rule
      - sla
      - sla_policy
      - sla_tracker
      - snap_component
      - snap_in
      - snap_in_function
      - snap_in_package
      - snap_in_version
      - snap_kit_action
      - stage_diagram
      - stock_schema_fragment
      - survey
      - survey_response
      - svc_acc
      - sync_history
      - sync_unit
      - sys_user
      - tag
      - task
      - tenant_fragment
      - ticket
      - timeline_event
      - token
      - uom
      - user_mention
      - user_participation
      - user_preferences
      - vista
      - vista_group_item
      - vista_shared
      - webhook
      - webhook_event
      - window_based_insight
      - window_based_insight_value
      type: string
    onboarding-task:
      properties:
        closed:
          description: Whether the task has been closed.
          type: boolean
        metadata:
          description: The metadata for the task.
          nullable: true
          type: object
        name:
          description: The name of the task.
          type: string
      required:
      - closed
      - metadata
      - name
      title: onboarding-task
      type: object
    onboarding-tasks-apply-request:
      properties:
        namespace:
          description: The namespace to apply the tasks to.
          type: string
        tasks:
          description: |
            Set the provided tasks. The tasks' prior data will be overwritten.
          items:
            $ref: '#/components/schemas/onboarding-task'
          type: array
      title: onboarding-tasks-apply-request
      type: object
    onboarding-tasks-apply-response:
      properties:
        tasks:
          description: The tasks available to the user.
          items:
            $ref: '#/components/schemas/onboarding-task'
          type: array
      required:
      - tasks
      title: onboarding-tasks-apply-response
      type: object
      x-go-name: OnboardingTasksApplyResponseBody
    one-time-items-list-request:
      properties:
        ids:
          description: |
            The list of one time line item DONs which are to be aggregated.
          items:
            type: string
          type: array
        is_invoiced:
          description: Filter, invoiced vs un-invoiced service plan objects.
          type: boolean
        rev_org_ids:
          description: The list of rev org DONs which are to be aggregated.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        service_plan_ids:
          description: |
            The list of service plan DONs which are to be aggregated.
          items:
            type: string
          type: array
        sort_by:
          description: |
            List of fields to sort the one time line item object, by and how to
            sort them. Default is to sort by created_date in descending order.
          items:
            type: string
          type: array
      title: one-time-items-list-request
      type: object
    one-time-items-list-response:
      properties:
        one_time_line_items:
          description: The list of one time line item objects.
          items:
            $ref: '#/components/schemas/one-time-line-item'
          type: array
      required:
      - one_time_line_items
      title: one-time-items-list-response
      type: object
      x-go-name: OneTimeItemsListResponseBody
    one-time-line-item:
      allOf:
      - $ref: '#/components/schemas/line-item-base'
      - properties:
          is_invoiced:
            description: Tells if the item is part of any invoice.
            type: boolean
        required:
        - is_invoiced
        type: object
      title: one-time-line-item
    one-time-line-item-summary:
      allOf:
      - $ref: '#/components/schemas/line-item-base-summary'
      title: one-time-line-item-summary
    operation-type:
      enum:
      - create
      - delete
      - execute
      - list
      - read
      - update
      type: string
    opportunity:
      allOf:
      - $ref: '#/components/schemas/work-base'
      - properties:
          account:
            $ref: '#/components/schemas/atom-summary'
          amount:
            description: Total opportunity amount.
            format: double
            type: number
          contacts:
            description: Contacts involved in the opportunity.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          customer_budget:
            description: Budget of the customer.
            format: double
            type: number
          probability:
            description: |
              Probability of winning the deal, value lies between 0.0 and 1.0.
            format: double
            type: number
        type: object
      title: opportunity
    opportunity-summary:
      allOf:
      - $ref: '#/components/schemas/work-base-summary'
      - properties:
          account:
            $ref: '#/components/schemas/atom-summary'
        type: object
      title: opportunity-summary
    org-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          address:
            $ref: '#/components/schemas/postal-address'
          display_name:
            description: Name of the Organization.
            type: string
          environment:
            $ref: '#/components/schemas/org-environment'
          logo_id:
            $ref: '#/components/schemas/artifact-summary'
          phone_number:
            description: Phone numbers of the Organization.
            items:
              $ref: '#/components/schemas/phone-number'
            type: array
          phone_numbers:
            description: Phone numbers of the Organization.
            items:
              type: string
            type: array
          state:
            $ref: '#/components/schemas/org-state'
        type: object
      title: org-base
    org-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          display_name:
            description: Name of the Organization.
            type: string
          logo_id:
            $ref: '#/components/schemas/artifact-summary'
        type: object
      title: org-base-summary
    org-environment:
      description: |
        The environment of the Org. Defaults to 'production' if not specified.
      enum:
      - production
      - staging
      - test
      type: string
    org-preferences:
      allOf:
      - $ref: '#/components/schemas/preferences-base'
      - properties:
          autoresponse_initial_message:
            description: Automated initial response message.
            type: string
          new_conversation_notified_to:
            description: |
              Users who are notified when a new conversation is created.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          rev_portal:
            $ref: '#/components/schemas/rev-portal-group'
          support:
            $ref: '#/components/schemas/support-preferences-group'
          weekly_analytics_report_recipients:
            description: |
              Groups or users to send the analytics report to. If not specified,
              send to all users in the organization.
            items:
              $ref: '#/components/schemas/atom-summary'
            type: array
        type: object
      title: org-preferences
    org-preferences-summary:
      allOf:
      - $ref: '#/components/schemas/preferences-base-summary'
      title: org-preferences-summary
    org-schedule:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          default_weekly_org_schedule:
            $ref: '#/components/schemas/weekly-org-schedule'
          min_valid_days:
            description: |
              The schedule must be valid and well-defined for at least this many
              days in the future, otherwise a warning notification is generated.
              Considered to be 0 if not specified.
            format: int32
            type: integer
          name:
            description: Human-readable name.
            type: string
          org_schedule_fragments:
            description: |
              The list of org_schedule_fragments. It must be an ordered list of
              contiguous fragments (the next starting when the previous one
              ends), updates in a published org_schedule are only allowed to add
              new ones to the future.
            items:
              $ref: '#/components/schemas/archetype-org-schedule-fragment-summary'
            type: array
          status:
            $ref: '#/components/schemas/org-schedule-status'
          timezone:
            description: |
              Timezone in which this is defined. Only organization schedules in
              the same timezone can be directly combined.
            type: string
          valid_until:
            description: |
              Derived field indicating when a valid organization schedule will
              become invalid. If omitted the schedule is already not valid. A
              schedule is valid if it has a weekly schedule for all named periods
              for all its schedule fragments, and if it has a schedule fragment
              for the time period in question.
            format: date-time
            type: string
          weekly_org_schedules:
            description: |
              If the organization schedule fragment specifies that the given day
              belongs to a named period, a weekly schedule from this list with
              the matching name will be selected.
            items:
              $ref: '#/components/schemas/weekly-org-schedule'
            type: array
        required:
        - status
        type: object
      title: org-schedule
    org-schedule-fragment:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          from:
            description: |
              The date (inclusive) on which the organization schedule fragment
              begins.
            format: date-time
            type: string
          intervals:
            description: |
              Periods during which the schedule is considered to be 'off' or to
              be in some specific named period.
            items:
              $ref: '#/components/schemas/org-schedule-interval'
            type: array
          name:
            description: |
              Human-readable name, describing the purpose of the schedule.
            type: string
          region_codes:
            description: |
              CLDR region code of the countries/regions it is meant to be valid
              for. Does not drive logic, serves only for easier filtering and
              organization.
            items:
              type: string
            type: array
          status:
            $ref: '#/components/schemas/org-schedule-fragment-status'
          to:
            description: |
              The date (exclusive) on which the organization schedule fragment's
              validity ends.
            format: date-time
            type: string
        required:
        - status
        type: object
      title: org-schedule-fragment
    org-schedule-fragment-status:
      description: |
        Status determines how an item can be used. In 'draft' status an item
        can be edited but can't be used. When 'published' the item can longer
        be edited but can be used. 'Archived' is read-only.
      enum:
      - archived
      - draft
      - published
      type: string
    org-schedule-fragment-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          from:
            description: |
              The date (inclusive) on which the organization schedule fragment
              begins.
            format: date-time
            type: string
          name:
            description: |
              Human-readable name, describing the purpose of the schedule.
            type: string
          status:
            $ref: '#/components/schemas/org-schedule-fragment-status'
          to:
            description: |
              The date (exclusive) on which the organization schedule fragment's
              validity ends.
            format: date-time
            type: string
        required:
        - status
        type: object
      title: org-schedule-fragment-summary
    org-schedule-fragments-create-request:
      properties:
        from:
          $ref: '#/components/schemas/timestamp'
        intervals:
          description: |
            Periods during which the organization schedule is considered to be
            'off' or to be in some specific named period.
          items:
            $ref: '#/components/schemas/create-org-schedule-interval'
          type: array
        name:
          description: Name of the organization schedule fragment.
          type: string
        region_codes:
          description: |
            CLDR region code of the countries/regions it is meant to be valid
            for. Does not drive logic, serves only for easier filtering and
            organization.
          items:
            type: string
          type: array
        to:
          $ref: '#/components/schemas/timestamp'
      required:
      - from
      - intervals
      - to
      title: org-schedule-fragments-create-request
      type: object
    org-schedule-fragments-create-response:
      properties:
        org_schedule_fragment:
          $ref: '#/components/schemas/org-schedule-fragment'
      required:
      - org_schedule_fragment
      title: org-schedule-fragments-create-response
      type: object
      x-go-name: OrgScheduleFragmentsCreateResponseBody
    org-schedule-fragments-get-request:
      properties:
        id:
          description: organization schedule Fragment ID.
          type: string
      required:
      - id
      title: org-schedule-fragments-get-request
      type: object
    org-schedule-fragments-get-response:
      properties:
        org_schedule_fragment:
          $ref: '#/components/schemas/org-schedule-fragment'
      required:
      - org_schedule_fragment
      title: org-schedule-fragments-get-response
      type: object
      x-go-name: OrgScheduleFragmentsGetResponseBody
    org-schedule-fragments-transition-request:
      properties:
        id:
          description: organization schedule Fragment ID.
          type: string
        status:
          $ref: '#/components/schemas/org-schedule-fragment-status'
      required:
      - id
      - status
      title: org-schedule-fragments-transition-request
      type: object
    org-schedule-fragments-transition-response:
      properties:
        org_schedule_fragment:
          $ref: '#/components/schemas/org-schedule-fragment'
      required:
      - org_schedule_fragment
      title: org-schedule-fragments-transition-response
      type: object
      x-go-name: OrgScheduleFragmentsTransitionResponseBody
    org-schedule-interval:
      description: An optionally named period on day granularity.
      properties:
        from:
          description: The date (inclusive) on which the interval begins.
          format: date-time
          type: string
        is_holiday:
          description: |
            If true, no schedule is looked up for these days, instead it is a
            fully off day.
          type: boolean
        name:
          description: |
            The name of the period, typically describing for example the event
            or holiday it represents. Used to connect it to a specific weekly
            schedule.
          type: string
        to:
          description: |
            The date (exclusive) on which the interval ends. If omitted, it is
            a single day interval.
          format: date-time
          type: string
      title: org-schedule-interval
      type: object
    org-schedule-status:
      description: |
        Status determines how an item can be used. In 'draft' status an item
        can be edited but can't be used. When 'published' the item can longer
        be edited but can be used. 'Archived' is read-only.
      enum:
      - archived
      - draft
      - published
      type: string
    org-schedule-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: Human-readable name.
            type: string
          status:
            $ref: '#/components/schemas/org-schedule-status'
          timezone:
            description: |
              Timezone in which this is defined. Only organization schedules in
              the same timezone can be directly combined.
            type: string
          valid_until:
            description: |
              Derived field indicating when a valid organization schedule will
              become invalid. If omitted the schedule is already not valid. A
              schedule is valid if it has a weekly schedule for all named periods
              for all its schedule fragments, and if it has a schedule fragment
              for the time period in question.
            format: date-time
            type: string
        required:
        - status
        type: object
      title: org-schedule-summary
    org-schedules-create-request:
      properties:
        default_weekly_org_schedule:
          $ref: '#/components/schemas/create-weekly-org-schedule'
        min_valid_days:
          description: |
            organization schedule must be valid for at least this many days in
            the future. Meaning organization schedule fragments must cover this
            period. 0 if omitted
          format: int64
          type: integer
        name:
          description: Human-readable name.
          type: string
        org_schedule_fragments:
          description: |
            List of organization schedule fragments with no overlaps or gaps.
          items:
            $ref: '#/components/schemas/create-org-schedule-fragment-summary'
          type: array
        timezone:
          description: |
            Timezone in which the organization schedule applies. Expected to be
            a valid IANA time zone name such as America/New_York
          type: string
        weekly_org_schedules:
          description: |
            If this day belongs to a named period according to the currently
            active organization schedule fragment, a weekly organization
            schedule from this list with the corresponding name will apply.
          items:
            $ref: '#/components/schemas/create-weekly-org-schedule'
          type: array
      required:
      - name
      - timezone
      title: org-schedules-create-request
      type: object
    org-schedules-create-response:
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
      - org_schedule
      title: org-schedules-create-response
      type: object
      x-go-name: OrgSchedulesCreateResponseBody
    org-schedules-get-request:
      properties:
        id:
          description: organization schedule ID.
          type: string
      required:
      - id
      title: org-schedules-get-request
      type: object
    org-schedules-get-response:
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
      - org_schedule
      title: org-schedules-get-response
      type: object
      x-go-name: OrgSchedulesGetResponseBody
    org-schedules-set-future-request:
      properties:
        id:
          description: organization schedule ID.
          type: string
        org_schedule_fragment_id:
          description: organization schedule Fragment ID.
          type: string
      required:
      - id
      - org_schedule_fragment_id
      title: org-schedules-set-future-request
      type: object
    org-schedules-set-future-response:
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
      - org_schedule
      title: org-schedules-set-future-response
      type: object
      x-go-name: OrgSchedulesSetFutureResponseBody
    org-schedules-transition-request:
      properties:
        id:
          description: organization schedule ID.
          type: string
        status:
          $ref: '#/components/schemas/org-schedule-status'
      required:
      - id
      - status
      title: org-schedules-transition-request
      type: object
    org-schedules-transition-response:
      properties:
        org_schedule:
          $ref: '#/components/schemas/org-schedule'
      required:
      - org_schedule
      title: org-schedules-transition-response
      type: object
      x-go-name: OrgSchedulesTransitionResponseBody
    org-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          org:
            $ref: '#/components/schemas/org-summary'
        required:
        - org
        type: object
      title: org-search-summary
    org-state:
      description: State of the Organization.
      enum:
      - active
      - deactivated
      - inactive
      - locked
      type: string
    org-summary:
      discriminator:
        mapping:
          account: '#/components/schemas/account-summary'
          dev_org: '#/components/schemas/dev-org-summary'
          rev_org: '#/components/schemas/rev-org-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/account-summary'
      - $ref: '#/components/schemas/dev-org-summary'
      - $ref: '#/components/schemas/rev-org-summary'
      properties:
        type:
          $ref: '#/components/schemas/org-type'
      required:
      - type
      title: org-summary
      type: object
    org-type:
      enum:
      - account
      - dev_org
      - rev_org
      type: string
    part:
      discriminator:
        mapping:
          capability: '#/components/schemas/capability'
          component: '#/components/schemas/component'
          custom_part: '#/components/schemas/custom-part'
          enhancement: '#/components/schemas/enhancement'
          feature: '#/components/schemas/feature'
          linkable: '#/components/schemas/linkable'
          microservice: '#/components/schemas/microservice'
          product: '#/components/schemas/product'
          runnable: '#/components/schemas/runnable'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/capability'
      - $ref: '#/components/schemas/component'
      - $ref: '#/components/schemas/custom-part'
      - $ref: '#/components/schemas/enhancement'
      - $ref: '#/components/schemas/feature'
      - $ref: '#/components/schemas/linkable'
      - $ref: '#/components/schemas/microservice'
      - $ref: '#/components/schemas/product'
      - $ref: '#/components/schemas/runnable'
      properties:
        type:
          $ref: '#/components/schemas/part-type'
      required:
      - type
      title: part
      type: object
    part-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          annotations:
            description: Annotations associated with part object.
            items:
              $ref: '#/components/schemas/annotation'
            type: array
          artifacts:
            description: The attached artifacts.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          attachments:
            description: IDs of the items attached to a part object.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          category:
            $ref: '#/components/schemas/part-category'
          concat_keys:
            description: |
              This field holds a concatenated string of all key fields relevant
              to a particular part.
            type: string
          custom_fields:
            description: Custom fields.
            type: object
          custom_schema_fragments:
            description: Custom schema fragments.
            items:
              type: string
            type: array
          custom_schema_fragments_v1:
            description: Custom schema fragments.
            type: string
          delivered_as:
            description: Methods the product can be delivered as.
            items:
              $ref: '#/components/schemas/part-delivered-as'
            type: array
          description:
            description: Description of the part.
            type: string
          docs:
            description: Docs associated with the part.
            items:
              $ref: '#/components/schemas/doc-field'
            type: array
          links:
            description: Links associated with the object.
            items:
              $ref: '#/components/schemas/archetype-link-summary'
            type: array
          name:
            description: Name of the part.
            type: string
          owned_by:
            description: The users that own the part.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          ref_url:
            description: URL to the part details (git url, website, etc.).
            type: string
          schema_fragment_ids:
            deprecated: true
            description: Combination of stock and custom schema fragment IDs.
            items:
              type: string
            type: array
          schema_fragment_ids_v1:
            description: Combination of stock and custom schema fragment IDs.
            type: string
          stage:
            $ref: '#/components/schemas/part-stage'
          state:
            description: State of the part based upon the stage.
            type: string
          stock_schema_fragment:
            description: Stock schema fragment.
            type: string
          stock_schema_fragment_v1:
            description: Stock schema fragment.
            type: string
          subtype:
            description: Subtype corresponding to the custom type fragment.
            type: string
          tags:
            description: Tags associated with the object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
        required:
        - name
        - owned_by
        type: object
      title: part-base
    part-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: Name of the part.
            type: string
        required:
        - name
        type: object
      title: part-base-summary
    part-category:
      description: Designated category of the part.
      enum:
      - dev_part
      - general
      - rev_part
      type: string
    part-delivered-as:
      description: Methods the product can be delivered as.
      enum:
      - goods
      - service
      - software
      type: string
    part-merge-event:
      description: Event for part merging.
      properties:
        merged_to_part:
          $ref: '#/components/schemas/part-summary'
        part:
          $ref: '#/components/schemas/part-summary'
      title: part-merge-event
      type: object
    part-pin-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: part-pin-base-summary
    part-promote-event:
      description: Event for part promotion.
      properties:
        part:
          $ref: '#/components/schemas/part-summary'
        promoted_to_part:
          $ref: '#/components/schemas/part-summary'
      title: part-promote-event
      type: object
    part-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          part:
            $ref: '#/components/schemas/part-summary'
        required:
        - part
        type: object
      title: part-search-summary
    part-stage:
      description: Stage details.
      properties:
        name:
          description: Current stage name of the part.
          type: string
        notes:
          description: Notes relevant to the stage.
          type: string
        ordinal:
          description: Current stage number.
          format: int32
          type: integer
      required:
      - name
      title: part-stage
      type: object
    part-summary:
      discriminator:
        mapping:
          capability: '#/components/schemas/capability-summary'
          component: '#/components/schemas/component-summary'
          custom_part: '#/components/schemas/custom-part-summary'
          enhancement: '#/components/schemas/enhancement-summary'
          feature: '#/components/schemas/feature-summary'
          linkable: '#/components/schemas/linkable-summary'
          microservice: '#/components/schemas/microservice-summary'
          product: '#/components/schemas/product-summary'
          runnable: '#/components/schemas/runnable-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/capability-summary'
      - $ref: '#/components/schemas/component-summary'
      - $ref: '#/components/schemas/custom-part-summary'
      - $ref: '#/components/schemas/enhancement-summary'
      - $ref: '#/components/schemas/feature-summary'
      - $ref: '#/components/schemas/linkable-summary'
      - $ref: '#/components/schemas/microservice-summary'
      - $ref: '#/components/schemas/product-summary'
      - $ref: '#/components/schemas/runnable-summary'
      properties:
        type:
          $ref: '#/components/schemas/part-type'
      required:
      - type
      title: part-summary
      type: object
    part-type:
      enum:
      - capability
      - component
      - custom_part
      - enhancement
      - feature
      - linkable
      - microservice
      - product
      - runnable
      type: string
    parts-contributors-list-request:
      properties:
        id:
          description: The part's ID.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        limit:
          description: |
            The maximum number of contributors to return. If not set, then the
            default is '10'.
          format: int32
          type: integer
      required:
      - id
      title: parts-contributors-list-request
      type: object
    parts-contributors-list-response:
      properties:
        contributors:
          description: The users that contribute on the part.
          items:
            $ref: '#/components/schemas/user-summary'
          type: array
        total:
          description: Total number of contributors on the part.
          format: int32
          type: integer
      required:
      - contributors
      - total
      title: parts-contributors-list-response
      type: object
      x-go-name: PartsContributorsListResponseBody
    parts-count-request:
      properties:
        categories:
          description: Filters for parts of the provided categories.
          items:
            $ref: '#/components/schemas/part-category'
          type: array
        created_by:
          description: Filters for parts created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        enhancement:
          $ref: '#/components/schemas/parts-filter-enhancement'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        name:
          description: Filters for parts of the provided name(s).
          items:
            type: string
          type: array
        owned_by:
          description: Filters for parts owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for parts owned by any of the provided users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: Filters for part with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for parts with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags:
          description: Filters for part with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
        type:
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
        types:
          deprecated: true
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      title: parts-count-request
      type: object
    parts-count-response:
      properties:
        count:
          description: Count of parts matching the filter.
          format: int32
          type: integer
      required:
      - count
      title: parts-count-response
      type: object
      x-go-name: PartsCountResponseBody
    parts-create-request:
      discriminator:
        mapping:
          capability: '#/components/schemas/parts-create-request-capability'
          custom_part: '#/components/schemas/parts-create-request-custom-part'
          enhancement: '#/components/schemas/parts-create-request-enhancement'
          feature: '#/components/schemas/parts-create-request-feature'
          linkable: '#/components/schemas/parts-create-request-linkable'
          product: '#/components/schemas/parts-create-request-product'
          runnable: '#/components/schemas/parts-create-request-runnable'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/parts-create-request-capability'
      - $ref: '#/components/schemas/parts-create-request-custom-part'
      - $ref: '#/components/schemas/parts-create-request-enhancement'
      - $ref: '#/components/schemas/parts-create-request-feature'
      - $ref: '#/components/schemas/parts-create-request-linkable'
      - $ref: '#/components/schemas/parts-create-request-product'
      - $ref: '#/components/schemas/parts-create-request-runnable'
      properties:
        artifact_ids:
          description: The IDs of the new artifact items.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        description:
          description: Description of the part.
          type: string
        docs:
          description: Docs associated with the part.
          items:
            $ref: '#/components/schemas/doc-field'
          type: array
        links:
          description: Links associated with the part.
          items:
            $ref: '#/components/schemas/embed-links-create-request'
          type: array
        name:
          description: Name of the part.
          type: string
        owned_by:
          description: The users that own the part.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: |
            The users that own the part. This is replaced by owned_by
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-init'
        tags:
          description: Tags associated with the part.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        type:
          $ref: '#/components/schemas/part-type'
        work_ids:
          description: |
            Ids of work items which will be assigned to newly created part
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
      required:
      - name
      - type
      title: parts-create-request
      type: object
    parts-create-request-capability:
      properties:
        fulfilled_by_ids:
          description: IDs of the runnables that fulfill this capability.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        parent_part:
          description: ID of the parent product for the capability.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          maxItems: 1
          type: array
        part_of_part_id:
          deprecated: true
          description: Product ID of this capability.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        pm_owner_id:
          description: User ID of the PM owner of the part.
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
      title: parts-create-request-capability
      type: object
    parts-create-request-custom-part:
      title: parts-create-request-custom-part
      type: object
    parts-create-request-enhancement:
      properties:
        parent_part:
          description: |
            ID of the parent part on which the enhancement is to be created.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          maxItems: 1
          type: array
        target_close_date:
          description: |
            Target close date by which enhancement is expected to be closed.
          format: date-time
          type: string
      title: parts-create-request-enhancement
      type: object
    parts-create-request-feature:
      properties:
        development_owner_id:
          description: User ID of the development owner of the part.
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
        fulfilled_by_ids:
          description: IDs of the runnables that fulfill the feature.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        parent_part:
          description: ID of the parent capability/feature for the feature.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          maxItems: 1
          type: array
        part_of_part_id:
          deprecated: true
          description: Capability or feature ID of the feature.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        pm_owner_id:
          description: User ID of the PM owner of the part.
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
        qa_owner_id:
          description: User ID of the QA owner of the part.
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
      title: parts-create-request-feature
      type: object
    parts-create-request-linkable:
      properties:
        code_inferred_surface_area:
          description: Code Inferred surface area of the linkable.
          items:
            type: string
          type: array
        code_repo_paths:
          description: Repo Path of the linkable.
          type: string
        code_repo_url:
          description: Repo url of the linkable.
          type: string
      title: parts-create-request-linkable
      type: object
    parts-create-request-product:
      properties:
        fulfilled_by_ids:
          description: IDs of the runnables that fulfill the product.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        pm_owner_id:
          description: User ID of the PM owner of the part.
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
        qa_owner_id:
          description: User ID of the QA owner of the part.
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
      title: parts-create-request-product
      type: object
    parts-create-request-runnable:
      properties:
        code_inferred_surface_area:
          description: Code Inferred surface area of the runnable.
          items:
            type: string
          type: array
        code_repo_paths:
          description: Repo Path of the runnable.
          type: string
        code_repo_url:
          description: Repo url of the runnable.
          type: string
      title: parts-create-request-runnable
      type: object
    parts-create-response:
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
      - part
      title: parts-create-response
      type: object
      x-go-name: PartsCreateResponseBody
    parts-customers-list-request:
      properties:
        id:
          description: The part's ID.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        limit:
          description: |
            The maximum number of customers to return. If not set, then the
            default is '10'.
          format: int32
          type: integer
      required:
      - id
      title: parts-customers-list-request
      type: object
    parts-customers-list-response:
      properties:
        customers:
          description: Customers who have tickets associated with this part.
          items:
            $ref: '#/components/schemas/rev-org-summary'
          type: array
        total:
          description: Total number of customers for the part.
          format: int32
          type: integer
      required:
      - customers
      - total
      title: parts-customers-list-response
      type: object
      x-go-name: PartsCustomersListResponseBody
    parts-delete-hierarchy-params:
      properties:
        reassign_work_to_part_id:
          description: If not set, then all work items are deleted.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      title: parts-delete-hierarchy-params
      type: object
    parts-delete-request:
      properties:
        delete_hierarchy_params:
          $ref: '#/components/schemas/parts-delete-hierarchy-params'
        id:
          description: The ID of the part to delete.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      required:
      - id
      title: parts-delete-request
      type: object
    parts-delete-response:
      title: parts-delete-response
      type: object
      x-go-name: PartsDeleteResponseBody
    parts-descendant-links-traverse-request:
      properties:
        cursor:
          description: |
            Cursor to begin iteration from. If empty, iteration will begin from
            the beginning of the result set
          type: string
        limit:
          description: Maximum number of link items to return. Default is 50.
          format: int32
          type: integer
        max_depth:
          description: |
            If > 0, the maximum depth of the tree to traverse links from the
            root.
          format: int32
          type: integer
        root:
          description: |
            ID of the part tree root to traverse links to descendant nodes
            from.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      required:
      - root
      title: parts-descendant-links-traverse-request
      type: object
    parts-descendant-links-traverse-response:
      properties:
        links:
          description: |
            List of link objects as part of the descendants link traversal.
            Link objects at one level are exhausted first before moving to the
            next level.
          items:
            $ref: '#/components/schemas/link'
          type: array
        next_cursor:
          description: Cursor to continue iteration
          type: string
      required:
      - links
      - next_cursor
      title: parts-descendant-links-traverse-response
      type: object
      x-go-name: PartsDescendantLinksTraverseResponseBody
    parts-discovery-source-name:
      description: Name of the source used for parts discovery.
      enum:
      - aws_api_gw
      - custom_routes
      - data_dog
      - git
      - kubernetes
      type: string
    parts-features-api-endpoints-delete-request:
      properties:
        api_endpoint_identifiers:
          description: |
            The identifiers specifying the API endpoints to be deleted.
          items:
            $ref: '#/components/schemas/api-endpoint-identifier'
          type: array
        dry_run:
          description: |
            Whether or not to not update the resulting feature in the database.
          type: boolean
        feature:
          description: The feature ID from which the API endpoints are deleted.
          type: string
      required:
      - api_endpoint_identifiers
      - feature
      title: parts-features-api-endpoints-delete-request
      type: object
    parts-features-api-endpoints-delete-response:
      properties:
        part:
          $ref: '#/components/schemas/part'
        skipped_api_endpoint_identifiers:
          description: |
            The identifiers of the api enpoints skipped by the delete
            operation.
          items:
            $ref: '#/components/schemas/api-endpoint-identifier'
          type: array
      required:
      - part
      - skipped_api_endpoint_identifiers
      title: parts-features-api-endpoints-delete-response
      type: object
      x-go-name: PartsFeaturesApiEndpointsDeleteResponseBody
    parts-features-api-endpoints-merge-request:
      properties:
        api_endpoint_identifiers:
          description: |
            The identifiers specifying the API endpoints to be merged.
          items:
            $ref: '#/components/schemas/api-endpoint-identifier'
          type: array
        delete_merged_api_endpoints:
          description: |
            Whether or not to delete the merged API endpoints from the
            from-feature.
          type: boolean
        dry_run:
          description: |
            Whether or not to not update the resulting part in the database.
          type: boolean
        from_feature:
          description: The feature ID from which the API endpoints are merged.
          type: string
        to_feature:
          description: The feature ID into which the API endpoints are merged.
          type: string
      required:
      - api_endpoint_identifiers
      - from_feature
      - to_feature
      title: parts-features-api-endpoints-merge-request
      type: object
    parts-features-api-endpoints-merge-response:
      properties:
        from_part:
          $ref: '#/components/schemas/part'
        merged_part:
          $ref: '#/components/schemas/part'
        skipped_api_endpoint_identifiers:
          description: |
            The identifiers of the API endpoints skipped by the delete
            operation.
          items:
            $ref: '#/components/schemas/api-endpoint-identifier'
          type: array
      required:
      - from_part
      - merged_part
      - skipped_api_endpoint_identifiers
      title: parts-features-api-endpoints-merge-response
      type: object
      x-go-name: PartsFeaturesApiEndpointsMergeResponseBody
    parts-features-api-operations-delete-request:
      properties:
        api_endpoint_identifier:
          $ref: '#/components/schemas/api-endpoint-identifier'
        dry_run:
          description: |
            Whether or not to not update the resulting part in the database.
          type: boolean
        feature:
          description: |
            The feature ID from which the api operations are deleted.
          type: string
        http_operations:
          description: |
            The HTTP operations specifying the API operations to be deleted. To
            specify an empty HTTP operation, use the keyword UNKNOWN.
          items:
            $ref: '#/components/schemas/feature-api-operation-http-operation'
          type: array
      required:
      - api_endpoint_identifier
      - feature
      - http_operations
      title: parts-features-api-operations-delete-request
      type: object
    parts-features-api-operations-delete-response:
      properties:
        part:
          $ref: '#/components/schemas/part'
        skipped_http_operations:
          description: |
            The HTTP operations skipped by the delete operation. The UNKNOWN
            keyword denotes an empty HTTP operation.
          items:
            $ref: '#/components/schemas/feature-api-operation-http-operation'
          type: array
      required:
      - part
      - skipped_http_operations
      title: parts-features-api-operations-delete-response
      type: object
      x-go-name: PartsFeaturesApiOperationsDeleteResponseBody
    parts-features-api-operations-merge-request:
      properties:
        api_endpoint_identifier:
          $ref: '#/components/schemas/api-endpoint-identifier'
        delete_merged_api_endpoints:
          description: |
            Whether or not to delete the merged API operations from the
            from-feature.
          type: boolean
        dry_run:
          description: |
            Whether or not to not update the resulting part in the database.
          type: boolean
        from_feature:
          description: The feature ID from which the API operations are merged.
          type: string
        http_operations:
          description: |
            The HTTP operations specifying the API operations to be merged. To
            specify an empty HTTP operation, use the keyword UNKNOWN.
          items:
            $ref: '#/components/schemas/feature-api-operation-http-operation'
          type: array
        to_feature:
          description: The feature ID into which the API operations are merged.
          type: string
      required:
      - api_endpoint_identifier
      - from_feature
      - http_operations
      - to_feature
      title: parts-features-api-operations-merge-request
      type: object
    parts-features-api-operations-merge-response:
      properties:
        from_part:
          $ref: '#/components/schemas/part'
        merged_part:
          $ref: '#/components/schemas/part'
        skipped_http_operations:
          description: |
            The HTTP operations skipped by the delete operation. The UNKNOWN
            keyword denotes an empty HTTP operation.
          items:
            $ref: '#/components/schemas/feature-api-operation-http-operation'
          type: array
      required:
      - from_part
      - merged_part
      - skipped_http_operations
      title: parts-features-api-operations-merge-response
      type: object
      x-go-name: PartsFeaturesApiOperationsMergeResponseBody
    parts-filter-created-by-op-operator-type:
      enum:
      - any
      - not_any
      type: string
    parts-filter-enhancement:
      properties:
        target_close_date:
          $ref: '#/components/schemas/date-time-filter'
      title: parts-filter-enhancement
      type: object
    parts-filter-owned-by-op-operator-type:
      enum:
      - all
      - any
      - not_any
      type: string
    parts-filter-tags-op-operator-type:
      enum:
      - all
      - any
      - empty
      - not_any
      - not_empty
      type: string
    parts-get-request:
      properties:
        id:
          description: The ID of the part to retrieve.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      required:
      - id
      title: parts-get-request
      type: object
    parts-get-response:
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
      - part
      title: parts-get-response
      type: object
      x-go-name: PartsGetResponseBody
    parts-group:
      properties:
        key:
          description: Unique key according to which the items are grouped.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        parts:
          description: The group of parts.
          items:
            $ref: '#/components/schemas/part'
          type: array
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - key
      - parts
      title: parts-group
      type: object
    parts-group-request:
      properties:
        categories:
          description: Filters for parts of the provided categories.
          items:
            $ref: '#/components/schemas/part-category'
          type: array
        created_by:
          description: Filters for parts created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        enhancement:
          $ref: '#/components/schemas/parts-filter-enhancement'
        group_by:
          description: The field to group the parts by.
          type: string
        limit:
          description: |
            The maximum number of groups to return. If not set, then the
            default is '10'.
          format: int32
          type: integer
        limit_per_group:
          description: |
            The maximum number of parts to return for an individual group. If
            not set, then the default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        name:
          description: Filters for parts of the provided name(s).
          items:
            type: string
          type: array
        owned_by:
          description: Filters for parts owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for parts owned by any of the provided users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
        sort_by:
          description: Comma-separated fields to sort the parts by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: Filters for part with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for parts with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags:
          description: Filters for part with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
        type:
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
        types:
          deprecated: true
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      required:
      - group_by
      title: parts-group-request
      type: object
    parts-group-response:
      properties:
        groups:
          description: The list of groups.
          items:
            $ref: '#/components/schemas/parts-group'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - groups
      title: parts-group-response
      type: object
      x-go-name: PartsGroupResponseBody
    parts-list-request:
      properties:
        categories:
          description: Filters for parts of the provided categories.
          items:
            $ref: '#/components/schemas/part-category'
          type: array
        created_by:
          description: Filters for parts created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        enhancement:
          $ref: '#/components/schemas/parts-filter-enhancement'
        limit:
          description: |
            The maximum number of parts to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        name:
          description: Filters for parts of the provided name(s).
          items:
            type: string
          type: array
        owned_by:
          description: Filters for parts owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for parts owned by any of the provided users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
        sort_by:
          description: |
            Fields to sort the parts by and the direction to sort them.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: Filters for part with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for parts with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags:
          description: Filters for part with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
        type:
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
        types:
          deprecated: true
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      title: parts-list-request
      type: object
    parts-list-response:
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        parts:
          description: The list of parts.
          items:
            $ref: '#/components/schemas/part'
          type: array
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - parts
      title: parts-list-response
      type: object
      x-go-name: PartsListResponseBody
    parts-mutate-request:
      discriminator:
        mapping:
          merge: '#/components/schemas/parts-mutate-request-merge'
          promote: '#/components/schemas/parts-mutate-request-promote'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/parts-mutate-request-merge'
      - $ref: '#/components/schemas/parts-mutate-request-promote'
      properties:
        id:
          description: ID of the part to be mutated.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        type:
          $ref: '#/components/schemas/parts-mutate-request-type'
      required:
      - id
      - type
      title: parts-mutate-request
      type: object
    parts-mutate-request-merge:
      title: parts-mutate-request-merge
      type: object
    parts-mutate-request-promote:
      properties:
        change_type_to:
          $ref: '#/components/schemas/part-type'
        parent_id:
          description: Parent ID of new part.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          nullable: true
          type: string
      required:
      - change_type_to
      title: parts-mutate-request-promote
      type: object
    parts-mutate-request-type:
      enum:
      - merge
      - promote
      type: string
    parts-mutate-response:
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
      - part
      title: parts-mutate-response
      type: object
      x-go-name: PartsMutateResponseBody
    parts-suggest-request:
      description: Parts Suggest request.
      properties:
        limit:
          description: Maximum number of required suggestions.
          format: int32
          type: integer
        min_score:
          description: Minimum similarity score, Range (0, 1).
          format: float
          type: number
        object:
          description: The ID of the object to suggest parts for.
          type: string
      required:
      - object
      title: parts-suggest-request
      type: object
    parts-suggest-response:
      description: Parts Suggest Response.
      properties:
        parts:
          description: The suggested parts.
          items:
            $ref: '#/components/schemas/part-summary'
          type: array
      required:
      - parts
      title: parts-suggest-response
      type: object
      x-go-name: PartsSuggestResponseBody
    parts-supporters-list-request:
      properties:
        id:
          description: The part's ID.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        limit:
          description: |
            The maximum number of supporters to return. If not set, then the
            default is '10'.
          format: int32
          type: integer
      required:
      - id
      title: parts-supporters-list-request
      type: object
    parts-supporters-list-response:
      properties:
        supporters:
          description: The users that provide support on the part.
          items:
            $ref: '#/components/schemas/user-summary'
          type: array
        total:
          description: Total number of supporters on the part.
          format: int32
          type: integer
      required:
      - supporters
      - total
      title: parts-supporters-list-response
      type: object
      x-go-name: PartsSupportersListResponseBody
    parts-update-request:
      discriminator:
        mapping:
          capability: '#/components/schemas/parts-update-request-capability'
          custom_part: '#/components/schemas/parts-update-request-custom-part'
          enhancement: '#/components/schemas/parts-update-request-enhancement'
          feature: '#/components/schemas/parts-update-request-feature'
          linkable: '#/components/schemas/parts-update-request-linkable'
          none: '#/components/schemas/empty'
          product: '#/components/schemas/parts-update-request-product'
          runnable: '#/components/schemas/parts-update-request-runnable'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/parts-update-request-capability'
      - $ref: '#/components/schemas/parts-update-request-custom-part'
      - $ref: '#/components/schemas/parts-update-request-enhancement'
      - $ref: '#/components/schemas/parts-update-request-feature'
      - $ref: '#/components/schemas/parts-update-request-linkable'
      - $ref: '#/components/schemas/parts-update-request-product'
      - $ref: '#/components/schemas/parts-update-request-runnable'
      properties:
        artifact_ids:
          $ref: '#/components/schemas/parts-update-request-artifact-ids'
        description:
          description: The updated description of the part.
          type: string
        docs:
          $ref: '#/components/schemas/parts-update-request-update-docs'
        id:
          description: The ID of the part to update.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        name:
          description: The updated name of the part.
          type: string
        owned_by:
          $ref: '#/components/schemas/parts-update-request-owned-by'
        owned_by_ids:
          $ref: '#/components/schemas/parts-update-request-owned-by-ids'
        stage:
          $ref: '#/components/schemas/stage-update'
        tags:
          $ref: '#/components/schemas/parts-update-request-tags'
        type:
          $ref: '#/components/schemas/part-type'
      required:
      - id
      - type
      title: parts-update-request
      type: object
    parts-update-request-artifact-ids:
      properties:
        set:
          description: Sets the artifacts to the provided IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
      title: parts-update-request-artifact-ids
      type: object
    parts-update-request-capability:
      title: parts-update-request-capability
      type: object
    parts-update-request-custom-part:
      title: parts-update-request-custom-part
      type: object
    parts-update-request-enhancement:
      properties:
        target_close_date:
          description: Updates the target close date of the enhancement.
          format: date-time
          type: string
      title: parts-update-request-enhancement
      type: object
    parts-update-request-feature:
      title: parts-update-request-feature
      type: object
    parts-update-request-linkable:
      properties:
        code_inferred_surface_area:
          description: Code Inferred surface area of the linkable.
          items:
            type: string
          type: array
        code_repo_paths:
          description: Repo Path of the linkable.
          type: string
        code_repo_url:
          description: Repo url of the linkable.
          type: string
      title: parts-update-request-linkable
      type: object
    parts-update-request-owned-by:
      properties:
        set:
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: parts-update-request-owned-by
      type: object
    parts-update-request-owned-by-ids:
      properties:
        set:
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: parts-update-request-owned-by-ids
      type: object
    parts-update-request-product:
      title: parts-update-request-product
      type: object
    parts-update-request-runnable:
      properties:
        code_inferred_surface_area:
          description: Code Inferred surface area of the runnable.
          items:
            type: string
          type: array
        code_repo_paths:
          description: Repo Path of the runnable.
          type: string
        code_repo_url:
          description: Repo url of the runnable.
          type: string
      title: parts-update-request-runnable
      type: object
    parts-update-request-tags:
      properties:
        set:
          description: Sets the tags to the provided tags.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: parts-update-request-tags
      type: object
    parts-update-request-update-docs:
      properties:
        set:
          description: Sets the docs to the provided docs.
          items:
            $ref: '#/components/schemas/doc-field'
          type: array
      title: parts-update-request-update-docs
      type: object
    parts-update-response:
      properties:
        part:
          $ref: '#/components/schemas/part'
      required:
      - part
      title: parts-update-response
      type: object
      x-go-name: PartsUpdateResponseBody
    parts-vista-group-item:
      allOf:
      - $ref: '#/components/schemas/group-base'
      - discriminator:
          mapping:
            curated: '#/components/schemas/parts-vista-group-item-curated-group'
            dynamic: '#/components/schemas/parts-vista-group-item-dynamic-group'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/parts-vista-group-item-curated-group'
        - $ref: '#/components/schemas/parts-vista-group-item-dynamic-group'
        properties:
          type:
            $ref: '#/components/schemas/parts-vista-group-item-type'
        required:
        - type
        type: object
      description: Represents a nested parts vista group object.
      title: parts-vista-group-item
    parts-vista-group-item-curated-group:
      properties:
        items:
          description: Static list of part items.
          items:
            $ref: '#/components/schemas/part-summary'
          type: array
      title: parts-vista-group-item-curated-group
      type: object
    parts-vista-group-item-dynamic-group:
      properties:
        filter:
          $ref: '#/components/schemas/parts-vista-group-item-dynamic-group-filter'
      required:
      - filter
      title: parts-vista-group-item-dynamic-group
      type: object
    parts-vista-group-item-dynamic-group-filter:
      properties:
        categories:
          description: Filters for parts of the provided categories.
          items:
            $ref: '#/components/schemas/part-category'
          type: array
        created_by:
          description: Filters for parts created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
        created_by_v1:
          description: Filters for parts created by any of these users.
          type: string
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        enhancement:
          $ref: '#/components/schemas/parts-filter-enhancement'
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        name:
          description: Filters for parts of the provided name(s).
          items:
            type: string
          type: array
        owned_by:
          description: Filters for parts owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for parts owned by any of the provided users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids_v1:
          description: Filters for parts owned by any of the provided users.
          type: string
        owned_by_op:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
        owned_by_v1:
          description: Filters for parts owned by any of these users.
          type: string
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: Filters for part with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for parts with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_v1:
          description: Filters for parts with any of the provided tags.
          type: string
        tags:
          description: Filters for part with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
        tags_v1:
          description: Filters for part with any of the provided tags.
          type: string
        type:
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
        types:
          deprecated: true
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      title: parts-vista-group-item-dynamic-group-filter
      type: object
    parts-vista-group-item-type:
      description: Type of parts vista group item.
      enum:
      - curated
      - dynamic
      type: string
    parts-vista-group-item-update:
      discriminator:
        mapping:
          curated: '#/components/schemas/parts-vista-group-item-update-curated-group'
          dynamic: '#/components/schemas/parts-vista-group-item-update-dynamic-group'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/parts-vista-group-item-update-curated-group'
      - $ref: '#/components/schemas/parts-vista-group-item-update-dynamic-group'
      properties:
        custom_view:
          $ref: '#/components/schemas/parts-vista-group-item-update-custom-view'
        description:
          description: updated description of the group.
          type: string
        icon_type:
          description: updated icon associated with the group in the UI.
          type: string
        id:
          description: The ID of the vista group to update.
          type: string
        name:
          description: updated name of the group.
          type: string
        type:
          $ref: '#/components/schemas/parts-vista-group-item-type'
      required:
      - type
      title: parts-vista-group-item-update
      type: object
    parts-vista-group-item-update-curated-group:
      properties:
        items:
          $ref: '#/components/schemas/parts-vista-group-item-update-curated-group-items'
      title: parts-vista-group-item-update-curated-group
      type: object
    parts-vista-group-item-update-curated-group-items:
      properties:
        set:
          description: Sets the items to the provided items.
          items:
            $ref: '#/components/schemas/parts-vista-group-item-update-curated-group-items-item-value'
          type: array
      title: parts-vista-group-item-update-curated-group-items
      type: object
    parts-vista-group-item-update-curated-group-items-item-value:
      properties:
        id:
          description: The ID of the item.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      required:
      - id
      title: parts-vista-group-item-update-curated-group-items-item-value
      type: object
    parts-vista-group-item-update-custom-view:
      properties:
        column_properties:
          $ref: '#/components/schemas/parts-vista-group-item-update-custom-view-column-properties'
        show_groups:
          description: Boolean to specify whether to show groups or not.
          type: boolean
      title: parts-vista-group-item-update-custom-view
      type: object
    parts-vista-group-item-update-custom-view-column-properties:
      properties:
        set:
          description: Sets the column property items to provided list.
          items:
            $ref: '#/components/schemas/parts-vista-group-item-update-custom-view-column-properties-column-property'
          type: array
      title: parts-vista-group-item-update-custom-view-column-properties
      type: object
    parts-vista-group-item-update-custom-view-column-properties-column-property:
      properties:
        name:
          description: Name of the column.
          type: string
      required:
      - name
      title: parts-vista-group-item-update-custom-view-column-properties-column-property
      type: object
    parts-vista-group-item-update-dynamic-group:
      properties:
        filter:
          $ref: '#/components/schemas/parts-vista-group-item-update-dynamic-group-filter'
      title: parts-vista-group-item-update-dynamic-group
      type: object
    parts-vista-group-item-update-dynamic-group-filter:
      properties:
        categories:
          description: Filters for parts of the provided categories.
          items:
            $ref: '#/components/schemas/part-category'
          type: array
        created_by:
          description: Filters for parts created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        enhancement:
          $ref: '#/components/schemas/parts-filter-enhancement'
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        name:
          description: Filters for parts of the provided name(s).
          items:
            type: string
          type: array
        owned_by:
          description: Filters for parts owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for parts owned by any of the provided users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: Filters for part with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for parts with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags:
          description: Filters for part with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
        type:
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
        types:
          deprecated: true
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      title: parts-vista-group-item-update-dynamic-group-filter
      type: object
    payment-intents-update-request:
      properties:
        payment_intent_id:
          description: The payment intent id.
          type: string
        setup_future_usage:
          description: |
            Flag to determine whether to save the methodon successful payment
            on this payment intent.
          type: boolean
      required:
      - payment_intent_id
      - setup_future_usage
      title: payment-intents-update-request
      type: object
    payment-method:
      discriminator:
        mapping:
          payment_method_bank_account: '#/components/schemas/payment-method-bank-account'
          payment_method_card: '#/components/schemas/payment-method-card'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/payment-method-bank-account'
      - $ref: '#/components/schemas/payment-method-card'
      properties:
        type:
          $ref: '#/components/schemas/payment-method-type'
      required:
      - type
      title: payment-method
      type: object
    payment-method-bank-account:
      allOf:
      - $ref: '#/components/schemas/payment-method-base'
      - properties:
          account_holder_type:
            $ref: '#/components/schemas/payment-method-bank-account-account-holder-type'
          account_type:
            $ref: '#/components/schemas/payment-method-bank-account-account-type'
          bank_name:
            description: Bank name.
            type: string
          routing_number:
            description: Routing number of the bank account.
            type: string
        required:
        - account_holder_type
        - account_type
        - bank_name
        - routing_number
        type: object
      title: payment-method-bank-account
    payment-method-bank-account-account-holder-type:
      description: Account holder type.
      enum:
      - company
      - individual
      type: string
    payment-method-bank-account-account-type:
      description: Account type.
      enum:
      - checking
      - savings
      type: string
    payment-method-bank-account-summary:
      allOf:
      - $ref: '#/components/schemas/payment-method-base-summary'
      title: payment-method-bank-account-summary
    payment-method-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          display_number:
            description: Display number.
            type: string
          is_default:
            description: |
              Set to true if it is a default payment method for the customer,
              else false.
            type: boolean
          rev:
            $ref: '#/components/schemas/org-summary'
        required:
        - display_number
        - is_default
        - rev
        type: object
      title: payment-method-base
    payment-method-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: payment-method-base-summary
    payment-method-card:
      allOf:
      - $ref: '#/components/schemas/payment-method-base'
      - properties:
          brand:
            description: Brand name the card belongs to.
            type: string
          exp_month:
            description: Month on which the card expires.
            format: int32
            type: integer
          exp_year:
            description: Year on which card expires.
            format: int32
            type: integer
          fund_type:
            $ref: '#/components/schemas/payment-method-card-fund-type'
        required:
        - brand
        - exp_month
        - exp_year
        - fund_type
        type: object
      title: payment-method-card
    payment-method-card-fund-type:
      description: Fund type of the card.
      enum:
      - credit
      - debit
      - prepaid
      type: string
    payment-method-card-summary:
      allOf:
      - $ref: '#/components/schemas/payment-method-base-summary'
      title: payment-method-card-summary
    payment-method-type:
      enum:
      - payment_method_bank_account
      - payment_method_card
      type: string
    payment-methods-delete-request:
      properties:
        id:
          description: |
            The payment method ID which is to be deleted from customer config.
          type: string
      required:
      - id
      title: payment-methods-delete-request
      type: object
    payment-methods-get-request:
      properties:
        id:
          description: The payment method's DON
          type: string
      required:
      - id
      title: payment-methods-get-request
      type: object
    payment-methods-get-response:
      properties:
        payment_method:
          $ref: '#/components/schemas/payment-method'
      required:
      - payment_method
      title: payment-methods-get-response
      type: object
      x-go-name: PaymentMethodsGetResponseBody
    payment-methods-list-response:
      properties:
        payment_methods:
          description: List of payment methods.
          items:
            $ref: '#/components/schemas/payment-method'
          type: array
      required:
      - payment_methods
      title: payment-methods-list-response
      type: object
      x-go-name: PaymentMethodsListResponseBody
    payment-methods-set-default-request:
      properties:
        id:
          description: |
            The payment method ID which is to be set as default for the
            customer.
          type: string
      required:
      - id
      title: payment-methods-set-default-request
      type: object
    payment-methods-setup-intent-create-request:
      title: payment-methods-setup-intent-create-request
      type: object
    payment-methods-setup-intent-create-response:
      properties:
        client_key:
          description: |
            The client key to be used to save the payment method details.
          type: string
      required:
      - client_key
      title: payment-methods-setup-intent-create-response
      type: object
      x-go-name: PaymentMethodsSetupIntentCreateResponseBody
    personalized-item:
      properties:
        work:
          $ref: '#/components/schemas/work-summary'
      required:
      - work
      title: personalized-item
      type: object
    personalized-list-request:
      title: personalized-list-request
      type: object
    personalized-list-response:
      description: Personalized list response.
      properties:
        recent_items:
          description: List of recently accessesed items by the user.
          items:
            $ref: '#/components/schemas/personalized-item'
          type: array
        recommended_items:
          description: List of recommended items for the user.
          items:
            $ref: '#/components/schemas/personalized-item'
          type: array
      required:
      - recent_items
      - recommended_items
      title: personalized-list-response
      type: object
      x-go-name: PersonalizedListResponseBody
    phone-number:
      description: A phone number.
      properties:
        e164_number:
          description: The phone number in e164 format.
          type: string
        extension:
          description: An optional extension.
          type: string
      title: phone-number
      type: object
    plug-banner-component:
      description: A plug widget banner component.
      properties:
        cover_image:
          $ref: '#/components/schemas/artifact-summary'
        description:
          description: Description to show under the title of the banner.
          type: string
        link:
          description: Link to open on clicking the banner.
          type: string
        title:
          description: Title of the banner.
          type: string
      required:
      - title
      title: plug-banner-component
      type: object
    plug-create-conversation-component:
      description: A plug widget create conversation component.
      properties:
        description:
          description: |
            Description to be shown under the create conversation button.
          type: string
        text:
          description: Text to be shown on create conversation button.
          type: string
      required:
      - text
      title: plug-create-conversation-component
      type: object
    plug-display-rule-expression-operator:
      description: Logical operator to use.
      enum:
      - and
      - or
      type: string
    plug-path-display-rule:
      description: A path url display rule object meant to be used by the UI.
      properties:
        operator:
          $ref: '#/components/schemas/plug-path-display-rule-operator'
        value:
          description: |
            Value which will be used for comparison for the display rule.
          type: string
      required:
      - operator
      - value
      title: plug-path-display-rule
      type: object
    plug-path-display-rule-operator:
      description: Comparison operator for this display rule.
      enum:
      - contains
      - eq
      - neq
      - not_contains
      type: string
    plug-recent-conversations-component:
      description: A plug widget recent conversations component.
      properties:
        num_conversations:
          description: Number of conversations to show.
          format: int32
          type: integer
      title: plug-recent-conversations-component
      type: object
    plug-recent-tickets-component:
      description: A plug widget recent tickets component.
      properties:
        num_tickets:
          description: Number of tickets to show.
          format: int32
          type: integer
      title: plug-recent-tickets-component
      type: object
    plug-search-component:
      description: A plug widget search component.
      properties:
        placeholder:
          description: Placeholder text to show in the search bar.
          type: string
      required:
      - placeholder
      title: plug-search-component
      type: object
    plug-setting-display-rule:
      description: |
        A display rule object meant to be used by the UI rule engine.
      discriminator:
        mapping:
          path: '#/components/schemas/plug-path-display-rule'
          user_type: '#/components/schemas/plug-user-type-display-rule'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/plug-path-display-rule'
      - $ref: '#/components/schemas/plug-user-type-display-rule'
      properties:
        type:
          $ref: '#/components/schemas/plug-setting-display-rule-type'
      required:
      - type
      title: plug-setting-display-rule
      type: object
    plug-setting-display-rule-expression:
      discriminator:
        mapping:
          expressions: '#/components/schemas/plug-setting-display-rule-expression-repeated-plug-setting-display-rule-expression'
          rules: '#/components/schemas/plug-setting-display-rule-expression-repeated-plug-setting-display-rule'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/plug-setting-display-rule-expression-repeated-plug-setting-display-rule'
      - $ref: '#/components/schemas/plug-setting-display-rule-expression-repeated-plug-setting-display-rule-expression'
      properties:
        operator:
          $ref: '#/components/schemas/plug-display-rule-expression-operator'
        type:
          $ref: '#/components/schemas/plug-setting-display-rule-expression-type'
      required:
      - operator
      - type
      title: plug-setting-display-rule-expression
      type: object
    plug-setting-display-rule-expression-repeated-plug-setting-display-rule:
      properties:
        rules:
          description: Display rules.
          items:
            $ref: '#/components/schemas/plug-setting-display-rule'
          type: array
      required:
      - rules
      title: plug-setting-display-rule-expression-repeated-plug-setting-display-rule
      type: object
    plug-setting-display-rule-expression-repeated-plug-setting-display-rule-expression:
      properties:
        expressions:
          description: Display rule expressions.
          items:
            $ref: '#/components/schemas/plug-setting-display-rule-expression'
          type: array
      required:
      - expressions
      title: plug-setting-display-rule-expression-repeated-plug-setting-display-rule-expression
      type: object
    plug-setting-display-rule-expression-type:
      enum:
      - expressions
      - rules
      type: string
    plug-setting-display-rule-type:
      enum:
      - path
      - user_type
      type: string
    plug-setting-g-w:
      properties:
        id:
          description: Globally unique object ID.
          type: string
        id_v1:
          description: Globally unique object ID.
          type: string
        name:
          description: An identifying name for the plug setting object.
          type: string
        proxy_domain:
          description: Proxy domain name to use for the Plug server.
          type: string
        status:
          $ref: '#/components/schemas/plug-setting-status'
        web:
          $ref: '#/components/schemas/plug-setting-g-w-web'
        widget_display_expression:
          $ref: '#/components/schemas/plug-setting-display-rule-expression'
      required:
      - id
      - name
      - status
      - web
      title: plug-setting-g-w
      type: object
    plug-setting-g-w-web:
      properties:
        components:
          description: Plug widget web components.
          items:
            $ref: '#/components/schemas/plug-setting-g-w-web-plug-setting-web-component'
          type: array
        styling:
          $ref: '#/components/schemas/plug-setting-g-w-web-styling'
        tabs:
          description: Plug widget web tabs.
          items:
            $ref: '#/components/schemas/plug-setting-g-w-web-plug-setting-web-tab'
          type: array
      required:
      - components
      - styling
      - tabs
      title: plug-setting-g-w-web
      type: object
    plug-setting-g-w-web-plug-setting-web-component:
      discriminator:
        mapping:
          banner: '#/components/schemas/plug-banner-component'
          create_conversation: '#/components/schemas/plug-create-conversation-component'
          recent_conversations: '#/components/schemas/plug-recent-conversations-component'
          recent_tickets: '#/components/schemas/plug-recent-tickets-component'
          search: '#/components/schemas/plug-search-component'
          snap_component: '#/components/schemas/plug-snap-component'
          welcome: '#/components/schemas/plug-welcome-component'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/plug-banner-component'
      - $ref: '#/components/schemas/plug-create-conversation-component'
      - $ref: '#/components/schemas/plug-recent-conversations-component'
      - $ref: '#/components/schemas/plug-recent-tickets-component'
      - $ref: '#/components/schemas/plug-search-component'
      - $ref: '#/components/schemas/plug-snap-component'
      - $ref: '#/components/schemas/plug-welcome-component'
      properties:
        display_expression:
          $ref: '#/components/schemas/plug-setting-display-rule-expression'
        enabled:
          description: Whether the component is enabled or not.
          type: boolean
        id:
          description: An identifying UUID for the component.
          type: string
        order:
          description: Order of the component.
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/plug-web-component-type'
      required:
      - enabled
      - id
      - order
      - type
      title: plug-setting-g-w-web-plug-setting-web-component
      type: object
    plug-setting-g-w-web-plug-setting-web-tab:
      properties:
        display_expression:
          $ref: '#/components/schemas/plug-setting-display-rule-expression'
        enabled:
          description: Whether the tab is enabled or not.
          type: boolean
        id:
          description: An identifying UUID for the tab.
          type: string
        order:
          description: Order of the tab.
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/plug-setting-g-w-web-plug-setting-web-tab-type-value'
      required:
      - enabled
      - id
      - order
      - type
      title: plug-setting-g-w-web-plug-setting-web-tab
      type: object
    plug-setting-g-w-web-plug-setting-web-tab-type-value:
      enum:
      - conversations
      - help
      - home
      - news
      - tasks
      - tickets
      type: string
    plug-setting-g-w-web-styling:
      properties:
        home:
          $ref: '#/components/schemas/plug-setting-g-w-web-styling-home'
        launcher:
          $ref: '#/components/schemas/plug-setting-g-w-web-styling-launcher'
        themes:
          description: Plug widget web themes.
          items:
            $ref: '#/components/schemas/plug-setting-g-w-web-styling-plug-setting-web-theme'
          type: array
      required:
      - home
      - launcher
      - themes
      title: plug-setting-g-w-web-styling
      type: object
    plug-setting-g-w-web-styling-home:
      properties:
        logo:
          $ref: '#/components/schemas/artifact-summary'
      title: plug-setting-g-w-web-styling-home
      type: object
    plug-setting-g-w-web-styling-launcher:
      properties:
        alignment:
          $ref: '#/components/schemas/plug-setting-launcher-alignment'
        logo:
          $ref: '#/components/schemas/artifact-summary'
        spacing:
          $ref: '#/components/schemas/plug-setting-g-w-web-styling-launcher-spacing'
      required:
      - alignment
      - spacing
      title: plug-setting-g-w-web-styling-launcher
      type: object
    plug-setting-g-w-web-styling-launcher-spacing:
      properties:
        bottom:
          description: |
            Spacing between the launcher and the bottom edge of the screen.
          type: string
        side:
          description: |
            Spacing between the launcher and the side (as per alignment) edge
            of the screen.
          type: string
      required:
      - bottom
      - side
      title: plug-setting-g-w-web-styling-launcher-spacing
      type: object
    plug-setting-g-w-web-styling-plug-setting-web-theme:
      description: A plug widget theme.
      discriminator:
        mapping:
          custom_theme: '#/components/schemas/plug-setting-g-w-web-styling-plug-setting-web-theme-custom-theme'
          native_theme: '#/components/schemas/plug-setting-g-w-web-styling-plug-setting-web-theme-native-theme'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/plug-setting-g-w-web-styling-plug-setting-web-theme-custom-theme'
      - $ref: '#/components/schemas/plug-setting-g-w-web-styling-plug-setting-web-theme-native-theme'
      properties:
        enabled:
          description: Whether the theme is enabled or not.
          type: boolean
        id:
          description: A UUID to identify the theme.
          type: string
        type:
          $ref: '#/components/schemas/plug-setting-g-w-web-styling-plug-setting-web-theme-type'
      required:
      - enabled
      - id
      - type
      title: plug-setting-g-w-web-styling-plug-setting-web-theme
      type: object
    plug-setting-g-w-web-styling-plug-setting-web-theme-custom-theme:
      properties:
        value:
          description: Custom theme value.
          type: object
      required:
      - value
      title: plug-setting-g-w-web-styling-plug-setting-web-theme-custom-theme
      type: object
    plug-setting-g-w-web-styling-plug-setting-web-theme-native-theme:
      properties:
        value:
          $ref: '#/components/schemas/plug-web-theme-native-theme'
      required:
      - value
      title: plug-setting-g-w-web-styling-plug-setting-web-theme-native-theme
      type: object
    plug-setting-g-w-web-styling-plug-setting-web-theme-type:
      enum:
      - custom_theme
      - native_theme
      type: string
    plug-setting-launcher-alignment:
      description: Alignment of the launcher.
      enum:
      - left
      - right
      type: string
    plug-setting-status:
      description: Current status of the plug setting object.
      enum:
      - draft
      - published
      type: string
    plug-setting-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: plug-setting-summary
    plug-settings-create-request:
      properties:
        name:
          description: An identifying name for the plug setting object.
          type: string
        proxy_domain:
          description: Proxy domain name to use for the Plug server.
          type: string
        status:
          $ref: '#/components/schemas/plug-setting-status'
        web:
          $ref: '#/components/schemas/plug-settings-create-request-web'
        widget_display_expression:
          $ref: '#/components/schemas/plug-setting-display-rule-expression'
      required:
      - name
      - status
      - web
      title: plug-settings-create-request
      type: object
    plug-settings-create-request-web:
      properties:
        components:
          description: Plug widget web components.
          items:
            $ref: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component'
          type: array
        styling:
          $ref: '#/components/schemas/plug-settings-create-request-web-styling'
        tabs:
          description: Plug widget web tabs.
          items:
            $ref: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-tab'
          type: array
      required:
      - components
      - styling
      - tabs
      title: plug-settings-create-request-web
      type: object
    plug-settings-create-request-web-create-plug-setting-web-component:
      discriminator:
        mapping:
          banner: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-banner-component'
          create_conversation: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-create-conversation-component'
          recent_conversations: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-recent-conversations-component'
          recent_tickets: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-recent-tickets-component'
          search: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-search-component'
          snap_component: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-snap-component'
          welcome: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-welcome-component'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-banner-component'
      - $ref: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-create-conversation-component'
      - $ref: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-recent-conversations-component'
      - $ref: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-recent-tickets-component'
      - $ref: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-search-component'
      - $ref: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-snap-component'
      - $ref: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component-create-plug-welcome-component'
      properties:
        display_expression:
          $ref: '#/components/schemas/plug-setting-display-rule-expression'
        enabled:
          description: Whether the component is enabled or not.
          type: boolean
        order:
          description: Order of the component.
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/plug-web-component-type'
      required:
      - enabled
      - order
      - type
      title: plug-settings-create-request-web-create-plug-setting-web-component
      type: object
    plug-settings-create-request-web-create-plug-setting-web-component-create-plug-banner-component:
      description: A plug widget banner component.
      properties:
        cover_image:
          description: Image to be shown on the banner.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        description:
          description: Description to show under the title of the banner.
          type: string
        link:
          description: Link to open on clicking the banner.
          type: string
        title:
          description: Title of the banner.
          type: string
      required:
      - title
      title: plug-settings-create-request-web-create-plug-setting-web-component-create-plug-banner-component
      type: object
    plug-settings-create-request-web-create-plug-setting-web-component-create-plug-create-conversation-component:
      description: A plug widget create conversation component.
      properties:
        description:
          description: |
            Description to be shown under the create conversation button.
          type: string
        text:
          description: Text to be shown on create conversation button.
          type: string
      required:
      - description
      - text
      title: plug-settings-create-request-web-create-plug-setting-web-component-create-plug-create-conversation-component
      type: object
    plug-settings-create-request-web-create-plug-setting-web-component-create-plug-recent-conversations-component:
      description: A plug widget recent conversations component.
      properties:
        num_conversations:
          description: Number of conversations to show.
          format: int32
          type: integer
      title: plug-settings-create-request-web-create-plug-setting-web-component-create-plug-recent-conversations-component
      type: object
    plug-settings-create-request-web-create-plug-setting-web-component-create-plug-recent-tickets-component:
      description: A plug widget recent tickets component.
      properties:
        num_tickets:
          description: Number of tickets to show.
          format: int32
          type: integer
      title: plug-settings-create-request-web-create-plug-setting-web-component-create-plug-recent-tickets-component
      type: object
    plug-settings-create-request-web-create-plug-setting-web-component-create-plug-search-component:
      description: A plug widget search component.
      properties:
        placeholder:
          description: Placeholder text to show in the search bar.
          type: string
      required:
      - placeholder
      title: plug-settings-create-request-web-create-plug-setting-web-component-create-plug-search-component
      type: object
    plug-settings-create-request-web-create-plug-setting-web-component-create-plug-snap-component:
      description: A plug widget snap component.
      properties:
        snap_component_id:
          description: DON of the installed snap component.
          type: string
      required:
      - snap_component_id
      title: plug-settings-create-request-web-create-plug-setting-web-component-create-plug-snap-component
      type: object
    plug-settings-create-request-web-create-plug-setting-web-component-create-plug-welcome-component:
      description: A plug widget welcome component.
      properties:
        greeting:
          description: Placeholder greeting text to show.
          type: string
      required:
      - greeting
      title: plug-settings-create-request-web-create-plug-setting-web-component-create-plug-welcome-component
      type: object
    plug-settings-create-request-web-create-plug-setting-web-tab:
      properties:
        display_expression:
          $ref: '#/components/schemas/plug-setting-display-rule-expression'
        enabled:
          description: Whether the tab is enabled or not.
          type: boolean
        order:
          description: Order of the tab.
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/plug-setting-g-w-web-plug-setting-web-tab-type-value'
      required:
      - enabled
      - order
      - type
      title: plug-settings-create-request-web-create-plug-setting-web-tab
      type: object
    plug-settings-create-request-web-styling:
      properties:
        home:
          $ref: '#/components/schemas/plug-settings-create-request-web-styling-home'
        launcher:
          $ref: '#/components/schemas/plug-settings-create-request-web-styling-launcher'
        themes:
          description: Plug widget web themes.
          items:
            $ref: '#/components/schemas/plug-settings-create-request-web-styling-plug-setting-web-theme'
          type: array
      required:
      - home
      - launcher
      - themes
      title: plug-settings-create-request-web-styling
      type: object
    plug-settings-create-request-web-styling-home:
      properties:
        logo:
          description: Image to be shown on the top of the home page.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
      title: plug-settings-create-request-web-styling-home
      type: object
    plug-settings-create-request-web-styling-launcher:
      properties:
        alignment:
          $ref: '#/components/schemas/plug-setting-launcher-alignment'
        logo:
          description: Plug widget's launcher icon.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        spacing:
          $ref: '#/components/schemas/plug-settings-create-request-web-styling-launcher-spacing'
      required:
      - alignment
      - spacing
      title: plug-settings-create-request-web-styling-launcher
      type: object
    plug-settings-create-request-web-styling-launcher-spacing:
      properties:
        bottom:
          description: |
            Spacing between the launcher and the bottom edge of the screen.
          type: string
        side:
          description: |
            Spacing between the launcher and the side (as per alignment) edge
            of the screen.
          type: string
      required:
      - bottom
      - side
      title: plug-settings-create-request-web-styling-launcher-spacing
      type: object
    plug-settings-create-request-web-styling-plug-setting-web-theme:
      description: A plug widget theme.
      discriminator:
        mapping:
          custom_theme: '#/components/schemas/plug-settings-create-request-web-styling-plug-setting-web-theme-custom-theme'
          native_theme: '#/components/schemas/plug-settings-create-request-web-styling-plug-setting-web-theme-native-theme'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/plug-settings-create-request-web-styling-plug-setting-web-theme-custom-theme'
      - $ref: '#/components/schemas/plug-settings-create-request-web-styling-plug-setting-web-theme-native-theme'
      properties:
        enabled:
          description: Whether the theme is enabled or not.
          type: boolean
        type:
          $ref: '#/components/schemas/plug-settings-create-request-web-styling-plug-setting-web-theme-type'
      required:
      - enabled
      - type
      title: plug-settings-create-request-web-styling-plug-setting-web-theme
      type: object
    plug-settings-create-request-web-styling-plug-setting-web-theme-custom-theme:
      properties:
        value:
          description: Custom theme value.
          type: object
      required:
      - value
      title: plug-settings-create-request-web-styling-plug-setting-web-theme-custom-theme
      type: object
    plug-settings-create-request-web-styling-plug-setting-web-theme-native-theme:
      properties:
        value:
          $ref: '#/components/schemas/plug-web-theme-native-theme'
      required:
      - value
      title: plug-settings-create-request-web-styling-plug-setting-web-theme-native-theme
      type: object
    plug-settings-create-request-web-styling-plug-setting-web-theme-type:
      enum:
      - custom_theme
      - native_theme
      type: string
    plug-settings-create-response:
      properties:
        setting:
          $ref: '#/components/schemas/plug-setting-g-w'
      required:
      - setting
      title: plug-settings-create-response
      type: object
      x-go-name: PlugSettingsCreateResponseBody
    plug-settings-default-create-request:
      title: plug-settings-default-create-request
      type: object
    plug-settings-default-create-response:
      properties:
        setting:
          $ref: '#/components/schemas/plug-setting-g-w'
      required:
      - setting
      title: plug-settings-default-create-response
      type: object
      x-go-name: PlugSettingsDefaultCreateResponseBody
    plug-settings-delete-request:
      properties:
        id:
          description: ID of the plug setting object which is to be deleted.
          type: string
      required:
      - id
      title: plug-settings-delete-request
      type: object
    plug-settings-delete-response:
      title: plug-settings-delete-response
      type: object
      x-go-name: PlugSettingsDeleteResponseBody
    plug-settings-get-request:
      properties:
        id:
          description: The plug settings object ID.
          type: string
      required:
      - id
      title: plug-settings-get-request
      type: object
    plug-settings-get-response:
      properties:
        setting:
          $ref: '#/components/schemas/plug-setting-g-w'
      required:
      - setting
      title: plug-settings-get-response
      type: object
      x-go-name: PlugSettingsGetResponseBody
    plug-settings-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of plug setting objects to return. The default
            is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          description: |
            Fields to sort the plug settings object by and the direction to
            sort them.
          items:
            type: string
          type: array
      title: plug-settings-list-request
      type: object
    plug-settings-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        settings:
          description: The list of requested plug setting objects.
          items:
            $ref: '#/components/schemas/plug-setting-g-w'
          type: array
      required:
      - settings
      title: plug-settings-list-response
      type: object
      x-go-name: PlugSettingsListResponseBody
    plug-settings-update-request:
      properties:
        id:
          description: The plug setting object's ID.
          type: string
        name:
          description: An identifying name for the plug setting object.
          type: string
        proxy_domain:
          description: Proxy domain name to use for the Plug server.
          type: string
        status:
          $ref: '#/components/schemas/plug-setting-status'
        web:
          $ref: '#/components/schemas/plug-settings-update-request-web'
        widget_display_expression:
          $ref: '#/components/schemas/plug-setting-display-rule-expression'
      required:
      - id
      title: plug-settings-update-request
      type: object
    plug-settings-update-request-web:
      properties:
        components:
          $ref: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-components'
        styling:
          $ref: '#/components/schemas/plug-settings-update-request-web-styling'
        tabs:
          $ref: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-tabs'
      title: plug-settings-update-request-web
      type: object
    plug-settings-update-request-web-styling:
      properties:
        home:
          $ref: '#/components/schemas/plug-settings-update-request-web-styling-home'
        launcher:
          $ref: '#/components/schemas/plug-settings-update-request-web-styling-launcher'
        themes:
          $ref: '#/components/schemas/plug-settings-update-request-web-styling-update-plug-setting-web-themes'
      title: plug-settings-update-request-web-styling
      type: object
    plug-settings-update-request-web-styling-home:
      properties:
        logo:
          description: Image to be shown on the top of the home page.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
      title: plug-settings-update-request-web-styling-home
      type: object
    plug-settings-update-request-web-styling-launcher:
      properties:
        alignment:
          $ref: '#/components/schemas/plug-setting-launcher-alignment'
        logo:
          description: Plug widget's launcher icon.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        spacing:
          $ref: '#/components/schemas/plug-settings-update-request-web-styling-launcher-spacing'
      title: plug-settings-update-request-web-styling-launcher
      type: object
    plug-settings-update-request-web-styling-launcher-spacing:
      properties:
        bottom:
          description: |
            Spacing between the launcher and the bottom edge of the screen.
          type: string
        side:
          description: |
            Spacing between the launcher and the side (as per alignment) edge
            of the screen.
          type: string
      title: plug-settings-update-request-web-styling-launcher-spacing
      type: object
    plug-settings-update-request-web-styling-update-plug-setting-web-theme:
      description: A plug widget theme.
      discriminator:
        mapping:
          custom_theme: '#/components/schemas/plug-settings-update-request-web-styling-update-plug-setting-web-theme-custom-theme'
          native_theme: '#/components/schemas/plug-settings-update-request-web-styling-update-plug-setting-web-theme-native-theme'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/plug-settings-update-request-web-styling-update-plug-setting-web-theme-custom-theme'
      - $ref: '#/components/schemas/plug-settings-update-request-web-styling-update-plug-setting-web-theme-native-theme'
      properties:
        enabled:
          description: Whether the theme is enabled or not.
          type: boolean
        id:
          description: Identifying ID for the theme.
          type: string
        type:
          $ref: '#/components/schemas/plug-settings-update-request-web-styling-update-plug-setting-web-theme-type'
      required:
      - id
      - type
      title: plug-settings-update-request-web-styling-update-plug-setting-web-theme
      type: object
    plug-settings-update-request-web-styling-update-plug-setting-web-theme-custom-theme:
      properties:
        value:
          description: Custom theme value.
          type: object
      title: plug-settings-update-request-web-styling-update-plug-setting-web-theme-custom-theme
      type: object
    plug-settings-update-request-web-styling-update-plug-setting-web-theme-native-theme:
      properties:
        value:
          $ref: '#/components/schemas/plug-web-theme-native-theme'
      title: plug-settings-update-request-web-styling-update-plug-setting-web-theme-native-theme
      type: object
    plug-settings-update-request-web-styling-update-plug-setting-web-theme-type:
      enum:
      - custom_theme
      - native_theme
      type: string
    plug-settings-update-request-web-styling-update-plug-setting-web-themes:
      properties:
        add:
          description: |
            Adds the provided themes to the existing list of themes.This is
            mutually exclusive with `set`.
          items:
            $ref: '#/components/schemas/plug-settings-create-request-web-styling-plug-setting-web-theme'
          type: array
        remove:
          description: |
            Removes the provided theme ids from the list of themes.This is
            mututally exclusive with `set`.
          items:
            type: string
          type: array
        set:
          description: Sets the field to the provided themes.
          items:
            $ref: '#/components/schemas/plug-settings-create-request-web-styling-plug-setting-web-theme'
          type: array
        update:
          description: |
            Updates the provided themes with their updated values.This is
            mutually exclusive with `set`.
          items:
            $ref: '#/components/schemas/plug-settings-update-request-web-styling-update-plug-setting-web-theme'
          type: array
      title: plug-settings-update-request-web-styling-update-plug-setting-web-themes
      type: object
    plug-settings-update-request-web-update-plug-setting-web-component:
      discriminator:
        mapping:
          banner: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-banner-component'
          create_conversation: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-create-conversation-component'
          recent_conversations: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-recent-conversations-component'
          recent_tickets: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-recent-tickets-component'
          search: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-search-component'
          snap_component: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-snap-component'
          welcome: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-welcome-component'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-banner-component'
      - $ref: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-create-conversation-component'
      - $ref: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-recent-conversations-component'
      - $ref: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-recent-tickets-component'
      - $ref: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-search-component'
      - $ref: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-snap-component'
      - $ref: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component-update-plug-welcome-component'
      properties:
        display_expression:
          $ref: '#/components/schemas/plug-setting-display-rule-expression'
        enabled:
          description: Whether the component is enabled or not.
          type: boolean
        id:
          description: Identifying ID for the component.
          type: string
        order:
          description: Order of the component.
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/plug-web-component-type'
      required:
      - id
      - type
      title: plug-settings-update-request-web-update-plug-setting-web-component
      type: object
    plug-settings-update-request-web-update-plug-setting-web-component-update-plug-banner-component:
      description: A plug widget banner component.
      properties:
        cover_image:
          description: Image to be shown on the banner.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        description:
          description: Description to show under the title of the banner.
          type: string
        link:
          description: Link to open on clicking the banner.
          type: string
        title:
          description: Title of the banner.
          type: string
      title: plug-settings-update-request-web-update-plug-setting-web-component-update-plug-banner-component
      type: object
    plug-settings-update-request-web-update-plug-setting-web-component-update-plug-create-conversation-component:
      description: A plug widget create conversation component.
      properties:
        description:
          description: |
            Description to be shown under the create conversation button.
          type: string
        text:
          description: Text to be shown on create conversation button.
          type: string
      title: plug-settings-update-request-web-update-plug-setting-web-component-update-plug-create-conversation-component
      type: object
    plug-settings-update-request-web-update-plug-setting-web-component-update-plug-recent-conversations-component:
      description: A plug widget recent conversations component.
      properties:
        num_conversations:
          description: Number of conversations to show.
          format: int32
          type: integer
      title: plug-settings-update-request-web-update-plug-setting-web-component-update-plug-recent-conversations-component
      type: object
    plug-settings-update-request-web-update-plug-setting-web-component-update-plug-recent-tickets-component:
      description: A plug widget recent tickets component.
      properties:
        num_tickets:
          description: Number of tickets to show.
          format: int32
          type: integer
      title: plug-settings-update-request-web-update-plug-setting-web-component-update-plug-recent-tickets-component
      type: object
    plug-settings-update-request-web-update-plug-setting-web-component-update-plug-search-component:
      description: A plug widget search component.
      properties:
        placeholder:
          description: Placeholder text to show in the search bar.
          type: string
      title: plug-settings-update-request-web-update-plug-setting-web-component-update-plug-search-component
      type: object
    plug-settings-update-request-web-update-plug-setting-web-component-update-plug-snap-component:
      description: A plug widget snap component.
      properties:
        snap_component_id:
          description: DON of the installed snap component.
          type: string
      title: plug-settings-update-request-web-update-plug-setting-web-component-update-plug-snap-component
      type: object
    plug-settings-update-request-web-update-plug-setting-web-component-update-plug-welcome-component:
      description: A plug widget welcome component.
      properties:
        greeting:
          description: Placeholder greeting text to show.
          type: string
      title: plug-settings-update-request-web-update-plug-setting-web-component-update-plug-welcome-component
      type: object
    plug-settings-update-request-web-update-plug-setting-web-components:
      properties:
        add:
          description: |
            Adds the provided components to the existing list of components.
            This is mutually exclusive with `set`.
          items:
            $ref: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component'
          type: array
        remove:
          description: |
            Removes the provided component ids from the list of
            components.Mututally exclusive with `set`.
          items:
            type: string
          type: array
        set:
          description: Sets the field to the provided components.
          items:
            $ref: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-component'
          type: array
        update:
          description: |
            Updates the provided components with their updated values.This is
            mutually exclusive with `set`.
          items:
            $ref: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-component'
          type: array
      title: plug-settings-update-request-web-update-plug-setting-web-components
      type: object
    plug-settings-update-request-web-update-plug-setting-web-tab:
      properties:
        display_expression:
          $ref: '#/components/schemas/plug-setting-display-rule-expression'
        enabled:
          description: Whether the tab is enabled or not.
          type: boolean
        id:
          description: Identifying ID for the tab.
          type: string
        order:
          description: Order of the tab.
          format: int64
          type: integer
        type:
          $ref: '#/components/schemas/plug-setting-g-w-web-plug-setting-web-tab-type-value'
      required:
      - id
      title: plug-settings-update-request-web-update-plug-setting-web-tab
      type: object
    plug-settings-update-request-web-update-plug-setting-web-tabs:
      properties:
        add:
          description: |
            Adds the provided tabs to the existing list of tabs. This is
            mutually exclusive with `set`.
          items:
            $ref: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-tab'
          type: array
        remove:
          description: |
            Removes the provided tab ids from the list of tabs.Mututally
            exclusive with `set`.
          items:
            type: string
          type: array
        set:
          description: Sets the field to the provided tabs.
          items:
            $ref: '#/components/schemas/plug-settings-create-request-web-create-plug-setting-web-tab'
          type: array
        update:
          description: |
            Updates the provided tabs with their updated values.This is
            mutually exclusive with `set`.
          items:
            $ref: '#/components/schemas/plug-settings-update-request-web-update-plug-setting-web-tab'
          type: array
      title: plug-settings-update-request-web-update-plug-setting-web-tabs
      type: object
    plug-settings-update-response:
      properties:
        setting:
          $ref: '#/components/schemas/plug-setting-g-w'
      required:
      - setting
      title: plug-settings-update-response
      type: object
      x-go-name: PlugSettingsUpdateResponseBody
    plug-snap-component:
      description: A plug widget snap component.
      properties:
        snap_component_id:
          $ref: '#/components/schemas/snap-component-summary'
      required:
      - snap_component_id
      title: plug-snap-component
      type: object
    plug-user-type-display-rule:
      description: A user type display rule object meant to be used by the UI.
      properties:
        operator:
          $ref: '#/components/schemas/plug-user-type-display-rule-operator'
        value:
          $ref: '#/components/schemas/plug-user-type-display-rule-value'
      required:
      - operator
      - value
      title: plug-user-type-display-rule
      type: object
    plug-user-type-display-rule-operator:
      description: Comparison operator for this display rule.
      enum:
      - eq
      - neq
      type: string
    plug-user-type-display-rule-value:
      description: |
        Value which will be used for comparison for the display rule.
      enum:
      - anonymous
      - identified
      type: string
    plug-web-component-type:
      description: Type of the component.
      enum:
      - banner
      - create_conversation
      - recent_conversations
      - recent_tickets
      - search
      - snap_component
      - welcome
      type: string
    plug-web-theme-native-theme:
      description: Native theme, only meant to be set if 'type' is 'native'.
      enum:
      - dark
      - light
      type: string
    plug-welcome-component:
      description: A plug widget welcome component.
      properties:
        greeting:
          description: Placeholder greeting text to show.
          type: string
      required:
      - greeting
      title: plug-welcome-component
      type: object
    policy-instance:
      description: |
        Wrapper over rego policy allowing templated re-usable policy.
      properties:
        name:
          description: Name of the policy.
          type: string
        parameters:
          description: JSON string storing values for each templated variable.
          type: string
        policy:
          description: Rego policy string.
          type: string
        system_parseable:
          description: Whether the policy is system generated.
          type: boolean
      title: policy-instance
      type: object
    postal-address:
      description: A representation of a postal address.
      properties:
        country:
          description: Country name component.
          type: string
        formatted:
          description: |
            Full mailing address, formatted for display or use on a mailing
            label.
          type: string
        locality:
          description: Town, city.
          type: string
        postal_code:
          description: Zip code of the address.
          type: string
        region:
          description: State, province, prefecture, or region component.
          type: string
        street_address:
          description: Full street address component.
          type: string
      title: postal-address
      type: object
    pr-review-reminder:
      allOf:
      - $ref: '#/components/schemas/notification-base'
      - properties:
          created_at:
            description: Time at which review request was created.
            format: date-time
            type: string
          pull_request:
            $ref: '#/components/schemas/pull-request'
        type: object
      title: pr-review-reminder
    pr-review-reminder-summary:
      allOf:
      - $ref: '#/components/schemas/notification-base-summary'
      title: pr-review-reminder-summary
    preferences:
      discriminator:
        mapping:
          org_preferences: '#/components/schemas/org-preferences'
          user_preferences: '#/components/schemas/user-preferences'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/org-preferences'
      - $ref: '#/components/schemas/user-preferences'
      properties:
        type:
          $ref: '#/components/schemas/preferences-type'
      required:
      - type
      title: preferences
      type: object
    preferences-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      title: preferences-base
    preferences-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: preferences-base-summary
    preferences-get-request:
      properties:
        id:
          description: The ID of the preferences object to be fetched.
          type: string
      required:
      - id
      title: preferences-get-request
      type: object
    preferences-get-response:
      properties:
        preference:
          $ref: '#/components/schemas/preferences'
      required:
      - preference
      title: preferences-get-response
      type: object
      x-go-name: PreferencesGetResponseBody
    preferences-list-request:
      properties:
        object:
          description: |
            The ID of the object for which the preferences are to be listed.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      required:
      - object
      title: preferences-list-request
      type: object
    preferences-list-response:
      properties:
        preferences:
          $ref: '#/components/schemas/preferences'
      required:
      - preferences
      title: preferences-list-response
      type: object
      x-go-name: PreferencesListResponseBody
    preferences-snap-kit-list-request:
      properties:
        object:
          description: |
            The ID of the object for which the preferences snap kit is to be
            fetched.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      required:
      - object
      title: preferences-snap-kit-list-request
      type: object
    preferences-snap-kit-list-response:
      properties:
        snap_kit_body:
          description: The SnapKit body of the preferences object requested.
          type: object
      required:
      - snap_kit_body
      title: preferences-snap-kit-list-response
      type: object
      x-go-name: PreferencesSnapKitListResponseBody
    preferences-type:
      enum:
      - org_preferences
      - user_preferences
      type: string
    preferences-update-request:
      discriminator:
        mapping:
          org_preferences: '#/components/schemas/update-org-preferences'
          user_preferences: '#/components/schemas/update-user-preferences'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/update-org-preferences'
      - $ref: '#/components/schemas/update-user-preferences'
      properties:
        object:
          description: |
            The ID of the object for which the preferences are to be listed.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
        type:
          $ref: '#/components/schemas/preferences-type'
      required:
      - object
      - type
      title: preferences-update-request
      type: object
    preferences-update-response:
      properties:
        preferences:
          $ref: '#/components/schemas/preferences'
      required:
      - preferences
      title: preferences-update-response
      type: object
      x-go-name: PreferencesUpdateResponseBody
    price-slab:
      description: |
        Helps in defining the range pricing for cases such as tiered pricing,
        volume pricing etc. For Example, if the pricing for first 100 api calls
        per calls is $X and after that its $Y till infinity.
      properties:
        flat_price:
          description: |
            The flat price for the complete slab, irrespective of qunatity one
            uses in this price slab. This can be set only if unit price is set.
          format: double
          type: number
        unit_price:
          description: The price for each unit.
          format: double
          type: number
        up_to:
          description: |
            the quantity upto which this price is applicable. You can set this
            value only if up to infinity is not set to true.
          format: int32
          type: integer
        up_to_inf:
          description: |
            If true, this price slab is applicable for all the remaining
            quantities till infinity.
          type: boolean
      title: price-slab
      type: object
    price-slab-summary:
      description: |
        Helps in defining the range pricing for cases such as tiered pricing,
        volume pricing etc. For Example, if the pricing for first 100 api calls
        per calls is $X and after that its $Y till infinity.
      properties:
        flat_price:
          description: |
            The flat price for the complete slab, irrespective of qunatity one
            uses in this price slab. This can be set only if unit price is set.
          format: double
          type: number
        unit_price:
          description: The price for each unit.
          format: double
          type: number
        up_to:
          description: |
            the quantity upto which this price is applicable. You can set this
            value only if up to infinity is not set to true.
          format: int32
          type: integer
        up_to_inf:
          description: |
            If true, this price slab is applicable for all the remaining
            quantities till infinity.
          type: boolean
      title: price-slab-summary
      type: object
    pricing:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          billing_cycle:
            $ref: '#/components/schemas/pricing-billing-cycle'
          block_size:
            description: |
              Number of units in each block. For example, If the metered units is
              540 and the block size is 100. Then the quantity will be 5.4. The
              default value is 1.
            format: int32
            type: integer
          currency:
            description: |
              Currency used for the pricing. For example, USD, INR etc. Defaults
              to USD.
            type: string
          description:
            description: Description of the pricing.
            type: string
          is_active:
            description: |
              if true then this pricing object can be used for new purchases. If
              false then no new purchases can be made with this pricing object
              but existing purchases can still use this pricing object. Defaults
              to true.
            type: boolean
          is_tiered:
            description: |
              Whether the slabs should be priced tiered or flat. The default
              value is false.
            type: boolean
          price_slabs:
            description: List of price slabs for the given currency.
            items:
              $ref: '#/components/schemas/price-slab'
            type: array
          rev:
            $ref: '#/components/schemas/org-summary'
          sku:
            $ref: '#/components/schemas/sku-summary'
        required:
        - billing_cycle
        - currency
        - price_slabs
        - sku
        type: object
      title: pricing
    pricing-billing-cycle:
      description: Billing frequency of the SKU.
      enum:
      - monthly
      - one_time
      - yearly
      type: string
    pricing-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          billing_cycle:
            $ref: '#/components/schemas/pricing-billing-cycle'
          block_size:
            description: |
              Number of units in each block. For example, If the metered units is
              540 and the block size is 100. Then the quantity will be 5.4. The
              default value is 1.
            format: int32
            type: integer
          currency:
            description: |
              Currency used for the pricing. For example, USD, INR etc. Defaults
              to USD.
            type: string
          is_active:
            description: |
              if true then this pricing object can be used for new purchases. If
              false then no new purchases can be made with this pricing object
              but existing purchases can still use this pricing object. Defaults
              to true.
            type: boolean
          is_tiered:
            description: |
              Whether the slabs should be priced tiered or flat. The default
              value is false.
            type: boolean
          price_slabs:
            description: List of price slabs for the given currency.
            items:
              $ref: '#/components/schemas/price-slab-summary'
            type: array
        required:
        - billing_cycle
        - currency
        - price_slabs
        type: object
      title: pricing-summary
    pricings-create-request:
      properties:
        billing_cycle:
          $ref: '#/components/schemas/pricing-billing-cycle'
        block_size:
          description: |
            Number of units in each block. For example, If the metered units is
            540 and the block size is 100. Then the quantity will be 5.4. The
            default value is 1.
          format: int32
          type: integer
        currency:
          description: |
            Currency used for the pricing object. For example: USD, INR etc.
            Defaults to USD.
          type: string
        description:
          description: Description of the pricing object.
          type: string
        is_active:
          description: |
            Helps in deciding if a price object can be used for purchasing new
            items. If set to true then new purchase can be made. If set to
            false then no new purchase can be made, but quantity of existing
            items, which were bought with this pricing ID can be updated.
            Defaults to false.
          type: boolean
        is_tiered:
          description: |
            Whether the slabs should be priced tiered or flat. The default
            value is false.
          type: boolean
        price_slabs:
          description: List of price slabs for the given currency.
          items:
            $ref: '#/components/schemas/price-slab'
          type: array
        rev_org_id:
          description: |
            The rev org for whom the current pricing object is overridden or is
            a custom pricing object.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        service_plan_id:
          description: |
            Helps in determining if the current pricing object is overridden
            for a specific service plan and for a specific rev org.
          type: string
        sku_id:
          description: The sku ID for which the pricing object is defined.
          type: string
      required:
      - billing_cycle
      - currency
      - price_slabs
      - sku_id
      title: pricings-create-request
      type: object
    pricings-create-response:
      properties:
        pricing:
          $ref: '#/components/schemas/pricing'
      required:
      - pricing
      title: pricings-create-response
      type: object
      x-go-name: PricingsCreateResponseBody
    pricings-delete-request:
      properties:
        id:
          description: The pricing object's DON.
          type: string
      required:
      - id
      title: pricings-delete-request
      type: object
    pricings-get-request:
      properties:
        id:
          description: The pricing object's DON.
          type: string
      required:
      - id
      title: pricings-get-request
      type: object
    pricings-get-response:
      properties:
        pricing:
          $ref: '#/components/schemas/pricing'
      required:
      - pricing
      title: pricings-get-response
      type: object
      x-go-name: PricingsGetResponseBody
    pricings-list-request:
      properties:
        ids:
          description: The list of pricing DONs which are to be aggregated.
          items:
            type: string
          type: array
        is_active:
          description: Filter, active vs inactive pricing objects.
          type: boolean
        rev_org_ids:
          description: The list of rev org DONs which are to be aggregated.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sku_ids:
          description: The list of sku DONs which are to be aggregated.
          items:
            type: string
          type: array
        sort_by:
          description: |
            List of fields to sort the pricing object, by and how to sort them.
            Default is to sort by created_date in descending order.
          items:
            type: string
          type: array
      title: pricings-list-request
      type: object
    pricings-list-response:
      properties:
        pricings:
          description: The list of pricing objects.
          items:
            $ref: '#/components/schemas/pricing'
          type: array
      required:
      - pricings
      title: pricings-list-response
      type: object
      x-go-name: PricingsListResponseBody
    pricings-update-request:
      properties:
        id:
          description: The pricing object's DON.
          type: string
        is_active:
          description: |
            Helps in deciding if a pricing object can be used for purchasing
            new items. If set to true then new purchase can be made. If set to
            false then no new purchase can be made, but quantity of existing
            items, which were bought with this pricing ID can be updated.
          type: boolean
        is_tiered:
          description: |
            Whether the slabs represent graduated or volume based pricing.
          type: boolean
        price_slabs:
          description: List of new updated price slabs.
          items:
            $ref: '#/components/schemas/price-slab'
          type: array
      required:
      - id
      - price_slabs
      title: pricings-update-request
      type: object
    pricings-update-response:
      properties:
        pricing:
          $ref: '#/components/schemas/pricing'
      required:
      - pricing
      title: pricings-update-response
      type: object
      x-go-name: PricingsUpdateResponseBody
    product:
      allOf:
      - $ref: '#/components/schemas/part-base'
      - properties:
          fulfilled_by:
            description: IDs of the runnables that fulfill this product.
            items:
              $ref: '#/components/schemas/part-summary'
            type: array
          pm_owner:
            $ref: '#/components/schemas/user-summary'
          product_delivered_as:
            $ref: '#/components/schemas/product-delivered-as'
          versions:
            description: Versions of the product.
            items:
              type: string
            type: array
        type: object
      title: product
    product-delivered-as:
      description: Product Delivered as.
      enum:
      - goods
      - service
      type: string
    product-summary:
      allOf:
      - $ref: '#/components/schemas/part-base-summary'
      title: product-summary
    profile-summary:
      description: Discovery profile summary.
      properties:
        extractors:
          $ref: '#/components/schemas/extractors'
        mergers:
          $ref: '#/components/schemas/dev-rev-partitioner-merger'
        other_data_source_devorg:
          description: |
            Optionally allow to specify a different devorg's data as source. If
            missing current devorg is used.
          type: string
        other_data_source_devorg_v1:
          description: |
            Optionally allow to specify a different devorg's data as source. If
            missing current devorg is used.
          type: string
        partitioners:
          $ref: '#/components/schemas/dev-rev-partitioner-merger'
        profile_id:
          description: Specify discovery profile Id associated.
          type: string
        profile_id_v1:
          description: Specify discovery profile Id associated.
          type: string
        profile_name:
          description: Name of the Discovery profile.
          type: string
      title: profile-summary
      type: object
    profiles-create-request:
      description: Request to create a new profile.
      properties:
        bio:
          description: Professional biography of the user.
          type: string
        display_handle:
          description: Display handles are used to uniquely identify the users.
          type: string
        display_name:
          description: |
            The user's display name. The name is non-unique and mutable.
          type: string
        display_picture:
          description: Artifact ID of the user's display picture
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        full_name:
          description: Full name of the user.
          type: string
        headline:
          description: |
            Brief description of the user's professional experience or
            interests.
          type: string
        phone_numbers:
          description: Phone numbers of the user.
          items:
            type: string
          type: array
        state:
          $ref: '#/components/schemas/user-state'
        visibility:
          $ref: '#/components/schemas/devrev-profile-visibility'
      required:
      - display_name
      title: profiles-create-request
      type: object
    profiles-create-response:
      description: The response for the request to create a new profile.
      properties:
        profile:
          $ref: '#/components/schemas/devrev-profile'
      required:
      - profile
      title: profiles-create-response
      type: object
      x-go-name: ProfilesCreateResponseBody
    profiles-get-by-handle-request:
      description: A request to get the public information of a profile.
      properties:
        display_handle:
          description: The display handle of the profile to get.
          type: string
      required:
      - display_handle
      title: profiles-get-by-handle-request
      type: object
    profiles-get-by-handle-response:
      description: |
        The response for the request to get the public information of a user's
        profile.
      properties:
        bio:
          description: Professional biography of the user.
          type: string
        full_name:
          description: Full name of the user.
          type: string
        headline:
          description: |
            Brief description of the user's professional experience or
            interests.
          type: string
        profile_picture:
          description: URL of the user's profile picture.
          type: string
      title: profiles-get-by-handle-response
      type: object
      x-go-name: ProfilesGetByHandleResponseBody
    profiles-is-display-handle-available-request:
      description: |
        A request to check the availability of the display handle at the time
        of invocation.
      properties:
        display_handle:
          description: Display handles are used to uniquely identify the users.
          type: string
      required:
      - display_handle
      title: profiles-is-display-handle-available-request
      type: object
    profiles-is-display-handle-available-response:
      description: |
        The response for the request to check the availability of the display
        handle.
      properties:
        is_available:
          description: |
            Whether the requested display handle is available or not.
          type: boolean
      required:
      - is_available
      title: profiles-is-display-handle-available-response
      type: object
      x-go-name: ProfilesIsDisplayHandleAvailableResponseBody
    profiles-self-delete-request:
      title: profiles-self-delete-request
      type: object
    profiles-self-delete-response:
      title: profiles-self-delete-response
      type: object
      x-go-name: ProfilesSelfDeleteResponseBody
    profiles-self-request:
      description: |
        The response for the request to get a user's profile information.
      title: profiles-self-request
      type: object
    profiles-self-response:
      description: The response to get a profile's information.
      properties:
        profile:
          $ref: '#/components/schemas/devrev-profile'
      required:
      - profile
      title: profiles-self-response
      type: object
      x-go-name: ProfilesSelfResponseBody
    profiles-self-update-request:
      description: Request to update a user's profile information.
      properties:
        bio:
          description: Professional biography of the user.
          type: string
        display_handle:
          description: Display handles are used to uniquely identify the users.
          type: string
        display_name:
          description: |
            The user's display name. The name is non-unique and mutable.
          type: string
        display_picture:
          description: Artifact ID of the user's display picture
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        full_name:
          description: Full name of the user.
          type: string
        headline:
          description: |
            Brief description of the user's professional experience or
            interests.
          type: string
        phone_numbers:
          description: Phone numbers of the user.
          items:
            type: string
          type: array
        state:
          $ref: '#/components/schemas/user-state'
        visibility:
          $ref: '#/components/schemas/devrev-profile-visibility'
      title: profiles-self-update-request
      type: object
    profiles-self-update-response:
      description: |
        The response for the request to update a user's profile information.
      properties:
        profile:
          $ref: '#/components/schemas/devrev-profile'
      required:
      - profile
      title: profiles-self-update-response
      type: object
      x-go-name: ProfilesSelfUpdateResponseBody
    project:
      allOf:
      - $ref: '#/components/schemas/work-base'
      - properties:
          applies_to_versions:
            description: Part versions relevant to the work.
            items:
              type: string
            type: array
          priority:
            $ref: '#/components/schemas/project-priority'
          project_type:
            $ref: '#/components/schemas/project-type'
          start_date:
            description: Timestamp when the project started.
            format: date-time
            type: string
        type: object
      title: project
    project-priority:
      description: Priority of the work based upon impact and criticality.
      enum:
      - p0
      - p1
      - p2
      - p3
      type: string
    project-summary:
      allOf:
      - $ref: '#/components/schemas/work-base-summary'
      title: project-summary
    project-type:
      description: Type of project.
      enum:
      - deliverable_based
      - time_based
      type: string
    pull-request:
      description: A Pull Request object.
      properties:
        description:
          description: PR Description.
          type: string
        id:
          description: PR ID. Example - PR-503.
          type: string
        title:
          description: PR Title.
          type: string
        url:
          description: URL.
          type: string
      title: pull-request
      type: object
    push-device:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          device_id:
            description: The unique identifier associated with the device.
            type: string
          timestamp:
            description: The last time the device token was updated.
            format: date-time
            type: string
          token:
            description: The token associated with the device.
            type: string
          type:
            $ref: '#/components/schemas/push-device-type'
        type: object
      title: push-device
    push-device-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: push-device-summary
    push-device-type:
      description: The type of the push device.
      enum:
      - android
      - chrome
      - ios
      - ios_sandbox
      type: string
    push-devices-register-request:
      description: The request to register a push device.
      properties:
        device_id:
          description: The unique identifier of the device.
          type: string
        token:
          description: The token to associate with the push device.
          type: string
        type:
          $ref: '#/components/schemas/push-device-type'
      required:
      - device_id
      - token
      - type
      title: push-devices-register-request
      type: object
    push-devices-register-response:
      description: The response to registering a push device.
      properties:
        device:
          $ref: '#/components/schemas/push-device'
      required:
      - device
      title: push-devices-register-response
      type: object
      x-go-name: PushDevicesRegisterResponseBody
    push-devices-unregister-request:
      description: The request to unregister a push device.
      properties:
        device_id:
          description: The unique identifier of the device.
          type: string
        token:
          description: The token associated with the push device.
          type: string
      required:
      - device_id
      title: push-devices-unregister-request
      type: object
    push-devices-update-request:
      description: The request to update the timestamp on a push device.
      properties:
        device_id:
          description: The unique identifier of the device.
          type: string
        token:
          description: The token associated with the push device.
          type: string
      required:
      - device_id
      title: push-devices-update-request
      type: object
    push-devices-update-response:
      description: The response to updating the timestamp on a push device.
      properties:
        device:
          $ref: '#/components/schemas/push-device'
      required:
      - device
      title: push-devices-update-response
      type: object
      x-go-name: PushDevicesUpdateResponseBody
    query-parameter:
      properties:
        name:
          description: Name of the parameter as specified in the query.
          type: string
        value:
          description: Value corresponding to the parameter name.
          type: string
      required:
      - name
      - value
      title: query-parameter
      type: object
    question-answer:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          access_level:
            $ref: '#/components/schemas/access-level'
          answer:
            description: The Answer.
            type: string
          applies_to_articles:
            description: Details of the articles relevant to the question_answer.
            items:
              $ref: '#/components/schemas/article-summary'
            type: array
          applies_to_parts:
            description: Details of the parts relevant to the question_answer.
            items:
              $ref: '#/components/schemas/part-summary'
            type: array
          owned_by:
            description: The users that own the question_answer.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          question:
            description: The Question.
            type: string
          suggested_answer:
            description: |
              An alternative answer suggested by the Q/A generation algorithm.
            type: string
          suggested_for_deletion:
            description: |
              Whether the Q/A was marked for deletion by the Q/A generation
              algorithm.
            type: boolean
          tags:
            description: Tags associated with the article.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
          topic:
            description: The topic to which the QA belongs.
            type: string
          verified:
            description: Whether the Q/A was verified.
            type: boolean
        required:
        - applies_to_parts
        - owned_by
        type: object
      title: question-answer
    question-answer-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: question-answer-summary
    question-answers-create-request:
      description: The request to create an question-answer.
      properties:
        access_level:
          $ref: '#/components/schemas/access-level'
        answer:
          description: Answer of the question-answer.
          type: string
        applies_to_articles:
          description: The articles that the question-answer applies to.
          items:
            type: string
          type: array
        applies_to_parts:
          description: |
            The parts that the question-answer applies to. Specifying at least
            one part is required when creating question-answers.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        owned_by:
          description: The users that own the question-answer.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: The users that own the question-answer.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        question:
          description: Question of the question-answer.
          type: string
        suggested_answer:
          description: |
            Alternative answer for the question-answer sugested by Q/A
            Discovery.
          type: string
        suggested_for_deletion:
          description: |
            Whether the question-answer was suggeste to be deleted by Q/A
            Discovery.
          type: boolean
        tags:
          description: Tags associated with the question-answer.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        topic:
          description: Topic of the question-answer.
          type: string
        verified:
          description: |
            Whether the question-answer was verified by a user or not.
          type: boolean
      required:
      - answer
      - applies_to_parts
      - question
      title: question-answers-create-request
      type: object
    question-answers-create-response:
      description: Create question-answer response.
      properties:
        question_answer:
          $ref: '#/components/schemas/question-answer'
      required:
      - question_answer
      title: question-answers-create-response
      type: object
      x-go-name: QuestionAnswersCreateResponseBody
    question-answers-delete-request:
      description: The request to delete a question-answer.
      properties:
        id:
          description: The ID of the question-answer.
          type: string
        question_answer_id:
          deprecated: true
          description: The ID of the question-answer.
          type: string
      title: question-answers-delete-request
      type: object
    question-answers-get-request:
      description: The request to get a question-answer.
      properties:
        question_answer_id:
          description: The ID of the required question-answer.
          type: string
      required:
      - question_answer_id
      title: question-answers-get-request
      type: object
    question-answers-get-response:
      description: Get question-answer response.
      properties:
        question_answer:
          $ref: '#/components/schemas/question-answer'
      required:
      - question_answer
      title: question-answers-get-response
      type: object
      x-go-name: QuestionAnswersGetResponseBody
    question-answers-list-request:
      description: The request to list question-answers.
      properties:
        applies_to_articles:
          description: |
            Filters for question-answer belonging to any of the provided
            articles.
          items:
            type: string
          type: array
        applies_to_parts:
          description: |
            Filters for question-answer belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_after_date:
          description: |
            Filters for question-answers created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          description: |
            Filters for question-answers created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: |
            Filters for question-answers created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of question-answers to return. The default is
            '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        owned_by:
          description: |
            Filters for question-answers owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        tags:
          description: |
            Filters for question-answer with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      title: question-answers-list-request
      type: object
    question-answers-list-response:
      description: List question-answers response.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        question_answers:
          description: The question-answers entries matching the request.
          items:
            $ref: '#/components/schemas/question-answer'
          type: array
        total:
          description: Total number of question-answer items for the request.
          format: int32
          type: integer
      required:
      - question_answers
      - total
      title: question-answers-list-response
      type: object
      x-go-name: QuestionAnswersListResponseBody
    question-answers-update-request:
      description: The request to update an question-answer.
      properties:
        access_level:
          $ref: '#/components/schemas/access-level'
        answer:
          description: |
            Updated answer of the question-answer object, or unchanged if not
            provided.
          type: string
        applies_to_articles:
          $ref: '#/components/schemas/question-answers-update-request-applies-to-articles'
        applies_to_parts:
          $ref: '#/components/schemas/question-answers-update-request-applies-to-parts'
        id:
          description: The question-answer's's ID.
          type: string
        owned_by:
          $ref: '#/components/schemas/question-answers-update-request-owned-by'
        question:
          description: |
            Updated question of the question-answer object, or unchanged if not
            provided.
          type: string
        suggested_answer:
          description: |
            Updated suggested_answer of the question-answer object, or
            unchanged if not provided.
          type: string
        suggested_for_deletion:
          description: |
            Updated suggested_for_deletion of the question-answer object, or
            unchanged if not provided.
          type: boolean
        tags:
          $ref: '#/components/schemas/question-answers-update-request-tags'
        topic:
          description: |
            Updated topic of the question-answer object, or unchanged if not
            provided.
          type: string
        verified:
          description: |
            Updates whether the question-answer was verified by a user or not.
          type: boolean
      required:
      - id
      title: question-answers-update-request
      type: object
    question-answers-update-request-applies-to-articles:
      properties:
        set:
          description: Updates the article that the question-answer applies to.
          items:
            type: string
          type: array
      title: question-answers-update-request-applies-to-articles
      type: object
    question-answers-update-request-applies-to-parts:
      properties:
        set:
          description: Updates the parts that the question-answer applies to.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      title: question-answers-update-request-applies-to-parts
      type: object
    question-answers-update-request-owned-by:
      properties:
        set:
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: question-answers-update-request-owned-by
      type: object
    question-answers-update-request-tags:
      properties:
        set:
          description: Sets the provided tags on the question-answer.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: question-answers-update-request-tags
      type: object
    question-answers-update-response:
      properties:
        question_answer:
          $ref: '#/components/schemas/question-answer'
      required:
      - question_answer
      title: question-answers-update-response
      type: object
      x-go-name: QuestionAnswersUpdateResponseBody
    reactions-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        emoji:
          description: The name of the emoji to list reactions for.
          type: string
        limit:
          description: The maximum number of reactors to return.
          format: int32
          type: integer
        object:
          description: The ID of the object to list reactions to.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      required:
      - emoji
      - object
      title: reactions-list-request
      type: object
    reactions-list-response:
      properties:
        next_cursor:
          description: |
            The cursor that should be used to iterate the next sequence of
            results, otherwise if not set, then no elements exist after.
          type: string
        reactors:
          description: The reactors that have reacted.
          items:
            $ref: '#/components/schemas/user-summary'
          type: array
      required:
      - reactors
      title: reactions-list-response
      type: object
      x-go-name: ReactionsListResponseBody
    reactions-update-request:
      properties:
        action:
          $ref: '#/components/schemas/reactions-update-request-action'
        emoji:
          description: The name of the emoji for the reaction.
          type: string
        object:
          description: The object to update the reaction to.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      required:
      - action
      - emoji
      - object
      title: reactions-update-request
      type: object
    reactions-update-request-action:
      enum:
      - add
      - remove
      type: string
    reactions-update-response:
      title: reactions-update-response
      type: object
      x-go-name: ReactionsUpdateResponseBody
    real-time-insight:
      allOf:
      - $ref: '#/components/schemas/insight-base'
      title: real-time-insight
    real-time-insight-summary:
      allOf:
      - $ref: '#/components/schemas/insight-base-summary'
      title: real-time-insight-summary
    real-time-insight-value:
      allOf:
      - $ref: '#/components/schemas/insight-value-base'
      - properties:
          value:
            description: Current value of the real time insight.
            type: object
        type: object
      title: real-time-insight-value
    real-time-insight-value-summary:
      allOf:
      - $ref: '#/components/schemas/insight-value-base-summary'
      title: real-time-insight-value-summary
    recent-frame:
      properties:
        comments:
          items:
            $ref: '#/components/schemas/object-frame'
          type: array
        conversations:
          items:
            type: string
          type: array
        dev_users:
          items:
            type: string
          type: array
        notifications:
          items:
            type: string
          type: array
        parts:
          items:
            $ref: '#/components/schemas/object-frame'
          type: array
        rev_users:
          items:
            type: string
          type: array
        tags:
          items:
            type: string
          type: array
        vistas:
          items:
            $ref: '#/components/schemas/object-frame'
          type: array
        works:
          items:
            $ref: '#/components/schemas/object-frame'
          type: array
      required:
      - comments
      - conversations
      - dev_users
      - notifications
      - parts
      - rev_users
      - tags
      - vistas
      - works
      title: recent-frame
      type: object
    recommendation:
      description: Autosuggest recommendation for given required fields.
      properties:
        applies_to_part:
          description: List of recommended parts.
          items:
            $ref: '#/components/schemas/recommendation-item'
          type: array
        owned_by:
          description: List of recommended owners.
          items:
            $ref: '#/components/schemas/recommendation-item'
          type: array
        tag:
          description: List of recommended tags.
          items:
            $ref: '#/components/schemas/recommendation-item'
          type: array
      title: recommendation
      type: object
    recommendation-item:
      description: An autosuggest suggestion item.
      properties:
        applies_to_part:
          $ref: '#/components/schemas/part-summary'
        confidence:
          description: Confidence score of the recommendation.
          format: float
          type: number
        explanation:
          description: Explanation for the recommendation.
          type: string
        owned_by:
          $ref: '#/components/schemas/user-summary'
        tag:
          $ref: '#/components/schemas/tag-summary'
        value:
          enum:
          - applies_to_part
          - owned_by
          - tag
          type: string
      required:
      - confidence
      title: recommendation-item
      type: object
    recurring-line-item-summary:
      allOf:
      - $ref: '#/components/schemas/line-item-base-summary'
      title: recurring-line-item-summary
    remove-object-member-request:
      description: A request to create a new object member.
      properties:
        member_id:
          description: ID of the user or group.
          type: string
        member_identifier:
          enum:
          - member_id
          - rev_user_external_reference
          type: string
        object_id:
          description: |
            Globally unique DevRev Object Name (DON) for the object where the
            member is being added.
          type: string
        rev_user_external_reference:
          $ref: '#/components/schemas/rev-user-external-reference'
      required:
      - object_id
      title: remove-object-member-request
      type: object
    remove-object-member-response:
      title: remove-object-member-response
      type: object
      x-go-name: RemoveObjectMemberResponseBody
    resource:
      description: Resource details.
      properties:
        artifact_ids:
          description: Ids of the artifacts.
          items:
            $ref: '#/components/schemas/artifact-summary'
          type: array
        type:
          $ref: '#/components/schemas/resource-type'
        url:
          description: URL of the external article.
          type: string
      title: resource
      type: object
    resource-summary:
      description: Resource details.
      properties:
        artifact_ids:
          description: Ids of the artifacts.
          items:
            $ref: '#/components/schemas/artifact-summary'
          type: array
        type:
          $ref: '#/components/schemas/resource-type'
        url:
          description: URL of the external article.
          type: string
      title: resource-summary
      type: object
    resource-type:
      description: Type of the article resource.
      enum:
      - artifact
      - url
      type: string
    rev-location-summary:
      description: Rev Part location details.
      properties:
        param_paths:
          description: |
            The detailed path inside an OpenAPI file where information about
            this API object and its version were found.
          items:
            type: string
          type: array
        repo_name:
          description: |
            The name of the repo where information about this API object and
            its version were found.
          type: string
        repo_path:
          description: |
            The repo path where information about this API object and its
            version were found.
          type: string
        source:
          description: |
            The source where information about this API object and its version
            were found.
          type: string
      title: rev-location-summary
      type: object
    rev-object-tags-operator-type:
      enum:
      - all
      - any
      - empty
      - not_any
      - not_empty
      type: string
    rev-org:
      allOf:
      - $ref: '#/components/schemas/org-base'
      - properties:
          account:
            $ref: '#/components/schemas/atom-summary'
          artifacts:
            description: The artifacts attached to the Rev organization.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          custom_fields:
            description: Custom fields.
            type: object
          custom_schema_fragments:
            description: Custom schema fragments.
            items:
              type: string
            type: array
          custom_schema_fragments_v1:
            description: Custom schema fragments.
            type: string
          description:
            description: Description of the Rev organization.
            type: string
          domain:
            description: Company's domain name. Example - 'devrev.ai'.
            type: string
          external_ref:
            description: |
              External ref is a unique identifier for the Rev (customer)
              organization from your primary customer system of records. If none
              is specified, a system-generated identifier will be assigned to the
              organization.
            type: string
          external_ref_issuer:
            description: |
              External ref issuer is the external system of records from which
              this Rev organization's data is imported. If external_ref is
              provided during create and external_ref_issuer isn't, then issuer's
              value is set to 'devrev:default'.
            type: string
          owned_by:
            description: List of Dev user IDs' owning this Rev organization.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          schema_fragment_ids:
            deprecated: true
            description: Combination of stock and custom schema fragment IDs.
            items:
              type: string
            type: array
          schema_fragment_ids_v1:
            description: Combination of stock and custom schema fragment IDs.
            type: string
          sla:
            $ref: '#/components/schemas/sla-summary'
          stock_schema_fragment:
            description: Stock schema fragment.
            type: string
          stock_schema_fragment_v1:
            description: Stock schema fragment.
            type: string
          subtype:
            description: Subtype corresponding to the custom type fragment.
            type: string
          tags:
            description: Tags associated with an object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
          tier:
            description: The Tier of the corresponding RevOrg.
            type: string
          type:
            $ref: '#/components/schemas/rev-org-type'
        required:
        - owned_by
        type: object
      title: rev-org
    rev-org-commerce-details:
      description: |
        RevOrg commerce details contains commerce related data for a RevOrg.
        Stores commerce configurations, billing details, shipping details, etc.
      properties:
        account_id:
          description: The account ID of the dev_org.
          type: string
        billing_details:
          $ref: '#/components/schemas/contact-details'
        billing_email:
          description: The billing contact's email.
          type: string
        configurations:
          $ref: '#/components/schemas/configuration'
        shipping_details:
          $ref: '#/components/schemas/contact-details'
      required:
      - billing_email
      - configurations
      title: rev-org-commerce-details
      type: object
    rev-org-membership:
      description: Rev Org the user belongs to.
      properties:
        rev_org_id:
          $ref: '#/components/schemas/org-summary'
      title: rev-org-membership
      type: object
    rev-org-summary:
      allOf:
      - $ref: '#/components/schemas/org-base-summary'
      title: rev-org-summary
    rev-org-type:
      description: The type of the Rev organization.
      enum:
      - b2b
      - b2c
      type: string
    rev-orgs-bulk-create-request:
      description: Request object to bulk create Rev organizations.
      properties:
        bulk_import_request_type:
          $ref: '#/components/schemas/bulk-import-request-type-enum'
        data:
          description: Input file bytes of uploaded CSV file.
          format: binary
          type: string
        rev_orgs_create_bulk_request_type:
          $ref: '#/components/schemas/bulk-import-request-type-enum'
      required:
      - data
      title: rev-orgs-bulk-create-request
      type: object
    rev-orgs-bulk-create-response:
      description: |
        Response object to create bulk Rev organizations under the given Dev
        organization.
      properties:
        file_error:
          description: Error found in the file.
          type: string
        invalid_csv_headers:
          description: |
            List of all CSV headers which were invalid with stock and custom
            fields.
          items:
            type: string
          type: array
        rev_orgs:
          description: List of all the Rev organization details.
          items:
            $ref: '#/components/schemas/rev-org'
          type: array
        row_errors:
          description: List of all the errors occurred in the rows.
          items:
            $ref: '#/components/schemas/row-error'
          type: array
      required:
      - rev_orgs
      title: rev-orgs-bulk-create-response
      type: object
      x-go-name: RevOrgsBulkCreateResponseBody
    rev-orgs-commerce-details-get-request:
      properties:
        id:
          description: The rev org's DON.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
      title: rev-orgs-commerce-details-get-request
      type: object
    rev-orgs-commerce-details-get-response:
      properties:
        commerce_details:
          $ref: '#/components/schemas/rev-org-commerce-details'
      required:
      - commerce_details
      title: rev-orgs-commerce-details-get-response
      type: object
      x-go-name: RevOrgsCommerceDetailsGetResponseBody
    rev-orgs-commerce-details-update-request:
      properties:
        billing_details:
          $ref: '#/components/schemas/contact-details'
        billing_email:
          description: Billing email of the rev_org.
          type: string
        configuration:
          $ref: '#/components/schemas/configuration'
        id:
          description: The rev org's DON.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        shipping_details:
          $ref: '#/components/schemas/contact-details'
      title: rev-orgs-commerce-details-update-request
      type: object
    rev-orgs-commerce-details-update-response:
      properties:
        commerce_details:
          $ref: '#/components/schemas/rev-org-commerce-details'
      required:
      - commerce_details
      title: rev-orgs-commerce-details-update-response
      type: object
      x-go-name: RevOrgsCommerceDetailsUpdateResponseBody
    rev-orgs-count-request:
      properties:
        account:
          description: Filters by account.
          items:
            type: string
          type: array
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        domain:
          description: Array of domain for Rev organizations to be filtered.
          items:
            type: string
          type: array
        environment:
          description: Environment values to be filtered.
          items:
            $ref: '#/components/schemas/org-environment'
          type: array
        external_ref:
          description: List of external refs to filter Rev organizations for.
          items:
            type: string
          type: array
        external_ref_issuer:
          description: |
            Array of external ref issuers for Rev organizations to be filtered.
          items:
            type: string
          type: array
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters by owners.
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters by owners.
          items:
            type: string
          type: array
        state:
          description: State values to be filtered.
          items:
            $ref: '#/components/schemas/org-state'
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            Filters on tags. Input will be of the format (tags=<tag id
            1>=<value>&tags=<tag id 2>)
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tier:
          description: Array of tier for Rev organizations to be filtered.
          items:
            type: string
          type: array
        type:
          description: Types of Rev organizations to be filtered.
          items:
            $ref: '#/components/schemas/rev-org-type'
          type: array
      title: rev-orgs-count-request
      type: object
    rev-orgs-count-response:
      properties:
        count:
          description: Count of Rev organizations matching the filter.
          format: int32
          type: integer
      required:
      - count
      title: rev-orgs-count-response
      type: object
      x-go-name: RevOrgsCountResponseBody
    rev-orgs-create-request:
      description: |
        Request object to create a new Rev organization in the Dev
        organization.
      properties:
        account:
          description: Account Id this Rev organization is to be associated to.
          type: string
        address:
          $ref: '#/components/schemas/create-postal-address'
        artifacts:
          description: |
            The IDs of the artifacts to associate with the Rev organization.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        custom_fields:
          description: Application-defined custom fields.
          type: object
        description:
          description: Description of the Rev organization.
          type: string
        display_name:
          description: Name of the Rev organization.
          type: string
        domain:
          description: Company's domain name. Example - 'devrev.ai'.
          type: string
        environment:
          $ref: '#/components/schemas/org-environment'
        external_ref:
          description: |
            External ref is a custom unique identifier which is a reference to
            an unique id for this organization's data in some system of
            records.
          type: string
        logo_id:
          description: Artifact ID of the Rev organization's logo.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        owned_by:
          description: List of Dev users owning this Rev organization.
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: List of Dev users owning this Rev organization.
          items:
            type: string
          type: array
        phone_number:
          description: Phone numbers for the Rev organization.
          items:
            $ref: '#/components/schemas/create-phone-number'
          type: array
        phone_numbers:
          description: Phone numbers for the Rev organization.
          items:
            type: string
          type: array
        schema_fragment_ids:
          description: |
            Schema fragment IDs associated with this Rev organization SOR.
          items:
            type: string
          type: array
        state:
          $ref: '#/components/schemas/org-state'
        tags:
          description: Tags associated with the Rev organization.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        tier:
          description: The tier of the RevOrg.
          type: string
        type:
          $ref: '#/components/schemas/rev-org-type'
      required:
      - display_name
      title: rev-orgs-create-request
      type: object
    rev-orgs-create-response:
      description: |
        Response object for request to create a new Rev organization.
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
      - rev_org
      title: rev-orgs-create-response
      type: object
      x-go-name: RevOrgsCreateResponseBody
    rev-orgs-delete-request:
      description: Request object to delete a Rev organization.
      properties:
        id:
          description: The ID of Rev organization to delete.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
      required:
      - id
      title: rev-orgs-delete-request
      type: object
    rev-orgs-delete-response:
      description: The response to deleting a Rev organization.
      title: rev-orgs-delete-response
      type: object
      x-go-name: RevOrgsDeleteResponseBody
    rev-orgs-delete-validate-request:
      description: |
        Request object to check if an Rev organization can be deleted.
      properties:
        id:
          description: The ID of Rev organization to be checked for deletion.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
      required:
      - id
      title: rev-orgs-delete-validate-request
      type: object
    rev-orgs-delete-validate-response:
      description: |
        Response object containing infomation if a Rev organization can be
        deleted.
      properties:
        is_supported:
          description: |
            Bool value denoting if deletion of a Rev organization is supported.
          type: boolean
        reason:
          description: |
            Optional string to denote why a Rev organization cannot be deleted.
          type: string
      required:
      - is_supported
      title: rev-orgs-delete-validate-response
      type: object
      x-go-name: RevOrgsDeleteValidateResponseBody
    rev-orgs-export-request:
      properties:
        account:
          description: Filters by account.
          items:
            type: string
          type: array
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        domain:
          description: Array of domain for Rev organizations to be filtered.
          items:
            type: string
          type: array
        environment:
          description: Environment values to be filtered.
          items:
            $ref: '#/components/schemas/org-environment'
          type: array
        external_ref:
          description: List of external refs to filter Rev organizations for.
          items:
            type: string
          type: array
        external_ref_issuer:
          description: |
            Array of external ref issuers for Rev organizations to be filtered.
          items:
            type: string
          type: array
        first:
          description: |
            The number of Rev Organisations to return. The default is '50', the
            maximum is '5000'.
          format: int32
          type: integer
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters by owners.
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters by owners.
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the Rev Organisations by and the direction to sort
            them.
          items:
            type: string
          type: array
        state:
          description: State values to be filtered.
          items:
            $ref: '#/components/schemas/org-state'
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            Filters on tags. Input will be of the format (tags=<tag id
            1>=<value>&tags=<tag id 2>)
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tier:
          description: Array of tier for Rev organizations to be filtered.
          items:
            type: string
          type: array
        type:
          description: Types of Rev organizations to be filtered.
          items:
            $ref: '#/components/schemas/rev-org-type'
          type: array
      title: rev-orgs-export-request
      type: object
    rev-orgs-export-response:
      properties:
        rev_orgs:
          description: The resulting list of Rev Organisations.
          items:
            $ref: '#/components/schemas/rev-org'
          type: array
      required:
      - rev_orgs
      title: rev-orgs-export-response
      type: object
      x-go-name: RevOrgsExportResponseBody
    rev-orgs-get-request:
      description: Request object to get Rev organization's information.
      properties:
        id:
          description: The ID of the required Rev organization.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
      required:
      - id
      title: rev-orgs-get-request
      type: object
    rev-orgs-get-response:
      description: The response to getting a Rev organization's information.
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
      - rev_org
      title: rev-orgs-get-response
      type: object
      x-go-name: RevOrgsGetResponseBody
    rev-orgs-group:
      description: Group object for Rev organizations group request.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        key:
          description: Unique key according to which the items are grouped.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        rev_orgs:
          description: The group of Rev organizations.
          items:
            $ref: '#/components/schemas/rev-org'
          type: array
      required:
      - key
      - rev_orgs
      title: rev-orgs-group
      type: object
    rev-orgs-group-request:
      description: |
        A request to get group list of Rev organizations for the authenticated
        user's Dev organization.
      properties:
        account:
          description: Filters by account.
          items:
            type: string
          type: array
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        domain:
          description: Array of domain for Rev organizations to be filtered.
          items:
            type: string
          type: array
        environment:
          description: Environment values to be filtered.
          items:
            $ref: '#/components/schemas/org-environment'
          type: array
        external_ref:
          description: List of external refs to filter Rev organizations for.
          items:
            type: string
          type: array
        external_ref_issuer:
          description: |
            Array of external ref issuers for Rev organizations to be filtered.
          items:
            type: string
          type: array
        group_by:
          description: The field to group the rev orgs by.
          type: string
        limit:
          description: |
            The maximum number of groups to return. If not set, then the
            default is '10'.
          format: int32
          type: integer
        limit_per_group:
          description: |
            The maximum number of rev orgs to return for an individual group.
            If not set, then the default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters by owners.
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters by owners.
          items:
            type: string
          type: array
        sort_by:
          description: Fields to sort the rev orgs by.
          items:
            type: string
          type: array
        state:
          description: State values to be filtered.
          items:
            $ref: '#/components/schemas/org-state'
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            Filters on tags. Input will be of the format (tags=<tag id
            1>=<value>&tags=<tag id 2>)
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tier:
          description: Array of tier for Rev organizations to be filtered.
          items:
            type: string
          type: array
        type:
          description: Types of Rev organizations to be filtered.
          items:
            $ref: '#/components/schemas/rev-org-type'
          type: array
      required:
      - group_by
      title: rev-orgs-group-request
      type: object
    rev-orgs-group-response:
      description: Response object for Rev organizations group request.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        groups:
          description: The list of groups.
          items:
            $ref: '#/components/schemas/rev-orgs-group'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - groups
      title: rev-orgs-group-response
      type: object
      x-go-name: RevOrgsGroupResponseBody
    rev-orgs-list-request:
      description: |
        A request to get the list of Rev organizations for the authenticated
        user's Dev organization.
      properties:
        account:
          description: Filters by account.
          items:
            type: string
          type: array
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        domain:
          description: Array of domain for Rev organizations to be filtered.
          items:
            type: string
          type: array
        environment:
          description: Environment values to be filtered.
          items:
            $ref: '#/components/schemas/org-environment'
          type: array
        external_ref:
          description: List of external refs to filter Rev organizations for.
          items:
            type: string
          type: array
        external_ref_issuer:
          description: |
            Array of external ref issuers for Rev organizations to be filtered.
          items:
            type: string
          type: array
        limit:
          description: |
            The maximum number of Rev organizations to be retrieved per page.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters by owners.
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters by owners.
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the Rev organizations by and the direction to sort
            them.
          items:
            type: string
          type: array
        state:
          description: State values to be filtered.
          items:
            $ref: '#/components/schemas/org-state'
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            Filters on tags. Input will be of the format (tags=<tag id
            1>=<value>&tags=<tag id 2>)
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tier:
          description: Array of tier for Rev organizations to be filtered.
          items:
            type: string
          type: array
        type:
          description: Types of Rev organizations to be filtered.
          items:
            $ref: '#/components/schemas/rev-org-type'
          type: array
      title: rev-orgs-list-request
      type: object
    rev-orgs-list-response:
      description: |
        The response to getting a list of Rev organizations' information.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration. If not
            provided, then iteration has completed.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        rev_orgs:
          description: List with all of the Rev organizations' information.
          items:
            $ref: '#/components/schemas/rev-org'
          type: array
      required:
      - rev_orgs
      title: rev-orgs-list-response
      type: object
      x-go-name: RevOrgsListResponseBody
    rev-orgs-update-request:
      description: |
        Request object to update information of the Rev organization.
      properties:
        account:
          description: |
            New account Id this Rev organization is to be associated to.
          type: string
        address:
          $ref: '#/components/schemas/update-postal-address'
        artifacts:
          $ref: '#/components/schemas/rev-orgs-update-request-artifacts'
        custom_fields:
          description: Application-defined custom fields.
          type: object
        description:
          description: Description of the Rev organization.
          type: string
        display_name:
          description: Customer chosen name for the Rev organization.
          type: string
        domain:
          description: Company's domain name. Example - 'devrev.ai'.
          type: string
        environment:
          $ref: '#/components/schemas/org-environment'
        external_ref:
          description: |
            External ref is a custom unique identifier which is a reference to
            an unique id for this organization's data in some system of
            records.
          type: string
        id:
          description: The ID of Rev organization to update.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        logo_id:
          description: Artifact ID of the Rev organization's logo.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          nullable: true
          type: string
        owned_by:
          description: List of Dev users owning this Rev organization.
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: List of Dev user IDs owning the Rev organization.
          items:
            type: string
          type: array
        phone_number:
          description: Phone numbers of the Rev organization.
          items:
            $ref: '#/components/schemas/update-phone-number'
          type: array
        phone_numbers:
          description: Phone numbers of the Rev org.
          items:
            type: string
          type: array
        schema_fragment_ids:
          description: |
            Schema fragment IDs associated with this Rev organization SOR.
          items:
            type: string
          type: array
        state:
          $ref: '#/components/schemas/org-state'
        tags:
          description: Tags associated with the Rev organization.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        tier:
          description: The tier of the RevOrg.
          type: string
        type:
          $ref: '#/components/schemas/rev-org-type'
      required:
      - id
      title: rev-orgs-update-request
      type: object
    rev-orgs-update-request-artifacts:
      properties:
        set:
          description: Sets the IDs to the provided artifact IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
      title: rev-orgs-update-request-artifacts
      type: object
    rev-orgs-update-response:
      description: Response object to updating Rev organization's information.
      properties:
        rev_org:
          $ref: '#/components/schemas/rev-org'
      required:
      - rev_org
      title: rev-orgs-update-response
      type: object
      x-go-name: RevOrgsUpdateResponseBody
    rev-portal-group:
      description: Preferences group for Rev-Portal.
      properties:
        ticket_creation_preferences:
          $ref: '#/components/schemas/ticket-creation-group'
      title: rev-portal-group
      type: object
    rev-user:
      allOf:
      - $ref: '#/components/schemas/user-base'
      - properties:
          artifacts:
            description: The artifacts attached to the Rev user.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          custom_fields:
            description: Custom fields.
            type: object
          custom_schema_fragments:
            description: Custom schema fragments.
            items:
              type: string
            type: array
          custom_schema_fragments_v1:
            description: Custom schema fragments.
            type: string
          description:
            description: Description of the Rev user.
            type: string
          external_ref:
            description: |
              External ref is a mutable unique identifier for a user within the
              Rev organization from your primary customer record. If none is
              available, a good alternative is the email address/phone number
              which could uniquely identify the user. If none is specified, a
              system-generated identifier will be assigned to the user.
            type: string
          external_ref_issuer:
            description: |
              External ref issuer is the external system of records from which
              this Rev user's data is imported. If external_ref is provided
              during create and external_ref_issuer isn't, then issuer's value is
              set to 'devrev:default'.
            type: string
          external_uid:
            description: |
              External ref is a unique identifier for a user within the
              organization from your primary customer record. If none is
              available, a good alternative is the email address/phone number
              which could uniquely identify the user. If none is specified, a
              system-generated identifier will be assigned to the user.
            type: string
          external_uid_issuer:
            description: |
              External ref issuer is the external system of records from which
              this Rev user's data is imported. If external_ref is provided
              during create and external_ref_issuer isn't, then issuer's value is
              set to 'devrev:default'.
            type: string
          rev_oid:
            description: The display id of the corresponding Rev Organization.
            type: string
          rev_org:
            $ref: '#/components/schemas/org-summary'
          rev_orgs:
            description: Rev Orgs the user is associated with.
            items:
              $ref: '#/components/schemas/rev-org-membership'
            type: array
          schema_fragment_ids:
            deprecated: true
            description: Combination of stock and custom schema fragment IDs.
            items:
              type: string
            type: array
          schema_fragment_ids_v1:
            description: Combination of stock and custom schema fragment IDs.
            type: string
          stock_schema_fragment:
            description: Stock schema fragment.
            type: string
          stock_schema_fragment_v1:
            description: Stock schema fragment.
            type: string
          subtype:
            description: Subtype corresponding to the custom type fragment.
            type: string
          tags:
            description: Tags associated with the object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
          user_type:
            $ref: '#/components/schemas/rev-user-user-type'
        type: object
      title: rev-user
    rev-user-external-reference:
      description: Unique Identifier for the rev user.
      properties:
        external_ref:
          description: |
            Unique external identifier for a user within the organization from
            your primary customer record.
          type: string
        external_ref_issuer:
          description: |
            Reference to an external system of records from which this
            organization's data is imported.
          type: string
      required:
      - external_ref
      - external_ref_issuer
      title: rev-user-external-reference
      type: object
    rev-user-summary:
      allOf:
      - $ref: '#/components/schemas/user-base-summary'
      - properties:
          external_ref:
            description: |
              External ref is a mutable unique identifier for a user within the
              Rev organization from your primary customer record. If none is
              available, a good alternative is the email address/phone number
              which could uniquely identify the user. If none is specified, a
              system-generated identifier will be assigned to the user.
            type: string
          rev_org:
            $ref: '#/components/schemas/org-summary'
        type: object
      title: rev-user-summary
    rev-user-user-type:
      description: Type of the user.
      enum:
      - anonymous
      - identified
      type: string
    rev-users-bulk-create-request:
      description: Request object to bulk create Rev Users.
      properties:
        bulk_import_request_type:
          $ref: '#/components/schemas/bulk-import-request-type-enum'
        data:
          description: Input file bytes of uploaded CSV file.
          format: binary
          type: string
        rev_users_create_bulk_request_type:
          $ref: '#/components/schemas/bulk-import-request-type-enum'
      required:
      - data
      title: rev-users-bulk-create-request
      type: object
    rev-users-bulk-create-response:
      description: Response object to create bulk Rev users.
      properties:
        file_error:
          description: Error found in the file.
          type: string
        invalid_csv_headers:
          description: |
            List of all CSV headers which were invalid with stock or custom
            fields.
          items:
            type: string
          type: array
        rev_users:
          description: List of all the Rev users details.
          items:
            $ref: '#/components/schemas/rev-user'
          type: array
        row_errors:
          description: List of all the errors present in the rows.
          items:
            $ref: '#/components/schemas/row-error'
          type: array
      required:
      - rev_users
      title: rev-users-bulk-create-response
      type: object
      x-go-name: RevUsersBulkCreateResponseBody
    rev-users-count-request:
      properties:
        created_by:
          description: |
            Filters for Rev users that were created by the specified user(s).
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
          items:
            type: string
          type: array
        email:
          description: List of emails of Rev users to be filtered.
          items:
            type: string
          type: array
        external_ref:
          description: List of external refs to filter Rev users for.
          items:
            type: string
          type: array
        external_ref_issuer:
          description: |
            List of external ref issuers for Rev users to be filtered.
          items:
            type: string
          type: array
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        rev_org:
          description: List of IDs of Rev organizations to be filtered.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        state:
          description: List of state of Rev users to be filtered.
          items:
            $ref: '#/components/schemas/user-state'
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            List of tags to be filtered. Input will be of the format (tags=<tag
            id 1>=<value>&tags=<tag id 2>).
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      title: rev-users-count-request
      type: object
    rev-users-count-response:
      properties:
        count:
          description: Count of Rev users matching the filter.
          format: int32
          type: integer
      required:
      - count
      title: rev-users-count-response
      type: object
      x-go-name: RevUsersCountResponseBody
    rev-users-create-request:
      description: |
        Request object to create a new Rev user for a Rev organization.
      properties:
        artifacts:
          description: The IDs of the artifacts to associate with the Rev user.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        custom_fields:
          description: Application-defined custom fields.
          type: object
        description:
          description: Description of the Rev user.
          type: string
        display_handle:
          deprecated: true
          description: |
            Display handle of the user. This handle will be used for
            referencing a Rev user. Eg. in conversations.
          type: string
        display_name:
          description: |
            The user's display name. The name is non-unique and mutable.
          type: string
        display_picture_id:
          description: Artifact ID of a Rev user's display picture.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
        email:
          description: Email address of the Rev user.
          type: string
        external_ref:
          description: |
            External ref is a mutable unique identifier for a user within the
            Dev organization from your primary customer record. If none is
            available, a good alternative is the email address/phone number
            which could uniquely identify the user. If none is specified, a
            system-generated identifier will be assigned to the user.
          type: string
        external_ref_issuer:
          description: |
            External ref issuer is the external system of records from which
            this Rev user's data is imported. If external_ref is provided
            during create and external_ref_issuer isn't, then issuer's value is
            set to 'devrev:default'.
          type: string
        external_uid:
          deprecated: true
          description: |
            External user id is a custom unique identifier which is a reference
            to an unique id for this user's data in some system of records.
          type: string
        external_uid_issuer:
          deprecated: true
          description: |
            External user id issuer is a reference to an external system of
            records from which this user's data is imported. If
            external_user_id is provided during create and
            external_user_id_issuer isn't, then its value is set to
            'devrev:default'.
          type: string
        org_id:
          deprecated: true
          description: |
            The ID of Rev organization for which a Rev user is to be created.
            This field is deprecated now. User rev_org field instead.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        phone_numbers:
          description: Phone numbers of the Rev user.
          items:
            type: string
          type: array
        rev_org:
          description: |
            The ID of Rev organization for which a Rev user is to be created.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        schema_fragment_ids:
          description: Schema fragment IDs.
          items:
            type: string
          type: array
        state:
          $ref: '#/components/schemas/user-state'
        tags:
          description: Tags associated with the Rev user.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: rev-users-create-request
      type: object
    rev-users-create-response:
      description: |
        Response object for creating a new Rev user for Rev organization.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: rev-users-create-response
      type: object
      x-go-name: RevUsersCreateResponseBody
    rev-users-delete-request:
      description: Request object to delete a Rev user.
      properties:
        id:
          description: The ID of Rev user to delete.
          type: string
      required:
      - id
      title: rev-users-delete-request
      type: object
    rev-users-delete-response:
      description: The response to deleting a Rev user of a Rev organization.
      title: rev-users-delete-response
      type: object
      x-go-name: RevUsersDeleteResponseBody
    rev-users-export-request:
      properties:
        created_by:
          description: |
            Filters for Rev users that were created by the specified user(s).
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
          items:
            type: string
          type: array
        email:
          description: List of emails of Rev users to be filtered.
          items:
            type: string
          type: array
        external_ref:
          description: List of external refs to filter Rev users for.
          items:
            type: string
          type: array
        external_ref_issuer:
          description: |
            List of external ref issuers for Rev users to be filtered.
          items:
            type: string
          type: array
        first:
          description: |
            The number of Rev Users to return. The default is '50', the maximum
            is '5000'.
          format: int32
          type: integer
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        rev_org:
          description: List of IDs of Rev organizations to be filtered.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the Rev Users by and the direction to sort them.
          items:
            type: string
          type: array
        state:
          description: List of state of Rev users to be filtered.
          items:
            $ref: '#/components/schemas/user-state'
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            List of tags to be filtered. Input will be of the format (tags=<tag
            id 1>=<value>&tags=<tag id 2>).
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      title: rev-users-export-request
      type: object
    rev-users-export-response:
      properties:
        rev_users:
          description: The resulting list of Rev Users.
          items:
            $ref: '#/components/schemas/rev-user'
          type: array
      required:
      - rev_users
      title: rev-users-export-response
      type: object
      x-go-name: RevUsersExportResponseBody
    rev-users-get-request:
      description: Request object to get a Rev user.
      properties:
        id:
          description: The ID of Rev user to be retrieved.
          type: string
      required:
      - id
      title: rev-users-get-request
      type: object
    rev-users-get-response:
      description: The returned Rev user.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: rev-users-get-response
      type: object
      x-go-name: RevUsersGetResponseBody
    rev-users-group:
      description: Group object for RevUsers Group request.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        key:
          description: Unique key according to which the items are grouped.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        rev_users:
          description: The group of Rev users.
          items:
            $ref: '#/components/schemas/rev-user'
          type: array
      required:
      - key
      - rev_users
      title: rev-users-group
      type: object
    rev-users-group-request:
      description: |
        A request to get group list of Rev users for the authenticated user's
        Dev Organization.
      properties:
        created_by:
          description: |
            Filters for Rev users that were created by the specified user(s).
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
          items:
            type: string
          type: array
        email:
          description: List of emails of Rev users to be filtered.
          items:
            type: string
          type: array
        external_ref:
          description: List of external refs to filter Rev users for.
          items:
            type: string
          type: array
        external_ref_issuer:
          description: |
            List of external ref issuers for Rev users to be filtered.
          items:
            type: string
          type: array
        group_by:
          description: The field to group the rev users by.
          type: string
        limit:
          description: |
            The maximum number of groups to return. If not set, then the
            default is '10'.
          format: int32
          type: integer
        limit_per_group:
          description: |
            The maximum number of rev users to return for an individual group.
            If not set, then the default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        rev_oid:
          description: |
            Array of display id's of Rev organizations to be filtered.
          items:
            type: string
          type: array
        rev_org:
          description: List of IDs of Rev organizations to be filtered.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sort_by:
          description: Fields to sort the Rev users by.
          items:
            type: string
          type: array
        state:
          description: List of state of Rev users to be filtered.
          items:
            $ref: '#/components/schemas/user-state'
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            List of tags to be filtered. Input will be of the format (tags=<tag
            id 1>=<value>&tags=<tag id 2>).
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      required:
      - group_by
      title: rev-users-group-request
      type: object
    rev-users-group-response:
      description: Response object for RevUsers Group request.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        groups:
          description: The list of groups.
          items:
            $ref: '#/components/schemas/rev-users-group'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - groups
      title: rev-users-group-response
      type: object
      x-go-name: RevUsersGroupResponseBody
    rev-users-identify-request:
      description: A request to identify a Rev user(a lead).
      properties:
        setting_id:
          description: The PLuG setting identifier of the Dev org.
          type: string
        user_ref:
          description: An identifier which uniquely identifies a Rev user.
          type: string
        user_traits:
          $ref: '#/components/schemas/rev-users-traits'
      required:
      - setting_id
      - user_ref
      title: rev-users-identify-request
      type: object
    rev-users-identify-response:
      description: The response with the Rev user session token.
      properties:
        expires_in:
          description: |
            The validity lifetime of the token specified in seconds since Unix
            epoch.
          format: int64
          type: integer
        token:
          description: A Rev user session token.
          type: string
      required:
      - expires_in
      - token
      title: rev-users-identify-response
      type: object
      x-go-name: RevUsersIdentifyResponseBody
    rev-users-list-all-request:
      description: |
        A request to list all Rev users' information in a Dev organization.
      properties:
        created_by:
          description: |
            Filters for Rev users that were created by the specified user(s).
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
          items:
            type: string
          type: array
        email:
          description: List of emails of Rev users to be filtered.
          items:
            type: string
          type: array
        external_ref:
          description: List of external refs to filter Rev users for.
          items:
            type: string
          type: array
        external_ref_issuer:
          description: |
            List of external ref issuers for Rev users to be filtered.
          items:
            type: string
          type: array
        limit:
          description: |
            The maximum number of Rev users to return per page. The default is
            '50', the maximum is '100'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        rev_oid:
          deprecated: true
          description: Array of display id's of Rev orgs to be filtered.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        rev_org:
          description: List of IDs of Rev organizations to be filtered.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the Rev users by and the direction to sort them.
          items:
            type: string
          type: array
        state:
          description: List of state of Rev users to be filtered.
          items:
            $ref: '#/components/schemas/user-state'
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            List of tags to be filtered. Input will be of the format (tags=<tag
            id 1>=<value>&tags=<tag id 2>).
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      title: rev-users-list-all-request
      type: object
    rev-users-list-all-response:
      description: |
        The response to list all of the Rev users in a Dev organization.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration. If not
            provided, then iteration has completed.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        rev_users:
          description: List with all of the Rev users' information.
          items:
            $ref: '#/components/schemas/rev-user'
          type: array
        total:
          deprecated: true
          description: Total number of Rev users matching the input filter.
          format: int32
          type: integer
      required:
      - rev_users
      - total
      title: rev-users-list-all-response
      type: object
      x-go-name: RevUsersListAllResponseBody
    rev-users-list-request:
      description: |
        Gets the list of Rev users belonging to the authenticated user's Dev
        Organization which the user is also authorized to access.
      properties:
        created_by:
          description: |
            Filters for Rev users that were created by the specified user(s).
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
          items:
            type: string
          type: array
        email:
          description: List of emails of Rev users to be filtered.
          items:
            type: string
          type: array
        external_ref:
          description: List of external refs to filter Rev users for.
          items:
            type: string
          type: array
        external_ref_issuer:
          description: |
            List of external ref issuers for Rev users to be filtered.
          items:
            type: string
          type: array
        limit:
          description: |
            The maximum number of Rev users to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        org_id:
          deprecated: true
          description: The ID of Rev organization to list all Rev users of.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        rev_org:
          description: List of IDs of Rev organizations to be filtered.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the Rev users by and the direction to sort them.
          items:
            type: string
          type: array
        state:
          description: List of state of Rev users to be filtered.
          items:
            $ref: '#/components/schemas/user-state'
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            List of tags to be filtered. Input will be of the format (tags=<tag
            id 1>=<value>&tags=<tag id 2>).
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      title: rev-users-list-request
      type: object
    rev-users-list-response:
      description: |
        The response to listing all Rev users matching the filter criteria.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration. If not
            provided, then iteration has completed.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        rev_users:
          description: List containing all the Rev users.
          items:
            $ref: '#/components/schemas/rev-user'
          type: array
      required:
      - rev_users
      title: rev-users-list-response
      type: object
      x-go-name: RevUsersListResponseBody
    rev-users-merge-request:
      description: Request object for RevUsersMerge call.
      properties:
        primary_user:
          description: The unique ID of the primary user.
          type: string
        secondary_user:
          description: The unique ID of the secondary user.
          type: string
      required:
      - primary_user
      - secondary_user
      title: rev-users-merge-request
      type: object
    rev-users-merge-response:
      description: The response to RevUsersMerge call.
      title: rev-users-merge-response
      type: object
      x-go-name: RevUsersMergeResponseBody
    rev-users-self-request:
      description: A request to get the authenticated user's information.
      title: rev-users-self-request
      type: object
    rev-users-self-response:
      description: |
        The response to getting the information for the authenticated user.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: rev-users-self-response
      type: object
      x-go-name: RevUsersSelfResponseBody
    rev-users-self-update-request:
      description: |
        A request to update the user's information for the authenticated Rev
        user.
      properties:
        display_handle:
          deprecated: true
          description: The updated display handle of the Rev user.
          type: string
        display_name:
          description: The updated display name of the Rev user.
          type: string
        email:
          description: The email address of the Rev user.
          type: string
        full_name:
          description: The updated full name of the Rev user.
          type: string
      title: rev-users-self-update-request
      type: object
    rev-users-self-update-response:
      description: The response to update the authenticated Rev user.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: rev-users-self-update-response
      type: object
      x-go-name: RevUsersSelfUpdateResponseBody
    rev-users-traits:
      description: Rev user info.
      properties:
        display_name:
          description: The display name of the Rev user.
          type: string
        email:
          description: The email address of the Rev user.
          type: string
        full_name:
          description: The full name of the Rev user.
          type: string
      title: rev-users-traits
      type: object
    rev-users-update-request:
      description: Request to update details of a Rev user.
      properties:
        artifacts:
          $ref: '#/components/schemas/rev-users-update-request-artifacts'
        custom_fields:
          description: Application-defined custom fields.
          type: object
        description:
          description: Updated description of the Rev user.
          type: string
        display_handle:
          deprecated: true
          description: Updated display handle of the Rev user.
          type: string
        display_name:
          description: Updated display name of the Rev user.
          type: string
        display_picture_id:
          description: Artifact ID of a Rev user's updated display picture.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          nullable: true
          type: string
        email:
          description: Updated email address of the Rev user.
          type: string
        external_ref:
          description: Updated external ref value of the Rev user.
          type: string
        external_ref_issuer:
          description: |
            External ref issuer is the external system of records from which
            this Rev user's data is imported. If external_ref is provided
            during create and external_ref_issuer isn't, then issuer's value is
            set to 'devrev:default'.
          type: string
        external_uid:
          deprecated: true
          description: |
            External uid is a mutable unique identifier for a user within the
            Rev organization from your primary customer record. If none is
            available, a good alternative is the email address/phone number
            which could uniquely identify the user. If none is specified, a
            system-generated identifier will be assigned to the user.
          type: string
        external_uid_issuer:
          deprecated: true
          description: |
            External uid issuer is the external system of records from which
            this Rev user's data is imported. If external_uid is provided
            during create and external_uid_issuer isn't, then issuer's value is
            set to 'devrev:default'.
          type: string
        id:
          description: The ID of Rev user to update.
          type: string
        phone_numbers:
          description: Phone numbers of the Rev user.
          items:
            type: string
          type: array
        schema_fragment_ids:
          description: Schema fragment IDs.
          items:
            type: string
          type: array
        state:
          $ref: '#/components/schemas/user-state'
        tags:
          description: Tags associated with the Rev user.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      required:
      - id
      title: rev-users-update-request
      type: object
    rev-users-update-request-artifacts:
      properties:
        set:
          description: Sets the IDs to the provided artifact IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
      title: rev-users-update-request-artifacts
      type: object
    rev-users-update-response:
      description: Updated Rev user object.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: rev-users-update-response
      type: object
      x-go-name: RevUsersUpdateResponseBody
    reward:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          amount:
            description: The reward points awarded.
            format: int32
            type: integer
          amount_expired:
            description: The reward amount expired.
            format: int32
            type: integer
          amount_used:
            description: The reward amount used.
            format: int32
            type: integer
          description:
            description: Description for the Reward.
            type: string
          expiry_time:
            description: Date on which remaining reward amount expires.
            format: date-time
            type: string
          rev_org:
            $ref: '#/components/schemas/org-summary'
          rev_user:
            $ref: '#/components/schemas/user-summary'
        required:
        - amount
        - amount_expired
        - amount_used
        - expiry_time
        - rev_org
        type: object
      title: reward
    reward-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: reward-summary
    reward-transaction:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          amount_transferred:
            description: |
              The reward points transferred as part of this transaction.
            format: int32
            type: integer
          description:
            description: Details of the Reward Transaction.
            type: string
          rev_org:
            $ref: '#/components/schemas/org-summary'
          rev_user:
            $ref: '#/components/schemas/user-summary'
          transaction_time:
            description: Date of the transaction.
            format: date-time
            type: string
        required:
        - amount_transferred
        - rev_org
        - transaction_time
        type: object
      title: reward-transaction
    reward-transaction-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: reward-transaction-summary
    reward-transactions-list-request:
      properties:
        from_transaction_date:
          description: |
            The transaction date from which to aggregate reward transaction
            objects.
          format: date-time
          type: string
        sort_by:
          description: |
            List of fields to sort the reward transaction object, by and how to
            sort them. Default is to sort by created_date in descending order.
          items:
            type: string
          type: array
        to_transaction_date:
          description: |
            The transaction date till which to aggregate reward transaction
            objects.
          format: date-time
          type: string
      title: reward-transactions-list-request
      type: object
    reward-transactions-list-response:
      properties:
        reward_transactions:
          description: The list of reward transaction objects.
          items:
            $ref: '#/components/schemas/reward-transaction'
          type: array
      required:
      - reward_transactions
      title: reward-transactions-list-response
      type: object
      x-go-name: RewardTransactionsListResponseBody
    rewards-create-request:
      properties:
        description:
          description: Description of the reward object.
          type: string
        expiry_time:
          description: Timestamp when the rewarded points will expire.
          format: date-time
          type: string
        rev_org_id:
          description: The rev org for which reward is being created.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        rev_user_id:
          description: |
            The rev user for which reward is being created (if reward is for a
            rev user).
          type: string
        reward_points:
          description: The reward points being awarded.
          format: int64
          type: integer
      required:
      - reward_points
      title: rewards-create-request
      type: object
    rewards-create-response:
      properties:
        reward:
          $ref: '#/components/schemas/reward'
      required:
      - reward
      title: rewards-create-response
      type: object
      x-go-name: RewardsCreateResponseBody
    rewards-get-request:
      properties:
        id:
          description: The reward object's DON.
          type: string
      required:
      - id
      title: rewards-get-request
      type: object
    rewards-get-response:
      properties:
        reward:
          $ref: '#/components/schemas/reward'
      required:
      - reward
      title: rewards-get-response
      type: object
      x-go-name: RewardsGetResponseBody
    rewards-list-request:
      properties:
        from_expiry_date:
          description: The expiry date from which to aggregate reward objects.
          format: date-time
          type: string
        sort_by:
          description: |
            List of fields to sort the reward object, by and how to sort them.
            Default is to sort by created_date in descending order.
          items:
            type: string
          type: array
        to_expiry_date:
          description: The expiry date till which to aggregate reward objects.
          format: date-time
          type: string
      title: rewards-list-request
      type: object
    rewards-list-response:
      properties:
        rewards:
          description: The list of reward objects.
          items:
            $ref: '#/components/schemas/reward'
          type: array
      required:
      - rewards
      title: rewards-list-response
      type: object
      x-go-name: RewardsListResponseBody
    rewards-transfer-request:
      properties:
        destination_rev_user_id:
          description: |
            The recipient rev user for the reward transfer (if any).In case,
            when 'destination_rev_user_id' is not provided then, by default rev
            org is the recipient of the transfer.
          type: string
        transfer_amount:
          description: The reward points to be transferred.
          format: int64
          type: integer
      required:
      - transfer_amount
      title: rewards-transfer-request
      type: object
    rewards-transfer-response:
      properties:
        reward_transaction:
          $ref: '#/components/schemas/reward-transaction'
      required:
      - reward_transaction
      title: rewards-transfer-response
      type: object
      x-go-name: RewardsTransferResponseBody
    rewards-transfer-to-credits-request:
      properties:
        transfer_amount:
          description: The reward points to be transferred.
          format: int64
          type: integer
      required:
      - transfer_amount
      title: rewards-transfer-to-credits-request
      type: object
    rewards-transfer-to-credits-response:
      properties:
        reward_transaction:
          $ref: '#/components/schemas/reward-transaction'
      required:
      - reward_transaction
      title: rewards-transfer-to-credits-response
      type: object
      x-go-name: RewardsTransferToCreditsResponseBody
    role:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          caveat_description:
            description: Description of caveat.
            type: string
          conditions:
            description: Conditions definition which must be met for role.
            items:
              $ref: '#/components/schemas/condition'
            type: array
          default_version:
            description: Version of the default role.
            type: string
          description:
            description: Description of the role.
            type: string
          field_privileges:
            $ref: '#/components/schemas/field-privileges'
          is_default:
            description: Specifies whether the role is a default role.
            type: boolean
          name:
            description: Name of the Role.
            type: string
          privileges:
            description: Privileges the role provides.
            items:
              $ref: '#/components/schemas/role-privileges'
            type: array
          target:
            $ref: '#/components/schemas/role-target'
        required:
        - is_default
        - privileges
        - target
        type: object
      title: role
    role-privileges:
      description: Privileges the role provides.
      enum:
      - create
      - delete
      - read
      - update
      type: string
    role-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: Name of the Role.
            type: string
        type: object
      title: role-summary
    role-target:
      description: Target object type of the role.
      enum:
      - addon_rule
      - article
      - artifact
      - capability
      - conversation
      - credit
      - credit_coupon
      - custom_part
      - dev_org
      - dev_user
      - enhancement
      - feature
      - flow
      - group
      - invoice
      - issue
      - linkable
      - marketplace
      - marketplace_category
      - object_member
      - payment_method_card
      - pricing
      - product
      - rev_user
      - revo_config
      - role
      - runnable
      - service_plan
      - sku
      - sku_rule
      - snap_in
      - ticket
      - token
      - uom
      - vista
      - webhook
      type: string
    role-v1-don:
      properties:
        display_id:
          type: string
        id:
          type: string
        id_v1:
          type: string
      required:
      - id
      - id_v1
      title: role-v1-don
      type: object
    roles-apply-request:
      description: A request to apply (assign or revoke) roles of a principal.
      properties:
        assign:
          description: Roles to be additionally assigned to principal.
          items:
            type: string
          type: array
        principal:
          description: The ID of the principal.
          type: string
        revoke:
          description: Roles to be revoked from principal.
          items:
            type: string
          type: array
      required:
      - assign
      - principal
      - revoke
      title: roles-apply-request
      type: object
    roles-apply-response:
      description: The response to roles apply.
      title: roles-apply-response
      type: object
      x-go-name: RolesApplyResponseBody
    roles-create-request:
      description: A request to create a new role.
      properties:
        conditions:
          description: The conditions on the role.
          items:
            $ref: '#/components/schemas/roles-create-request-condition'
          type: array
        description:
          description: The description of the role.
          type: string
        name:
          description: The name of the role.
          type: string
        privileges:
          description: The privileges the role provides on target.
          items:
            $ref: '#/components/schemas/role-privileges'
          minItems: 1
          type: array
        target:
          $ref: '#/components/schemas/role-target'
      required:
      - conditions
      - description
      - name
      - privileges
      - target
      title: roles-create-request
      type: object
    roles-create-request-condition:
      description: Condition.
      properties:
        key:
          description: Key used to fetch the object value.
          type: string
        operator:
          $ref: '#/components/schemas/condition-operator'
        vals:
          description: Values valid for the key.
          items:
            type: string
          minItems: 1
          type: array
      required:
      - key
      - operator
      - vals
      title: roles-create-request-condition
      type: object
    roles-create-response:
      description: A response to a request to create a new role.
      properties:
        role:
          $ref: '#/components/schemas/role'
      required:
      - role
      title: roles-create-response
      type: object
      x-go-name: RolesCreateResponseBody
    roles-delete-request:
      description: A request to delete a role.
      properties:
        id:
          description: ID for the role.
          type: string
      required:
      - id
      title: roles-delete-request
      type: object
    roles-delete-response:
      description: The response to deleting the role.
      title: roles-delete-response
      type: object
      x-go-name: RolesDeleteResponseBody
    roles-get-request:
      description: A request to get a role's information.
      properties:
        id:
          description: ID for the role.
          type: string
      required:
      - id
      title: roles-get-request
      type: object
    roles-get-response:
      description: The response to getting the information for the role.
      properties:
        role:
          $ref: '#/components/schemas/role'
      required:
      - role
      title: roles-get-response
      type: object
      x-go-name: RolesGetResponseBody
    roles-list-request:
      description: A request to get list of roles assigned to a principal.
      properties:
        is_default:
          description: Whether to fetch default or custom roles.
          type: boolean
        principal:
          description: Filters roles by principal.
          type: string
        target:
          description: Filter roles by target object type(s).
          items:
            $ref: '#/components/schemas/role-target'
          type: array
      title: roles-list-request
      type: object
    roles-list-response:
      description: The response to listing the roles.
      properties:
        roles:
          description: The list of roles.
          items:
            $ref: '#/components/schemas/role'
          type: array
      required:
      - roles
      title: roles-list-response
      type: object
      x-go-name: RolesListResponseBody
    roles-update-request:
      description: A request to update a role.
      properties:
        conditions:
          $ref: '#/components/schemas/roles-update-request-conditions'
        description:
          description: The updated role's description.
          type: string
        id:
          description: ID for the role.
          type: string
        name:
          description: The updated role's name.
          type: string
        privileges:
          $ref: '#/components/schemas/roles-update-request-privileges'
      required:
      - id
      title: roles-update-request
      type: object
    roles-update-request-condition:
      description: Condition.
      properties:
        key:
          description: Key used to fetch the object value.
          type: string
        operator:
          $ref: '#/components/schemas/condition-operator'
        vals:
          description: Values valid for the key.
          items:
            type: string
          minItems: 1
          type: array
      required:
      - key
      - operator
      - vals
      title: roles-update-request-condition
      type: object
    roles-update-request-conditions:
      properties:
        set:
          description: Sets the conditions to the provided conditions.
          items:
            $ref: '#/components/schemas/roles-update-request-condition'
          type: array
      title: roles-update-request-conditions
      type: object
    roles-update-request-privileges:
      properties:
        set:
          description: |
            Sets the privileges to the provided privileges. This must not be
            empty.
          items:
            $ref: '#/components/schemas/role-privileges'
          type: array
      title: roles-update-request-privileges
      type: object
    roles-update-response:
      description: The response to updating the role.
      properties:
        role:
          $ref: '#/components/schemas/role'
      required:
      - role
      title: roles-update-response
      type: object
      x-go-name: RolesUpdateResponseBody
    room:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          description:
            description: Description of the room.
            type: string
          parent:
            $ref: '#/components/schemas/atom-summary'
          token:
            description: Unique token for joining the room.
            type: string
        type: object
      title: room
    room-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: room-summary
    rooms-create-request:
      description: A request to create a video-call room.
      properties:
        description:
          description: Description of the room.
          type: string
        invite_users:
          description: The users that should be invited to the huddle.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        parent_id:
          description: The parent object ID in which the room is created.
          type: string
      required:
      - parent_id
      title: rooms-create-request
      type: object
    rooms-create-response:
      description: Create room response.
      properties:
        room:
          $ref: '#/components/schemas/room'
      required:
      - room
      title: rooms-create-response
      type: object
      x-go-name: RoomsCreateResponseBody
    rooms-inform-request:
      description: A request to inform a room of a user update.
      properties:
        invite_users:
          description: The users that should be invited to the huddle.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        parent_id:
          description: The parent object ID in which the room is informed.
          type: string
        status:
          $ref: '#/components/schemas/rooms-inform-request-status-value'
      required:
      - parent_id
      title: rooms-inform-request
      type: object
    rooms-inform-request-status-value:
      enum:
      - joined
      - left
      type: string
    rooms-inform-response:
      title: rooms-inform-response
      type: object
      x-go-name: RoomsInformResponseBody
    row-error:
      properties:
        errors:
          description: List of all the errors in a single row of the CSV.
          items:
            type: string
          type: array
      required:
      - errors
      title: row-error
      type: object
    rule:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          description:
            description: Description of the rule.
            type: string
          name:
            description: Name of the rule.
            type: string
          nodes:
            description: RuleNodes.
            items:
              $ref: '#/components/schemas/rule-node-instance'
            type: array
          state:
            description: State of the rule.
            type: string
          trigger:
            $ref: '#/components/schemas/rule-node-instance'
        type: object
      title: rule
    rule-node-instance:
      description: RuleNode instance containg relevant rule node information.
      properties:
        description:
          description: Description of the rule node.
          type: string
        display_name:
          description: Display Name of the rule node.
          type: string
        input:
          description: input of the rule node.
          type: object
        name:
          description: Name of the rule node.
          type: string
        rule_node_id:
          description: Id of the rule node.
          type: string
        transitions:
          description: |
            List of transitions of the rule node based on the output state.
          items:
            $ref: '#/components/schemas/rule-node-transition'
          type: array
      required:
      - transitions
      title: rule-node-instance
      type: object
    rule-node-transition:
      description: |
        Contains which rule node to transition to next based on the the output
        state.
      properties:
        node:
          description: Id of the next rule node.
          type: string
        state:
          description: Output state of the rule node.
          type: string
      title: rule-node-transition
      type: object
    rule-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: rule-summary
    rules-create-request:
      description: The request for creating a rule.
      properties:
        description:
          description: Description of the rule.
          type: string
        name:
          description: Name of the rule.
          type: string
        nodes:
          description: Nodes part of the rule.
          items:
            $ref: '#/components/schemas/rule-node-instance'
          type: array
        state:
          description: State of the rule.
          type: string
        trigger:
          $ref: '#/components/schemas/rule-node-instance'
      required:
      - name
      - nodes
      - state
      - trigger
      title: rules-create-request
      type: object
    rules-create-response:
      description: The response for create rule request.
      properties:
        rule:
          $ref: '#/components/schemas/rule'
      required:
      - rule
      title: rules-create-response
      type: object
      x-go-name: RulesCreateResponseBody
    rules-delete-request:
      description: The request for getting a rule.
      properties:
        id:
          description: The ID of the requested rule.
          type: string
      required:
      - id
      title: rules-delete-request
      type: object
    rules-get-request:
      description: The request for getting a rule.
      properties:
        id:
          description: The ID of the requested rule.
          type: string
      required:
      - id
      title: rules-get-request
      type: object
    rules-get-response:
      description: The response for get rule request.
      properties:
        rule:
          $ref: '#/components/schemas/rule'
      required:
      - rule
      title: rules-get-response
      type: object
      x-go-name: RulesGetResponseBody
    rules-list-request:
      description: The request for getting rules based on requested filters.
      properties:
        state:
          description: State of the rule.
          items:
            type: string
          type: array
      title: rules-list-request
      type: object
    rules-list-response:
      description: The response for list rule request.
      properties:
        rules:
          description: Rules matching the list request.
          items:
            $ref: '#/components/schemas/rule'
          type: array
      required:
      - rules
      title: rules-list-response
      type: object
      x-go-name: RulesListResponseBody
    rules-update-request:
      description: The request for updating a rule.
      properties:
        description:
          description: The updated description of the rule.
          type: string
        id:
          description: The ID of the rule to update.
          type: string
        name:
          description: The updated name of the rule.
          type: string
        nodes:
          description: The updated nodes part of the rule.
          items:
            $ref: '#/components/schemas/rule-node-instance'
          type: array
        state:
          description: The updated state of the rule.
          type: string
        trigger:
          $ref: '#/components/schemas/rule-node-instance'
      required:
      - id
      title: rules-update-request
      type: object
    rules-update-response:
      description: The response for update rule request.
      properties:
        rule:
          $ref: '#/components/schemas/rule'
      required:
      - rule
      title: rules-update-response
      type: object
      x-go-name: RulesUpdateResponseBody
    run-discovery-request:
      properties:
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
        sources:
          description: |
            Optional list of sources which will override discovery profile.
          items:
            type: string
          type: array
      title: run-discovery-request
      type: object
    run-discovery-response:
      properties:
        run:
          $ref: '#/components/schemas/discovery-run'
      required:
      - run
      title: run-discovery-response
      type: object
      x-go-name: RunDiscoveryResponseBody
    runnable:
      allOf:
      - $ref: '#/components/schemas/part-base'
      - properties:
          code_inferred_surface_area:
            description: |
              Code part surface area is defined as all the source files or file
              globs that make up this code part. This field lists the surface
              area of this code part as it was inferred automatically.
            items:
              type: string
            type: array
          code_last_inference_details:
            $ref: '#/components/schemas/inference-details'
          code_repo_paths:
            description: Paths in the repository for the code part.
            type: string
          code_repo_url:
            description: URL to the server & repo for the code part.
            type: string
          code_versions:
            description: Versions of the code.
            items:
              $ref: '#/components/schemas/code-version-summary'
            type: array
          discovery_confidence:
            description: |
              A confidence score computed by the inference engine. Currently, the
              score is not normalized across different part inferences. Until
              this is improved, this should only be comparable to confidence of
              same part type.
            format: double
            type: number
          discovery_evidences:
            description: |
              A evidences that the inferer were able to find that justify the
              inference outcome.
            items:
              type: string
            type: array
          discovery_last_inferred_at:
            description: The time when this inference occurred.
            format: date-time
            type: string
          kind:
            $ref: '#/components/schemas/runnable-kind'
        type: object
      title: runnable
    runnable-kind:
      description: The kind of runnable.
      enum:
      - ecr_image
      - lambda
      - microservice
      - service
      type: string
    runnable-pin-summary:
      allOf:
      - $ref: '#/components/schemas/part-pin-base-summary'
      title: runnable-pin-summary
    runnable-summary:
      allOf:
      - $ref: '#/components/schemas/part-base-summary'
      title: runnable-summary
    schedule-data-collection-request:
      properties:
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      title: schedule-data-collection-request
      type: object
    schedule-data-collection-response:
      title: schedule-data-collection-response
      type: object
      x-go-name: ScheduleDataCollectionResponseBody
    schedule-discovery-request:
      properties:
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      title: schedule-discovery-request
      type: object
    schedule-discovery-response:
      title: schedule-discovery-response
      type: object
      x-go-name: ScheduleDiscoveryResponseBody
    schema-bool-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            type: boolean
        type: object
      title: schema-bool-field-descriptor
    schema-bool-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            items:
              type: boolean
            type: array
        type: object
      title: schema-bool-list-field-descriptor
    schema-composite-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          composite_type:
            description: Composite type. Required when field type is composite.
            type: string
        type: object
      title: schema-composite-field-descriptor
    schema-composite-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          composite_type:
            description: Composite type. Required when field type is composite.
            type: string
        type: object
      title: schema-composite-list-field-descriptor
    schema-double-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            format: double
            type: number
        type: object
      title: schema-double-field-descriptor
    schema-double-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            items:
              format: double
              type: number
            type: array
        type: object
      title: schema-double-list-field-descriptor
    schema-enum-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          allowed_values:
            description: Allowed values for the field.
            items:
              type: string
            type: array
          default_value:
            description: Default value.
            type: string
        required:
        - allowed_values
        type: object
      title: schema-enum-field-descriptor
    schema-enum-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          allowed_values:
            description: Allowed values for the field.
            items:
              type: string
            type: array
          default_value:
            description: Default value.
            items:
              type: string
            type: array
        required:
        - allowed_values
        type: object
      title: schema-enum-list-field-descriptor
    schema-field-create-view-ui-metadata:
      description: Create view UI hint overrides.
      properties:
        is_hidden:
          description: Whether field is hidden in UI.
          type: boolean
      title: schema-field-create-view-ui-metadata
      type: object
    schema-field-descriptor:
      description: Set of field attributes.
      discriminator:
        mapping:
          array: '#/components/schemas/schema-field-descriptor-array-type'
          bool: '#/components/schemas/schema-bool-field-descriptor'
          composite: '#/components/schemas/schema-composite-field-descriptor'
          double: '#/components/schemas/schema-double-field-descriptor'
          enum: '#/components/schemas/schema-enum-field-descriptor'
          id: '#/components/schemas/schema-id-field-descriptor'
          int: '#/components/schemas/schema-int-field-descriptor'
          rich_text: '#/components/schemas/schema-rich-text-field-descriptor'
          text: '#/components/schemas/schema-text-field-descriptor'
          timestamp: '#/components/schemas/schema-timestamp-field-descriptor'
          tokens: '#/components/schemas/schema-tokens-field-descriptor'
        propertyName: field_type
      oneOf:
      - $ref: '#/components/schemas/schema-bool-field-descriptor'
      - $ref: '#/components/schemas/schema-composite-field-descriptor'
      - $ref: '#/components/schemas/schema-double-field-descriptor'
      - $ref: '#/components/schemas/schema-enum-field-descriptor'
      - $ref: '#/components/schemas/schema-field-descriptor-array-type'
      - $ref: '#/components/schemas/schema-id-field-descriptor'
      - $ref: '#/components/schemas/schema-int-field-descriptor'
      - $ref: '#/components/schemas/schema-rich-text-field-descriptor'
      - $ref: '#/components/schemas/schema-text-field-descriptor'
      - $ref: '#/components/schemas/schema-timestamp-field-descriptor'
      - $ref: '#/components/schemas/schema-tokens-field-descriptor'
      properties:
        field_type:
          $ref: '#/components/schemas/schema-field-descriptor-field-type'
      required:
      - field_type
      title: schema-field-descriptor
      type: object
    schema-field-descriptor-array-type:
      discriminator:
        mapping:
          bool: '#/components/schemas/schema-bool-list-field-descriptor'
          composite: '#/components/schemas/schema-composite-list-field-descriptor'
          double: '#/components/schemas/schema-double-list-field-descriptor'
          enum: '#/components/schemas/schema-enum-list-field-descriptor'
          id: '#/components/schemas/schema-id-list-field-descriptor'
          int: '#/components/schemas/schema-int-list-field-descriptor'
          rich_text: '#/components/schemas/schema-rich-text-list-field-descriptor'
          text: '#/components/schemas/schema-text-list-field-descriptor'
          timestamp: '#/components/schemas/schema-timestamp-list-field-descriptor'
          tokens: '#/components/schemas/schema-tokens-list-field-descriptor'
        propertyName: base_type
      oneOf:
      - $ref: '#/components/schemas/schema-bool-list-field-descriptor'
      - $ref: '#/components/schemas/schema-composite-list-field-descriptor'
      - $ref: '#/components/schemas/schema-double-list-field-descriptor'
      - $ref: '#/components/schemas/schema-enum-list-field-descriptor'
      - $ref: '#/components/schemas/schema-id-list-field-descriptor'
      - $ref: '#/components/schemas/schema-int-list-field-descriptor'
      - $ref: '#/components/schemas/schema-rich-text-list-field-descriptor'
      - $ref: '#/components/schemas/schema-text-list-field-descriptor'
      - $ref: '#/components/schemas/schema-timestamp-list-field-descriptor'
      - $ref: '#/components/schemas/schema-tokens-list-field-descriptor'
      properties:
        base_type:
          $ref: '#/components/schemas/schema-field-descriptor-array-type-base-type'
        max_items:
          description: The maximum array length.
          format: int64
          type: integer
        min_items:
          description: The minimum array length.
          format: int64
          type: integer
      required:
      - base_type
      title: schema-field-descriptor-array-type
      type: object
    schema-field-descriptor-array-type-base-type:
      enum:
      - bool
      - composite
      - double
      - enum
      - id
      - int
      - rich_text
      - text
      - timestamp
      - tokens
      type: string
    schema-field-descriptor-base:
      properties:
        description:
          description: Description of the field.
          type: string
        is_filterable:
          description: |
            Whether this field is filterable, groupable and sortable.
          type: boolean
        is_personally_identifiable_information:
          description: |
            Whether this field can hold Personally Identifiable Information
            (PII).
          type: boolean
        is_required:
          description: Whether this field is required or not.
          type: boolean
        is_system:
          description: Whether this field is a system field or not.
          type: boolean
        name:
          description: Name of the field.
          type: string
        origin:
          description: Type this field is from.
          type: string
        ui:
          $ref: '#/components/schemas/schema-field-ui-metadata'
      required:
      - name
      title: schema-field-descriptor-base
      type: object
    schema-field-descriptor-field-type:
      enum:
      - array
      - bool
      - composite
      - double
      - enum
      - id
      - int
      - rich_text
      - text
      - timestamp
      - tokens
      type: string
    schema-field-detail-view-ui-metadata:
      description: Detail view UI hint overrides.
      properties:
        is_hidden:
          description: Whether field is hidden in UI.
          type: boolean
      title: schema-field-detail-view-ui-metadata
      type: object
    schema-field-filter-view-ui-metadata:
      description: Filter view UI hint overrides.
      properties:
        is_hidden:
          description: Whether field is hidden in UI.
          type: boolean
      title: schema-field-filter-view-ui-metadata
      type: object
    schema-field-list-view-ui-metadata:
      description: List view UI hint overrides.
      properties:
        is_hidden:
          description: Whether field is hidden in UI.
          type: boolean
      title: schema-field-list-view-ui-metadata
      type: object
    schema-field-summary-view-ui-metadata:
      description: Summary view UI hint overrides.
      properties:
        is_hidden:
          description: Whether field is hidden in UI.
          type: boolean
      title: schema-field-summary-view-ui-metadata
      type: object
    schema-field-ui-metadata:
      description: The schema of ui specific fields.
      properties:
        allowed_values:
          description: Allowed values of the field.
          items:
            type: string
          type: array
        create_view:
          $ref: '#/components/schemas/schema-field-create-view-ui-metadata'
        dependent_fields:
          description: Fields on which this field depends on.
          items:
            type: string
          type: array
        detail_view:
          $ref: '#/components/schemas/schema-field-detail-view-ui-metadata'
        devrev_enum_groups:
          description: enum groups.
          items:
            $ref: '#/components/schemas/field-devrev-enum-group'
          type: array
        display_name:
          description: display name of the field.
          type: string
        filter_view:
          $ref: '#/components/schemas/schema-field-filter-view-ui-metadata'
        is_active_in_detail_view:
          description: Whether field is active in detail view.
          type: boolean
        is_base_field:
          description: Whether stock field is rendered at top.
          type: boolean
        is_bulk_action_enabled:
          description: Whether field supports bulk action.
          type: boolean
        is_currency_field:
          description: Indicates if the field holds a currency value in USD.
          type: boolean
        is_groupable:
          description: Whether field is groupable.
          type: boolean
        is_hidden:
          description: Whether field is hidden in UI.
          type: boolean
        is_hidden_during_create:
          description: Whether field is hidden in UI during creation.
          type: boolean
        is_read_only:
          description: Whether field is read-only in UI.
          type: boolean
        is_shown_in_summary:
          description: Whether field is shown in summary.
          type: boolean
        is_sortable:
          description: Whether field is sortable.
          type: boolean
        list_view:
          $ref: '#/components/schemas/schema-field-list-view-ui-metadata'
        order:
          description: Order in which field is shown.
          format: int32
          type: integer
        placeholder:
          description: Placeholder for the field.
          type: string
        summary_view:
          $ref: '#/components/schemas/schema-field-summary-view-ui-metadata'
        tooltip:
          description: Tooltip for field.
          type: string
        unit:
          description: Unit of measurment.
          type: string
      title: schema-field-ui-metadata
      type: object
    schema-id-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            type: string
          default_value_v1:
            description: Default value.
            type: string
          id_type:
            description: Object ID types. Required when field type is ID.
            items:
              type: string
            type: array
        type: object
      title: schema-id-field-descriptor
    schema-id-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            items:
              type: string
            type: array
          default_value_v1:
            description: Default value.
            type: string
          id_type:
            description: Object ID types. Required when field type is ID.
            items:
              type: string
            type: array
        type: object
      title: schema-id-list-field-descriptor
    schema-int-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            format: int64
            type: integer
          gt:
            description: The minimum value for the integer (exclusive).
            format: int64
            type: integer
          gte:
            description: The minimum value for the integer (inclusive).
            format: int64
            type: integer
          lt:
            description: The maximum value for the integer (exclusive).
            format: int64
            type: integer
          lte:
            description: The maximum value for the integer (inclusive).
            format: int64
            type: integer
        type: object
      title: schema-int-field-descriptor
    schema-int-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            items:
              format: int64
              type: integer
            type: array
          gt:
            description: The minimum value for the integer (exclusive).
            format: int64
            type: integer
          gte:
            description: The minimum value for the integer (inclusive).
            format: int64
            type: integer
          lt:
            description: The maximum value for the integer (exclusive).
            format: int64
            type: integer
          lte:
            description: The maximum value for the integer (inclusive).
            format: int64
            type: integer
        type: object
      title: schema-int-list-field-descriptor
    schema-rich-text-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          contains:
            description: The contained substring.
            type: string
          default_value:
            description: Default value.
            type: string
          eq_len:
            description: The exact string length.
            format: int64
            type: integer
          max_len:
            description: The maximum string length.
            format: int64
            type: integer
          min_len:
            description: The minimum string length.
            format: int64
            type: integer
          pattern:
            description: The string pattern (regular expression).
            type: string
          prefix:
            description: The string prefix.
            type: string
          suffix:
            description: The string suffix.
            type: string
        type: object
      title: schema-rich-text-field-descriptor
    schema-rich-text-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          contains:
            description: The contained substring.
            type: string
          default_value:
            description: Default value.
            items:
              type: string
            type: array
          eq_len:
            description: The exact string length.
            format: int64
            type: integer
          max_len:
            description: The maximum string length.
            format: int64
            type: integer
          min_len:
            description: The minimum string length.
            format: int64
            type: integer
          pattern:
            description: The string pattern (regular expression).
            type: string
          prefix:
            description: The string prefix.
            type: string
          suffix:
            description: The string suffix.
            type: string
        type: object
      title: schema-rich-text-list-field-descriptor
    schema-text-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          contains:
            description: The contained substring.
            type: string
          default_value:
            description: Default value.
            type: string
          eq_len:
            description: The exact string length.
            format: int64
            type: integer
          max_len:
            description: The maximum string length.
            format: int64
            type: integer
          min_len:
            description: The minimum string length.
            format: int64
            type: integer
          pattern:
            description: The string pattern (regular expression).
            type: string
          prefix:
            description: The string prefix.
            type: string
          suffix:
            description: The string suffix.
            type: string
        type: object
      title: schema-text-field-descriptor
    schema-text-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          contains:
            description: The contained substring.
            type: string
          default_value:
            description: Default value.
            items:
              type: string
            type: array
          eq_len:
            description: The exact string length.
            format: int64
            type: integer
          max_len:
            description: The maximum string length.
            format: int64
            type: integer
          min_len:
            description: The minimum string length.
            format: int64
            type: integer
          pattern:
            description: The string pattern (regular expression).
            type: string
          prefix:
            description: The string prefix.
            type: string
          suffix:
            description: The string suffix.
            type: string
        type: object
      title: schema-text-list-field-descriptor
    schema-timestamp-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            format: date-time
            type: string
        type: object
      title: schema-timestamp-field-descriptor
    schema-timestamp-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          default_value:
            description: Default value.
            items:
              format: date-time
              type: string
            type: array
        type: object
      title: schema-timestamp-list-field-descriptor
    schema-tokens-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          contains:
            description: The contained substring.
            type: string
          default_value:
            description: Default value.
            type: string
          eq_len:
            description: The exact string length.
            format: int64
            type: integer
          max_len:
            description: The maximum string length.
            format: int64
            type: integer
          min_len:
            description: The minimum string length.
            format: int64
            type: integer
          pattern:
            description: The string pattern (regular expression).
            type: string
          prefix:
            description: The string prefix.
            type: string
          suffix:
            description: The string suffix.
            type: string
        type: object
      title: schema-tokens-field-descriptor
    schema-tokens-list-field-descriptor:
      allOf:
      - $ref: '#/components/schemas/schema-field-descriptor-base'
      - properties:
          contains:
            description: The contained substring.
            type: string
          default_value:
            description: Default value.
            items:
              type: string
            type: array
          eq_len:
            description: The exact string length.
            format: int64
            type: integer
          max_len:
            description: The maximum string length.
            format: int64
            type: integer
          min_len:
            description: The minimum string length.
            format: int64
            type: integer
          pattern:
            description: The string pattern (regular expression).
            type: string
          prefix:
            description: The string prefix.
            type: string
          suffix:
            description: The string suffix.
            type: string
        type: object
      title: schema-tokens-list-field-descriptor
    search-articles-request:
      description: |
        Request for searches over articles and to get an answer to the query.
      properties:
        include_answer:
          description: |
            Whether to include an answer along with the search results.
          type: boolean
        limit:
          description: |
            The maximum number of search results to return. The default is '5'.
          format: int32
          type: integer
        query:
          description: The query string.
          type: string
      required:
      - query
      title: search-articles-request
      type: object
    search-articles-response:
      description: |
        Response articles along with an answer for the provided query.
      properties:
        answer:
          description: Answer to the given query if available.
          type: string
        results:
          description: The article search results.
          items:
            $ref: '#/components/schemas/article-search-summary'
          type: array
      required:
      - results
      title: search-articles-response
      type: object
      x-go-name: SearchArticlesResponseBody
    search-core-request:
      description: Search request.
      properties:
        cursor:
          description: |
            The cursor from where to begin iteration. Start from beginning if
            not provided.
          type: string
        limit:
          description: |
            The maximum number of items to return in a page. The default is
            '10'.
          format: int32
          type: integer
        namespaces:
          description: The namespaces to search in.
          items:
            type: string
          type: array
        query:
          description: The query string.
          type: string
        rev_orgs:
          description: |
            Filters for items that are associated with any of the provided Rev
            organizations.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sort_by:
          $ref: '#/components/schemas/search-sort-by-param'
        sort_order:
          $ref: '#/components/schemas/search-sort-order-param'
      required:
      - query
      title: search-core-request
      type: object
    search-core-response:
      description: Search response.
      properties:
        cursor:
          description: |
            The cursor from where to begin iteration. Start from beginning if
            not provided.
          type: string
        results:
          description: The search results.
          items:
            $ref: '#/components/schemas/search-result'
          type: array
      required:
      - results
      title: search-core-response
      type: object
      x-go-name: SearchCoreResponseBody
    search-namespace:
      description: The namespaces to search in.
      enum:
      - account
      - dev_user
      - issue
      - rev_org
      - rev_user
      - tag
      - ticket
      - unknown
      type: string
    search-result:
      discriminator:
        mapping:
          account: '#/components/schemas/account-search-summary'
          article: '#/components/schemas/article-search-summary'
          artifact: '#/components/schemas/artifact-search-summary'
          conversation: '#/components/schemas/conversation-search-summary'
          link: '#/components/schemas/link-search-summary'
          org: '#/components/schemas/org-search-summary'
          part: '#/components/schemas/part-search-summary'
          tag: '#/components/schemas/tag-search-summary'
          user: '#/components/schemas/user-search-summary'
          work: '#/components/schemas/work-search-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/account-search-summary'
      - $ref: '#/components/schemas/article-search-summary'
      - $ref: '#/components/schemas/artifact-search-summary'
      - $ref: '#/components/schemas/conversation-search-summary'
      - $ref: '#/components/schemas/link-search-summary'
      - $ref: '#/components/schemas/org-search-summary'
      - $ref: '#/components/schemas/part-search-summary'
      - $ref: '#/components/schemas/tag-search-summary'
      - $ref: '#/components/schemas/user-search-summary'
      - $ref: '#/components/schemas/work-search-summary'
      properties:
        type:
          $ref: '#/components/schemas/search-result-type'
      required:
      - type
      title: search-result
      type: object
    search-result-type:
      enum:
      - account
      - article
      - artifact
      - conversation
      - link
      - org
      - part
      - tag
      - user
      - work
      type: string
    search-sort-by-param:
      description: Search sort by parameters.
      enum:
      - created_date
      - modified_date
      - relevance
      type: string
    search-sort-order-param:
      description: Search sort order parameters.
      enum:
      - asc
      - desc
      type: string
    search-summary-base:
      properties:
        final_score:
          description: Final search score for the object.
          format: float
          type: number
        modified_date:
          description: Timestamp when the object was last modified.
          format: date-time
          type: string
        semantic_score:
          description: Semantic search score for the object.
          format: float
          type: number
        syntactic_score:
          description: Syntactic search score for the object.
          format: float
          type: number
      required:
      - final_score
      - modified_date
      - semantic_score
      - syntactic_score
      title: search-summary-base
      type: object
    search-typeahead-request:
      description: Typeahead search request.
      properties:
        cursor:
          description: |
            The cursor from where to begin iteration. Start from beginning if
            not provided.
          type: string
        fields:
          description: The fields to search on.
          items:
            type: string
          type: array
        limit:
          description: |
            The maximum number of items to return in a page. The default is
            '10'.
          format: int32
          type: integer
        namespaces:
          description: The namespaces to search in.
          items:
            $ref: '#/components/schemas/search-namespace'
          type: array
        query:
          description: The query string.
          type: string
        rev_orgs:
          description: |
            Filters for items that are associated with any of the provided Rev
            organizations.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sort_by:
          $ref: '#/components/schemas/search-sort-by-param'
        sort_order:
          $ref: '#/components/schemas/search-sort-order-param'
      required:
      - fields
      - namespaces
      - query
      title: search-typeahead-request
      type: object
    search-typeahead-response:
      description: Typeahead search response.
      properties:
        cursor:
          description: |
            The cursor from where to begin iteration. Start from beginning if
            not provided.
          type: string
        results:
          description: The search results.
          items:
            $ref: '#/components/schemas/search-result'
          type: array
      required:
      - results
      title: search-typeahead-response
      type: object
      x-go-name: SearchTypeaheadResponseBody
    semantic-version:
      description: Semversion of the package.
      properties:
        major:
          description: Major version.
          format: int32
          type: integer
        minor:
          description: Minor version.
          format: int32
          type: integer
        patch:
          description: Patch version.
          format: int32
          type: integer
        pre_release:
          description: Pre-release version.
          type: string
      title: semantic-version
      type: object
    send-notification:
      discriminator:
        mapping:
          devrev_reminder: '#/components/schemas/send-notification-dev-rev-reminder'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/send-notification-dev-rev-reminder'
      properties:
        origin:
          description: Origin of the notification.
          type: string
        parent:
          description: |
            The ID of the parent object associated with the notification.
          type: string
        priority:
          $ref: '#/components/schemas/notification-priority'
        receiver:
          description: |
            The ID of the user for whom the notification was generated.
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
        sender:
          description: The ID of the user who generated the notification.
          type: string
        timestamp:
          description: Timestamp of the event that triggered the notification.
          format: date-time
          type: string
        type:
          $ref: '#/components/schemas/send-notification-type'
      required:
      - parent
      - receiver
      - sender
      - type
      title: send-notification
      type: object
    send-notification-dev-rev-reminder:
      properties:
        created_at:
          description: Timestamp at which the reminder was created.
          format: date-time
          type: string
        message:
          description: The message included with the reminder.
          type: string
      title: send-notification-dev-rev-reminder
      type: object
    send-notification-type:
      enum:
      - devrev_reminder
      type: string
    service-account:
      allOf:
      - $ref: '#/components/schemas/user-base'
      - properties:
          description:
            description: |
              Information regarding why this service account was created.
            type: string
          keyrings:
            description: |
              A reference to the keyrings associated with a service account.
            items:
              $ref: '#/components/schemas/service-account-keyring'
            type: array
        type: object
      title: service-account
    service-account-keyring:
      description: A reference to a keyring under a service account.
      properties:
        display_name:
          description: The display name of the keyring.
          type: string
        key:
          description: |
            A reference to a shared secret associated with a service account.
          type: string
        key_id:
          description: |
            A generated unique identifier under a given service account.
          type: string
      title: service-account-keyring
      type: object
    service-account-summary:
      allOf:
      - $ref: '#/components/schemas/user-base-summary'
      title: service-account-summary
    service-accounts-create-request:
      description: The request object to create a new service account.
      properties:
        display_name:
          description: |
            The service account's display name. A unique, human readable name
            to identify a service account.
          type: string
        gen_keyring:
          description: |
            Indicates whether to generate a keyring along with the new service
            account. The default is false.
          type: boolean
      required:
      - display_name
      title: service-accounts-create-request
      type: object
    service-accounts-create-response:
      description: The response object to create a new service account.
      properties:
        service_account:
          $ref: '#/components/schemas/service-account'
      required:
      - service_account
      title: service-accounts-create-response
      type: object
      x-go-name: ServiceAccountsCreateResponseBody
    service-accounts-delete-request:
      description: A request object to delete a service account.
      properties:
        id:
          description: The ID of the service account to be deleted.
          type: string
      required:
      - id
      title: service-accounts-delete-request
      type: object
    service-accounts-delete-response:
      description: The response object to delete a service account.
      title: service-accounts-delete-response
      type: object
      x-go-name: ServiceAccountsDeleteResponseBody
    service-accounts-get-request:
      description: The request object to get a service account's information.
      properties:
        id:
          description: The ID of the requested service account.
          type: string
      required:
      - id
      title: service-accounts-get-request
      type: object
    service-accounts-get-response:
      description: |
        The response object that carries the service account's information
        corresponding to the request.
      properties:
        service_account:
          $ref: '#/components/schemas/service-account'
      required:
      - service_account
      title: service-accounts-get-response
      type: object
      x-go-name: ServiceAccountsGetResponseBody
    service-accounts-keyrings-create-request:
      description: |
        A request object to create a new keyring under a service account.
      properties:
        display_name:
          description: |
            The keyrings's display name. A human readable name to identify a
            keyring.
          type: string
        service_account_id:
          description: |
            The service account ID under which the new keyring to be created.
          type: string
      required:
      - display_name
      - service_account_id
      title: service-accounts-keyrings-create-request
      type: object
    service-accounts-keyrings-create-response:
      description: |
        The response object to get a keyring under a service account.
      properties:
        keyring:
          $ref: '#/components/schemas/service-account-keyring'
        service_account_id:
          description: The ID of the requested service account.
          type: string
        service_account_id_v1:
          description: The ID of the requested service account.
          type: string
      required:
      - keyring
      - service_account_id
      title: service-accounts-keyrings-create-response
      type: object
      x-go-name: ServiceAccountsKeyringsCreateResponseBody
    service-accounts-keyrings-delete-request:
      description: |
        A request object to delete a keyring under a service account.
      properties:
        key_id:
          description: The ID of the keyring.
          type: string
        service_account_id:
          description: The ID of the requested service account.
          type: string
      required:
      - key_id
      - service_account_id
      title: service-accounts-keyrings-delete-request
      type: object
    service-accounts-keyrings-delete-response:
      description: The response to delete a keyring under a service account.
      title: service-accounts-keyrings-delete-response
      type: object
      x-go-name: ServiceAccountsKeyringsDeleteResponseBody
    service-accounts-keyrings-get-request:
      description: |
        A request object to get a keyring corresponding to a service account.
      properties:
        key_id:
          description: The ID of the keyring.
          type: string
        service_account_id:
          description: The ID corresponding to the requested keyring.
          type: string
      required:
      - key_id
      - service_account_id
      title: service-accounts-keyrings-get-request
      type: object
    service-accounts-keyrings-get-response:
      description: |
        The response object to get the keyring associated with a service
        account.
      properties:
        keyring:
          $ref: '#/components/schemas/service-account-keyring'
        service_account_id:
          description: The ID of the requested service account.
          type: string
        service_account_id_v1:
          description: The ID of the requested service account.
          type: string
      required:
      - keyring
      - service_account_id
      title: service-accounts-keyrings-get-response
      type: object
      x-go-name: ServiceAccountsKeyringsGetResponseBody
    service-accounts-keyrings-update-request:
      description: |
        A request object to update a new keyring under a service account.
      properties:
        display_name:
          description: |
            The keyrings's display name to be updated. A human readable name to
            identify a keyring.
          type: string
        key_id:
          description: The ID of the keyring.
          type: string
        service_account_id:
          description: The ID of the requested service account.
          type: string
      required:
      - key_id
      - service_account_id
      title: service-accounts-keyrings-update-request
      type: object
    service-accounts-keyrings-update-response:
      description: |
        The response object to get the keyring under a service account.
      properties:
        keyring:
          $ref: '#/components/schemas/service-account-keyring'
        service_account_id:
          description: The ID corresponding to the keyring.
          type: string
        service_account_id_v1:
          description: The ID corresponding to the keyring.
          type: string
      required:
      - keyring
      - service_account_id
      title: service-accounts-keyrings-update-response
      type: object
      x-go-name: ServiceAccountsKeyringsUpdateResponseBody
    service-accounts-list-request:
      description: A request object to get the list of service accounts.
      title: service-accounts-list-request
      type: object
    service-accounts-list-response:
      description: The response object to list the service accounts.
      properties:
        service_accounts:
          description: The list of service accounts.
          items:
            $ref: '#/components/schemas/service-account'
          type: array
      required:
      - service_accounts
      title: service-accounts-list-response
      type: object
      x-go-name: ServiceAccountsListResponseBody
    service-accounts-update-request:
      description: The request object to update a service account.
      properties:
        display_name:
          description: |
            The service account's display name to be updated. A unique, human
            readable name to identify a service account.
          type: string
        id:
          description: The ID of the requested service account.
          type: string
      required:
      - id
      title: service-accounts-update-request
      type: object
    service-accounts-update-response:
      description: |
        The response object that carries the updated service account's
        information.
      properties:
        service_account:
          $ref: '#/components/schemas/service-account'
      required:
      - service_account
      title: service-accounts-update-response
      type: object
      x-go-name: ServiceAccountsUpdateResponseBody
    service-plan:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          billing_cycle:
            $ref: '#/components/schemas/service-plan-billing-cycle'
          billing_date:
            description: The billing date set for the service plan.
            format: date-time
            type: string
          configurations:
            $ref: '#/components/schemas/configuration'
          currency:
            description: The currency on which the service plan is created.
            type: string
          description:
            description: Description for the Service Plan.
            type: string
          latest_invoice:
            description: The latest invoice generated for this service plan.
            type: string
          name:
            description: Human readable name for the service plan.
            type: string
          one_time_line_items:
            description: The one time invoice items attached to the service plan.
            items:
              $ref: '#/components/schemas/one-time-line-item-summary'
            type: array
          recurring_line_items:
            description: The recurring items inside the service plan.
            items:
              $ref: '#/components/schemas/recurring-line-item-summary'
            type: array
          rev:
            $ref: '#/components/schemas/org-summary'
          state:
            description: The service plan state. ex. active, due etc.
            type: string
          status:
            description: The status of the service plan.
            type: string
          update_intent:
            $ref: '#/components/schemas/service-plan-update-intent'
        required:
        - billing_cycle
        - currency
        - name
        - rev
        type: object
      title: service-plan
    service-plan-billing-cycle:
      description: The billing frequency of the service plan.
      enum:
      - monthly
      - one_time
      - yearly
      type: string
    service-plan-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: service-plan-summary
    service-plan-update-intent:
      description: |
        This stores the intent in case of update request doesn't goes through
        completely. For example, if a update request is made when
        payment_behavior is  'pending_update' (this means only apply updates
        when payment is successful), so till the payment is done and succeeded,
        locally the service plan's update request's patch related to items is
        stored in this field.
      properties:
        trial_end_now:
          description: Flag which decides if trial ends immediately.
          type: boolean
        trial_period_end_time:
          description: The trial period end time.
          format: date-time
          type: string
      title: service-plan-update-intent
      type: object
    service-plans-cancel-request:
      properties:
        id:
          description: The service plan's DON.
          type: string
      required:
      - id
      title: service-plans-cancel-request
      type: object
    service-plans-create-request:
      properties:
        billing_cycle:
          $ref: '#/components/schemas/service-plan-billing-cycle'
        billing_date:
          description: The billing date set for the service plan.
          format: date-time
          type: string
        configurations:
          $ref: '#/components/schemas/configuration'
        currency:
          description: The currency on which the service plan is created.
          type: string
        description:
          description: Description of the service plan.
          type: string
        name:
          description: Human readable name of the service plan.
          type: string
        one_time_line_items:
          description: The one time line items to be added in the service plan.
          items:
            $ref: '#/components/schemas/create-one-time-line-items'
          type: array
        recurring_line_items:
          description: |
            The recurring line items to be added in the service plan.
          items:
            $ref: '#/components/schemas/create-recurring-line-items'
          type: array
        rev_org_id:
          description: |
            The rev org for which the current service plan is created for. Rev
            Org is needed when service plan is being created by dev for a
            specific rev.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
      required:
      - billing_cycle
      - currency
      - name
      - recurring_line_items
      title: service-plans-create-request
      type: object
    service-plans-create-response:
      properties:
        service_plan:
          $ref: '#/components/schemas/service-plan'
      required:
      - service_plan
      title: service-plans-create-response
      type: object
      x-go-name: ServicePlansCreateResponseBody
    service-plans-get-compatible-skus-request:
      properties:
        id:
          description: The service plan's DON.
          type: string
        product_id:
          description: The product ID for which to get the compatible SKUs.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      title: service-plans-get-compatible-skus-request
      type: object
    service-plans-get-compatible-skus-response:
      properties:
        product_sku_mapping:
          description: Product to compatible SKU mapping.
          items:
            $ref: '#/components/schemas/service-plans-get-compatible-skus-response-product-sku-mapping'
          type: array
      title: service-plans-get-compatible-skus-response
      type: object
      x-go-name: ServicePlansGetCompatibleSkusResponseBody
    service-plans-get-compatible-skus-response-product-sku-mapping:
      properties:
        product_id:
          description: The product ID for the compatible skus.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        product_id_v1:
          description: The product ID for the compatible skus.
          type: string
        sku_details:
          description: The SKU and Pricing details.
          items:
            $ref: '#/components/schemas/service-plans-get-compatible-skus-response-product-sku-mapping-sku-details'
          type: array
      required:
      - product_id
      - sku_details
      title: service-plans-get-compatible-skus-response-product-sku-mapping
      type: object
    service-plans-get-compatible-skus-response-product-sku-mapping-sku-details:
      properties:
        pricing:
          $ref: '#/components/schemas/pricing'
        quantity:
          description: |
            Maximum quantity that can be purchased in case of a subscription
            SKU.
          format: int64
          type: integer
        sku:
          $ref: '#/components/schemas/sku'
      required:
      - pricing
      - sku
      title: service-plans-get-compatible-skus-response-product-sku-mapping-sku-details
      type: object
    service-plans-get-request:
      properties:
        id:
          description: The service plan's DON.
          type: string
      required:
      - id
      title: service-plans-get-request
      type: object
    service-plans-get-response:
      properties:
        service_plan:
          $ref: '#/components/schemas/service-plan'
      required:
      - service_plan
      title: service-plans-get-response
      type: object
      x-go-name: ServicePlansGetResponseBody
    service-plans-list-request:
      properties:
        ids:
          description: |
            The list of service plan DONs which are to be aggregated.
          items:
            type: string
          type: array
        rev_org_ids:
          description: The list of rev org DONs which are to be aggregated.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sort_by:
          description: |
            List of fields to sort the service plan object, by and how to sort
            them. Default is to sort by created_date in descending order.
          items:
            type: string
          type: array
        states:
          description: The list of states which are to be aggregated.
          items:
            type: string
          type: array
      title: service-plans-list-request
      type: object
    service-plans-list-response:
      properties:
        service_plans:
          description: The list of service plan objects.
          items:
            $ref: '#/components/schemas/service-plan'
          type: array
      required:
      - service_plans
      title: service-plans-list-response
      type: object
      x-go-name: ServicePlansListResponseBody
    service-plans-pending-update-cancel-request:
      properties:
        id:
          description: The service plan's DON.
          type: string
      required:
      - id
      title: service-plans-pending-update-cancel-request
      type: object
    service-plans-pending-update-cancel-response:
      properties:
        service_plan:
          $ref: '#/components/schemas/service-plan'
      required:
      - service_plan
      title: service-plans-pending-update-cancel-response
      type: object
      x-go-name: ServicePlansPendingUpdateCancelResponseBody
    service-plans-update-request:
      properties:
        id:
          description: The service plan's DON.
          type: string
        one_time_line_items:
          $ref: '#/components/schemas/service-plans-update-request-one-time-line-items'
        recurring_line_items:
          $ref: '#/components/schemas/service-plans-update-request-recurring-line-items'
      required:
      - id
      title: service-plans-update-request
      type: object
    service-plans-update-request-one-time-line-items:
      properties:
        add:
          description: The one time line items to be added in the service plan.
          items:
            $ref: '#/components/schemas/create-one-time-line-items'
          type: array
      title: service-plans-update-request-one-time-line-items
      type: object
    service-plans-update-request-recurring-line-items:
      properties:
        add:
          description: |
            The recurring line items to be added in the service plan.
          items:
            $ref: '#/components/schemas/create-recurring-line-items'
          type: array
        remove:
          description: |
            The recurring line items to be deleted from the service plan.
          items:
            $ref: '#/components/schemas/delete-recurring-line-items'
          type: array
        set:
          description: |
            The recurring line items to be updated in the service plan.
          items:
            $ref: '#/components/schemas/update-recurring-line-items'
          type: array
      title: service-plans-update-request-recurring-line-items
      type: object
    service-plans-update-response:
      properties:
        service_plan:
          $ref: '#/components/schemas/service-plan'
      required:
      - service_plan
      title: service-plans-update-response
      type: object
      x-go-name: ServicePlansUpdateResponseBody
    set-sla-policy:
      properties:
        metrics:
          description: Metrics to apply to the selected items.
          items:
            $ref: '#/components/schemas/set-support-metric-target'
          type: array
        name:
          description: Human-readable name.
          type: string
        selector:
          $ref: '#/components/schemas/set-sla-selector'
      required:
      - name
      - selector
      title: set-sla-policy
      type: object
    set-sla-selector:
      properties:
        applies_to:
          $ref: '#/components/schemas/sla-selector-applies-to'
        parts:
          description: The SLA policy applies to the tickets of these parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        priority:
          description: |
            The SLA policy applies to conversations with these priorities.
          items:
            $ref: '#/components/schemas/sla-selector-priority'
          type: array
        severity:
          description: The SLA policy applies to tickets with these severities.
          items:
            $ref: '#/components/schemas/sla-selector-severity'
          type: array
        source_channel:
          description: |
            The SLA policy applies to conversations with these sources.
          items:
            type: string
          type: array
        tag_operation:
          $ref: '#/components/schemas/sla-selector-tag-operation'
        tags:
          description: The SLA policy applies to items with these tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      required:
      - applies_to
      title: set-sla-selector
      type: object
    set-support-metric-target:
      properties:
        metric:
          description: The metric to apply.
          type: string
        org_schedule_id:
          description: |
            The organization schedule controlling this metrics calculation.
            Time based metrics don't consume time while their schedule is off.
          type: string
        performance:
          description: |
            The percentage of instances for which this metric's target must not
            be breached, in order to avoid breaching the overall SLA policy.
          format: double
          type: number
        target:
          description: |
            The target value to be achieved, for example the time in which to
            do something, or the maximum allowed number of message pairs. The
            units and interpretation of the value is controlled by the
            properties of the referenced metric.
          format: int32
          type: integer
        warning_target:
          description: |
            The threshold in the same units as target where the metric is
            considered to be 'at risk'.
          format: int32
          type: integer
      required:
      - metric
      - performance
      - target
      title: set-support-metric-target
      type: object
    set-tag-with-value:
      properties:
        id:
          description: The ID of the tag.
          example: don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          type: string
        value:
          description: |
            The value for the object's association with the tag. If specified,
            the value must be one that's specified in the tag's allowed values.
          type: string
      required:
      - id
      title: set-tag-with-value
      type: object
    settings-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: settings-summary
    setup-resource-resource-type:
      description: Type of the created resource.
      enum:
      - tag
      - user
      type: string
    sku:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          description:
            description: Description of the SKU.
            type: string
          entitlements:
            description: This contains the list of entitlements for the SKU.
            items:
              $ref: '#/components/schemas/entitlement'
            type: array
          family_name:
            description: |
              Human readable name of the SKU. For example; Basic, Premium, etc.
            type: string
          invoice_description:
            description: |
              Invoice Description is meant to be displayable on the invoice
              against the usage for the SKU.
            type: string
          is_duration_based_proration_enabled:
            description: |
              If flag is enabled then the usage will be prorated for the time the
              SKU is active.
            type: boolean
          maximum_quantity:
            description: |
              maximum quantity a rev can subscribe to when subscribing to this
              SKU.
            format: int32
            type: integer
          minimum_duration_to_charge:
            description: |
              Minimum duration in minutes for the SKU usage after which the SKU
              would be charged.
            format: int32
            type: integer
          minimum_quantity:
            description: |
              minimum quantity a rev need to subscribe when subscribing to this
              SKU.
            format: int32
            type: integer
          pricing:
            description: Pricing details of the SKU.
            items:
              $ref: '#/components/schemas/pricing-summary'
            type: array
          product:
            $ref: '#/components/schemas/part-summary'
          rev:
            $ref: '#/components/schemas/org-summary'
          sku_type:
            $ref: '#/components/schemas/sku-type'
          sku_version:
            description: |
              Every SKU for a given family name can have multiple SKU versions.
              For example; when a new SKU named 'Basic' is created and publish it
              to production, it starts with version 0. Once the SKU goes to
              production, one can decide to do some major updates like update
              entitlements or change the price, in that case the version 0 SKU
              will be moved to 'end of sale' and a new 'Basic' SKU with the same
              family name is created with version 1. Once any SKU is in 'end of
              sale', it is not available for new sale. Customers who wants to buy
              this SKU will always get latest version of that family name. For a
              given family name there can be only one SKU which is in production.
            format: int32
            type: integer
          state:
            $ref: '#/components/schemas/sku-state'
          status:
            $ref: '#/components/schemas/sku-status'
          versioned_from_sku:
            $ref: '#/components/schemas/sku-summary'
        required:
        - entitlements
        - family_name
        - pricing
        - product
        - sku_type
        - sku_version
        - state
        - status
        type: object
      title: sku
    sku-rule:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          allowed_sku_names:
            description: |
              The list of allowed SKU family names which can be bought together
              by a RevO.
            items:
              type: string
            type: array
          description:
            description: Description of the SKU rules.
            type: string
          product:
            $ref: '#/components/schemas/part-summary'
        required:
        - allowed_sku_names
        - product
        type: object
      title: sku-rule
    sku-rule-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: sku-rule-summary
    sku-rules-create-request:
      properties:
        allowed_sku_names:
          description: |
            The list of allowed sku names which can be bought together by a rev
            org.
          items:
            type: string
          type: array
        description:
          description: Description of the sku rule.
          type: string
        name:
          description: Human readable name of the sku rule.
          type: string
        product_id:
          description: The product DON for which the sku rule is defined.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      required:
      - allowed_sku_names
      - name
      - product_id
      title: sku-rules-create-request
      type: object
    sku-rules-create-response:
      properties:
        sku_rule:
          $ref: '#/components/schemas/sku-rule'
      required:
      - sku_rule
      title: sku-rules-create-response
      type: object
      x-go-name: SkuRulesCreateResponseBody
    sku-rules-delete-request:
      properties:
        id:
          description: The sku rule's DON.
          type: string
      required:
      - id
      title: sku-rules-delete-request
      type: object
    sku-rules-get-request:
      properties:
        id:
          description: The sku rule's DON
          type: string
      required:
      - id
      title: sku-rules-get-request
      type: object
    sku-rules-get-response:
      properties:
        sku_rule:
          $ref: '#/components/schemas/sku-rule'
      required:
      - sku_rule
      title: sku-rules-get-response
      type: object
      x-go-name: SkuRulesGetResponseBody
    sku-rules-list-request:
      properties:
        allowed_sku_names:
          description: |
            The list of allowed sku names which are to be aggregated.
          items:
            type: string
          type: array
        ids:
          description: The list of sku rule DONs which are to be aggregated.
          items:
            type: string
          type: array
        product_ids:
          description: The list of product DONs which are to be aggregated.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        sort_by:
          description: |
            List of fields to sort the sku rules, by and how to sort them.
            Default is to sort by created_date in descending order.
          items:
            type: string
          type: array
      title: sku-rules-list-request
      type: object
    sku-rules-list-response:
      properties:
        sku_rules:
          description: The list of sku rules.
          items:
            $ref: '#/components/schemas/sku-rule'
          type: array
      required:
      - sku_rules
      title: sku-rules-list-response
      type: object
      x-go-name: SkuRulesListResponseBody
    sku-rules-update-request:
      properties:
        add_allowed_sku_names:
          description: |
            The sku names which are to be added to this subscription rule
            configuration.
          items:
            type: string
          type: array
        description:
          description: Description of the sku rule.
          type: string
        id:
          description: The sku rule's DON.
          type: string
        remove_allowed_sku_names:
          description: |
            The sku names which are to be removed from this subscription rule
            configuration.
          items:
            type: string
          type: array
      required:
      - id
      title: sku-rules-update-request
      type: object
    sku-rules-update-response:
      properties:
        sku_rule:
          $ref: '#/components/schemas/sku-rule'
      required:
      - sku_rule
      title: sku-rules-update-response
      type: object
      x-go-name: SkuRulesUpdateResponseBody
    sku-state:
      description: |
        Current state of the SKU. A SKU is visible to RevOs only when it is
        released.
      enum:
      - approved
      - draft
      - end_of_life
      - end_of_sale
      - released
      type: string
    sku-status:
      description: The update status of the SKU.
      enum:
      - create_in_progress
      - delete_in_progress
      - normal
      - update_in_progress
      type: string
    sku-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          family_name:
            description: |
              Human readable name of the SKU. For example; Basic, Premium, etc.
            type: string
          invoice_description:
            description: |
              Invoice Description is meant to be displayable on the invoice
              against the usage for the SKU.
            type: string
          is_duration_based_proration_enabled:
            description: |
              If flag is enabled then the usage will be prorated for the time the
              SKU is active.
            type: boolean
          minimum_duration_to_charge:
            description: |
              Minimum duration in minutes for the SKU usage after which the SKU
              would be charged.
            format: int32
            type: integer
          sku_type:
            $ref: '#/components/schemas/sku-type'
          state:
            $ref: '#/components/schemas/sku-state'
        required:
        - family_name
        - sku_type
        - state
        type: object
      title: sku-summary
    sku-type:
      description: It defines the type of SKU.
      enum:
      - consumption
      - consumption_addon
      - one_off_addon
      - one_off_charge
      - subscription
      - subscription_addon
      type: string
    skus-create-request:
      properties:
        description:
          description: Description of the SKU.
          type: string
        entitlements:
          description: Entitlements to be added under the SKU.
          items:
            $ref: '#/components/schemas/update-entitlements-add-update-entitlement'
          type: array
        invoice_description:
          description: |
            If specified, it is meant to be displayable on the invoice against
            the usage for the SKU.
          type: string
        is_custom:
          description: |
            Enabling this flag creates custom SKU specifically for a RevOrg.
            The custom SKU is only visible to Rev Org for whom it is created.
            Rev Org ID is needed while creating a custom SKU.
          type: boolean
        is_duration_based_proration_enabled:
          description: |
            If flag is enabled then the usage will be prorated for the time the
            SKU is active.
          type: boolean
        maximum_quantity:
          description: |
            Maximum quantity a rev can subscribe to when subscribing to this
            SKU.
          format: int32
          type: integer
        minimum_duration_to_charge:
          description: |
            Minimum duration in minutes for the SKU usage after which the SKU
            would be charged.
          format: int64
          type: integer
        minimum_quantity:
          description: |
            Minimum quantity a rev needs to subscribe when subscribing to this
            SKU.
          format: int32
          type: integer
        name:
          description: |
            Human readable name of the SKU. For example; Basic, Premium, etc.
          type: string
        pricing:
          description: Pricing details of the SKU.
          items:
            $ref: '#/components/schemas/update-pricing-add-price-info'
          type: array
        product_id:
          description: |
            The product for which the SKU is being created for. One product can
            have multiple SKUs and multiple type of SKUs.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        rev_org_id:
          description: |
            The rev org for which the current SKU is created for. Revs would be
            able to see the default SKUs and the SKUs created exclusively for
            them.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        sku_type:
          $ref: '#/components/schemas/sku-type'
        state:
          $ref: '#/components/schemas/sku-state'
      required:
      - name
      - product_id
      - sku_type
      title: skus-create-request
      type: object
    skus-create-response:
      properties:
        sku:
          $ref: '#/components/schemas/sku'
      required:
      - sku
      title: skus-create-response
      type: object
      x-go-name: SkusCreateResponseBody
    skus-delete-request:
      properties:
        id:
          description: The SKU object's DON.
          type: string
      required:
      - id
      title: skus-delete-request
      type: object
    skus-get-request:
      properties:
        id:
          description: The SKU object's DON.
          type: string
      required:
      - id
      title: skus-get-request
      type: object
    skus-get-response:
      properties:
        sku:
          $ref: '#/components/schemas/sku'
      required:
      - sku
      title: skus-get-response
      type: object
      x-go-name: SkusGetResponseBody
    skus-list-request:
      properties:
        ids:
          description: The list of SKU DONs which are to be aggregated.
          items:
            type: string
          type: array
        names:
          description: The list of SKU names which are to be aggregated.
          items:
            type: string
          type: array
        product_ids:
          description: The list of product DONs which are to be aggregated.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        rev_org_ids:
          description: The list of rev org DONs which are to be aggregated.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sku_types:
          description: The list of SKU types which are to be aggregated.
          items:
            $ref: '#/components/schemas/sku-type'
          type: array
        sku_versions:
          description: The list of SKU versions which are to be aggregated.
          items:
            format: int32
            type: integer
          type: array
        sort_by:
          description: |
            List of fields to sort the SKU object, by and how to sort them.
            Default is to sort by created_date in descending order.
          items:
            type: string
          type: array
        states:
          description: The list of SKU states which are to be aggregated.
          items:
            $ref: '#/components/schemas/sku-state'
          type: array
      title: skus-list-request
      type: object
    skus-list-response:
      properties:
        skus:
          description: The list of SKU objects.
          items:
            $ref: '#/components/schemas/sku'
          type: array
      required:
      - skus
      title: skus-list-response
      type: object
      x-go-name: SkusListResponseBody
    skus-update-request:
      properties:
        description:
          description: Description of the SKU.
          type: string
        entitlements:
          $ref: '#/components/schemas/update-entitlements'
        id:
          description: The SKU object's DON.
          type: string
        invoice_description:
          description: |
            If specified, it is meant to be displayable on the invoice against
            the usage for the SKU.
          type: string
        is_custom:
          description: |
            Enabling this flag updates a SKU to be custom (specifically for a
            RevOrg).The custom SKU is only visible to Rev Org for whom it is
            created. Rev Org ID is needed while making a SKU custom.
          type: boolean
        maximum_quantity:
          description: |
            Maximum quantity a rev can subscribe to when subscribing to this
            SKU.
          format: int32
          type: integer
        minimum_quantity:
          description: |
            Minimum quantity a rev needs to subscribe when subscribing to this
            SKU.
          format: int32
          type: integer
        name:
          description: |
            Human readable name of the SKU. For example; Basic, Premium, etc.
          type: string
        pricing:
          $ref: '#/components/schemas/update-pricing'
        rev_org_id:
          description: |
            The rev for which the current SKU is created for. Rev would be able
            to see the default SKUs and the SKUs created exclusively for them.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        state:
          $ref: '#/components/schemas/sku-state'
      required:
      - id
      title: skus-update-request
      type: object
    skus-update-response:
      properties:
        sku:
          $ref: '#/components/schemas/sku'
      required:
      - sku
      title: skus-update-response
      type: object
      x-go-name: SkusUpdateResponseBody
    skus-version-request:
      properties:
        description:
          description: Description of the SKU.
          type: string
        entitlements:
          $ref: '#/components/schemas/update-entitlements'
        id:
          description: |
            The SKU ID from which the current SKU would be versioned from. In
            case of some major updates are needed like price change or
            remove/update entitlements of the current SKU, one can do end of
            sale of the current version of SKU and create a newer version.
          type: string
        pricing:
          $ref: '#/components/schemas/update-pricing'
        state:
          $ref: '#/components/schemas/sku-state'
      required:
      - id
      title: skus-version-request
      type: object
    skus-version-response:
      properties:
        sku:
          $ref: '#/components/schemas/sku'
      required:
      - sku
      title: skus-version-response
      type: object
      x-go-name: SkusVersionResponseBody
    sla:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          compensation:
            $ref: '#/components/schemas/compensation'
          description:
            description: Description of the purpose and capabilities of the SLA.
            type: string
          evaluation_period:
            $ref: '#/components/schemas/sla-evaluation-period'
          name:
            description: Human-readable name.
            type: string
          policies:
            description: |
              The policies encompassed by this SLA, ordered in decreasing
              priority.
            items:
              $ref: '#/components/schemas/sla-policy'
            type: array
          status:
            $ref: '#/components/schemas/sla-status'
        required:
        - name
        - status
        type: object
      title: sla
    sla-evaluation-period:
      description: |
        Specifies the frequency of when the contractually-meaningful evaluation
        of the SLA happens. The dev_org for their own information might
        evaluate the various metrics contained in the policy as often as we can
        make it feasible for them, but only the evaluation at the end of the
        evaluation period triggers a compensation and needs to be shared with
        the rev.
      enum:
      - monthly
      - quarterly
      - weekly
      - yearly
      type: string
    sla-policy:
      description: A policy that represents a promise to your revs.
      properties:
        metrics:
          description: Metrics to apply to the selected items.
          items:
            $ref: '#/components/schemas/support-metric-target'
          type: array
        name:
          description: Human-readable name.
          type: string
        selector:
          $ref: '#/components/schemas/sla-selector'
      required:
      - metrics
      title: sla-policy
      type: object
    sla-selector:
      description: |
        The conditions by which a ticket or conversation is selected to be
        under the SLA policy. AND is taken between the filters on each field.
      properties:
        applies_to:
          $ref: '#/components/schemas/sla-selector-applies-to'
        parts:
          description: The SLA policy applies to the tickets of these parts.
          items:
            $ref: '#/components/schemas/part-summary'
          type: array
        priority:
          description: |
            Th SLA policy applies to conversations with these priorities.
          items:
            $ref: '#/components/schemas/sla-selector-priority'
          type: array
        rev_user_group:
          description: |
            The SLA policy applies to tickets created and conversations started
            by rev-users of this group.
          items:
            type: string
          type: array
        severity:
          description: The SLA policy applies to tickets with these severities.
          items:
            $ref: '#/components/schemas/sla-selector-severity'
          type: array
        source_channel:
          description: |
            Th SLA policy applies to conversations with these sources.
          items:
            type: string
          type: array
        tag_operation:
          $ref: '#/components/schemas/sla-selector-tag-operation'
        tags:
          description: |
            The SLA policy applies to tickets and conversations with these
            tags. If empty, the tag filter isn't applied.
          items:
            $ref: '#/components/schemas/tag-summary'
          type: array
      required:
      - applies_to
      title: sla-selector
      type: object
    sla-selector-applies-to:
      description: The item type for which the SLA policy applies.
      enum:
      - conversation
      - ticket
      type: string
    sla-selector-priority:
      description: |
        Th SLA policy applies to conversations with these priorities.
      enum:
      - p0
      - p1
      - p2
      type: string
    sla-selector-severity:
      description: The SLA policy applies to tickets with these severities.
      enum:
      - blocker
      - high
      - low
      - medium
      type: string
    sla-selector-tag-operation:
      description: |
        Specifies the logical operation to perform between the presence of the
        specified tags, whether all or any are needed.
      enum:
      - all
      - any
      - not_any
      type: string
    sla-status:
      description: |
        Status determines how an item can be used. In 'draft' status an item
        can be edited but can't be used. When 'published' the item can longer
        be edited but can be used. 'Archived' is read-only.
      enum:
      - archived
      - draft
      - published
      type: string
    sla-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: Human-readable name.
            type: string
          status:
            $ref: '#/components/schemas/sla-status'
        required:
        - name
        - status
        type: object
      title: sla-summary
    sla-summary-filter:
      description: The filter for SLA summary.
      properties:
        stage:
          description: Filters for records with any of the provided SLA stages.
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      title: sla-summary-filter
      type: object
    sla-summary-stage:
      description: |
        The stage of the SLA. This is the metric stage which is closest to
        breach.
      enum:
      - breached
      - completed
      - paused
      - running
      - warning
      type: string
    sla-tracker-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          metric_target_summaries:
            description: |
              Summary of the metrics target being tracked in the SLA tracker.
            items:
              $ref: '#/components/schemas/archetype-metric-target-summary'
            type: array
          sla:
            $ref: '#/components/schemas/sla-summary'
          sla_policy_id:
            description: |
              Details of the applicable SLA policy. Can be omitted if no sla
              applies, or if no policy of the sla applies at the moment.
            type: string
          sla_policy_id_v1:
            description: |
              Details of the applicable SLA policy. Can be omitted if no sla
              applies, or if no policy of the sla applies at the moment.
            type: string
          stage:
            description: SLA stage of the object being tracked.
            type: string
        required:
        - metric_target_summaries
        type: object
      title: sla-tracker-summary
    slas-assign-request:
      properties:
        id:
          description: |
            The SLA which would be assigned to the Rev organizations. If
            omitted, the SLA of all the rev organizations referenced will be
            unset.
          type: string
        rev_orgs:
          description: The Rev organizations to apply the SLA to.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      required:
      - rev_orgs
      title: slas-assign-request
      type: object
    slas-assign-response:
      properties:
        results:
          description: The list of outcomes for each Rev organization.
          items:
            $ref: '#/components/schemas/assign-result'
          type: array
      required:
      - results
      title: slas-assign-response
      type: object
      x-go-name: SlasAssignResponseBody
    slas-create-request:
      properties:
        description:
          description: Description of the purpose and capabilities of the SLA.
          type: string
        evaluation_period:
          $ref: '#/components/schemas/sla-evaluation-period'
        name:
          description: Human-readable name.
          type: string
        policies:
          description: |
            The policies encompassed by this SLA, ordered in decreasing
            priority.
          items:
            $ref: '#/components/schemas/set-sla-policy'
          type: array
      required:
      - name
      title: slas-create-request
      type: object
    slas-create-response:
      properties:
        sla:
          $ref: '#/components/schemas/sla'
      required:
      - sla
      title: slas-create-response
      type: object
      x-go-name: SlasCreateResponseBody
    slas-get-request:
      properties:
        id:
          description: The ID of the SLA to get.
          type: string
      required:
      - id
      title: slas-get-request
      type: object
    slas-get-response:
      properties:
        sla:
          $ref: '#/components/schemas/sla'
      required:
      - sla
      title: slas-get-response
      type: object
      x-go-name: SlasGetResponseBody
    slas-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of SLAs to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          description: |
            Fields to sort the SLAs by and the direction to sort them.
          items:
            type: string
          type: array
        status:
          description: The SLA statuses the filter matches.
          items:
            $ref: '#/components/schemas/sla-status'
          type: array
      title: slas-list-request
      type: object
    slas-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        slas:
          description: The list of SLAs.
          items:
            $ref: '#/components/schemas/sla'
          type: array
      required:
      - slas
      title: slas-list-response
      type: object
      x-go-name: SlasListResponseBody
    slas-transition-request:
      properties:
        id:
          description: The updated SLA.
          type: string
        status:
          $ref: '#/components/schemas/sla-status'
      required:
      - id
      - status
      title: slas-transition-request
      type: object
    slas-transition-response:
      properties:
        sla:
          $ref: '#/components/schemas/sla'
      required:
      - sla
      title: slas-transition-response
      type: object
      x-go-name: SlasTransitionResponseBody
    slas-update-request:
      properties:
        description:
          description: Description of the purpose and capabilities of the SLA.
          type: string
        evaluation_period:
          $ref: '#/components/schemas/sla-evaluation-period'
        id:
          description: The SLA's ID.
          type: string
        name:
          description: Human-readable name.
          type: string
        policies:
          description: |
            The policies encompassed by this SLA, ordered in decreasing
            priority, the whole array will be overwritten by the contents of
            this array.
          items:
            $ref: '#/components/schemas/set-sla-policy'
          type: array
      required:
      - id
      title: slas-update-request
      type: object
    slas-update-response:
      properties:
        sla:
          $ref: '#/components/schemas/sla'
      required:
      - sla
      title: slas-update-response
      type: object
      x-go-name: SlasUpdateResponseBody
    snap:
      discriminator:
        mapping:
          flow: '#/components/schemas/flow'
          snap_in: '#/components/schemas/snap-in'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/flow'
      - $ref: '#/components/schemas/snap-in'
      properties:
        type:
          $ref: '#/components/schemas/snap-type'
      required:
      - type
      title: snap
      type: object
    snap-component:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          description:
            description: Description of the snap component.
            type: string
          display_name:
            description: Display name.
            type: string
          name:
            description: Name of the snap component.
            type: string
          snap_in_id:
            description: Snap-in ID to which this snap component belongs.
            type: string
          snap_in_id_v1:
            description: Snap-in ID to which this snap component belongs.
            type: string
          snap_kit_action_name:
            description: Name of the snap kit action in the snap-in.
            type: string
          snap_kit_body:
            description: Snap kit body json.
            type: object
          surface:
            $ref: '#/components/schemas/snap-component-surface'
        type: object
      title: snap-component
    snap-component-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          description:
            description: Description of the snap component.
            type: string
          display_name:
            description: Display name.
            type: string
          name:
            description: Name of the snap component.
            type: string
          snap_kit_action_name:
            description: Name of the snap kit action in the snap-in.
            type: string
          snap_kit_body:
            description: Snap kit body json.
            type: object
        type: object
      title: snap-component-summary
    snap-component-surface:
      description: UI Surface associated with this snap component.
      enum:
      - plug
      - support
      type: string
    snap-in:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          automations:
            description: List of automations used in the snap-in.
            items:
              $ref: '#/components/schemas/snap-in-name-reference-mapping'
            type: array
          commands:
            description: List of commands used in the snap-in.
            items:
              $ref: '#/components/schemas/snap-in-name-reference-mapping'
            type: array
          connection_definitions:
            description: Definitions for connections used by snap-in.
            items:
              $ref: '#/components/schemas/snap-in-connection'
            type: array
          connections:
            description: List of connections used in the snap-in.
            items:
              $ref: '#/components/schemas/snap-in-name-reference-mapping'
            type: array
          custom_fields:
            description: Custom fields.
            type: object
          custom_schema_fragments:
            description: Custom schema fragments.
            items:
              type: string
            type: array
          custom_schema_fragments_v1:
            description: Custom schema fragments.
            type: string
          description:
            description: Description of the snap-in.
            type: string
          event_sources:
            description: List of event sources used in the snap-in.
            items:
              $ref: '#/components/schemas/snap-in-name-reference-mapping'
            type: array
          inputs:
            description: Values for global inputs part of the snap-in.
            items:
              $ref: '#/components/schemas/snap-in-global-input'
            type: array
          inputs_snap_kit:
            description: Snap-kit for the inputs part of snap-in.
            type: object
          marketplace_item:
            $ref: '#/components/schemas/marketplace-item-summary'
          name:
            description: Name of the snap-in.
            type: string
          per_object_schema:
            description: Per object schema.
            items:
              $ref: '#/components/schemas/schema-field-descriptor'
            type: array
          schema_fragment_ids:
            deprecated: true
            description: Combination of stock and custom schema fragment IDs.
            items:
              type: string
            type: array
          schema_fragment_ids_v1:
            description: Combination of stock and custom schema fragment IDs.
            type: string
          service_account:
            description: Service account associated with this snap-in.
            type: string
          service_account_v1:
            description: Service account associated with this snap-in.
            type: string
          snap_components:
            description: List of snap components used in the snap-in.
            items:
              $ref: '#/components/schemas/snap-in-name-reference-mapping'
            type: array
          snap_in_config:
            $ref: '#/components/schemas/snap-in-config'
          snap_in_version:
            $ref: '#/components/schemas/snap-in-version-summary'
          snap_in_version_semver:
            $ref: '#/components/schemas/semantic-version'
          snap_kit_actions:
            description: List of snapkit actions used in the snap-in.
            items:
              $ref: '#/components/schemas/snap-in-name-reference-mapping'
            type: array
          status:
            $ref: '#/components/schemas/snap-in-status'
          stock_schema_fragment:
            description: Stock schema fragment.
            type: string
          stock_schema_fragment_v1:
            description: Stock schema fragment.
            type: string
          subtype:
            description: Subtype corresponding to the custom type fragment.
            type: string
          tags:
            description: List of tags used in the snap-in.
            items:
              $ref: '#/components/schemas/snap-in-name-reference-mapping'
            type: array
        type: object
      title: snap-in
    snap-in-automation:
      description: Stores automations.
      properties:
        event_source:
          description: Event source name ID to listen to.
          type: string
        event_types:
          description: List of events subscribed from the event_source.
          items:
            type: string
          type: array
        function:
          description: Function name ID to trigger for this event.
          type: string
        name:
          description: Name of the automation.
          type: string
      title: snap-in-automation
      type: object
    snap-in-command:
      description: Snap-in command definition.
      properties:
        description:
          description: Description of the Command.
          type: string
        function:
          description: Function name ID to trigger for this Command.
          type: string
        name:
          description: Name of the Command.
          type: string
        namespace:
          description: Namespace of the Command.
          type: string
        surfaces:
          description: surfaces where the command should be shown.
          items:
            $ref: '#/components/schemas/snap-in-command-surface'
          type: array
        usage_hint:
          description: usage hint for the command.
          type: string
      title: snap-in-command
      type: object
    snap-in-command-surface:
      description: Command Surface.
      properties:
        object_types:
          description: Object types for command.
          items:
            type: string
          type: array
        surface:
          description: Surface of the Command.
          type: string
      title: snap-in-command-surface
      type: object
    snap-in-config:
      properties:
        connections:
          description: List of connections in the snap_in.
          items:
            $ref: '#/components/schemas/snap-in-connection-config'
          type: array
        global_inputs:
          description: List of inputs in the snap_in.
          items:
            $ref: '#/components/schemas/snap-in-global-input-config'
          type: array
      title: snap-in-config
      type: object
    snap-in-connection:
      description: Stores required connections.
      properties:
        description:
          description: Description of what the connection is used for.
          type: string
        display_name:
          description: Display name.
          type: string
        keyring_types:
          description: Keyring types.
          items:
            type: string
          type: array
        name:
          description: Name of connection.
          type: string
      required:
      - keyring_types
      title: snap-in-connection
      type: object
    snap-in-connection-config:
      properties:
        description:
          description: Description of the connection in the snap_in.
          type: string
        display_name:
          description: Display name of the connection in the snap_in.
          type: string
        name:
          description: Name of the connection in the snap_in.
          type: string
        types:
          description: List of keyring types this connection can be.
          items:
            type: string
          type: array
      required:
      - name
      - types
      title: snap-in-connection-config
      type: object
    snap-in-event-source:
      description: Stores event sources.
      properties:
        connection:
          description: Reference used to setup the event source.
          type: string
        description:
          description: Event source description.
          type: string
        display_name:
          description: Shown to the installer.
          type: string
        name:
          description: Event source name that serves as an id.
          type: string
        setup_instructions:
          description: Event setup instructions.
          type: string
        source:
          description: The source of the event.
          type: string
        source_config:
          description: Source config.
          type: object
      title: snap-in-event-source
      type: object
    snap-in-function-definition:
      description: Snap in function definition.
      properties:
        description:
          description: Description of the function.
          type: string
        function_id:
          $ref: '#/components/schemas/snap-in-function-summary'
        name:
          description: Name of the function.
          type: string
        source_type:
          $ref: '#/components/schemas/snap-in-function-definition-source-type'
      title: snap-in-function-definition
      type: object
    snap-in-function-definition-source-type:
      description: The source type containing the code.
      enum:
      - artifact
      type: string
    snap-in-function-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          description:
            description: Description of the function.
            type: string
          name:
            description: Name of the function.
            type: string
        type: object
      title: snap-in-function-summary
    snap-in-global-input:
      properties:
        name:
          description: Name of the input.
          type: string
        value:
          description: Input value.
          type: string
      required:
      - name
      title: snap-in-global-input
      type: object
    snap-in-global-input-config:
      properties:
        allowed_values:
          description: Allowed values for the input.
          items:
            type: string
          type: array
        default_value:
          description: Default value for the input.
          type: string
        description:
          description: Description of the input value.
          type: string
        display_name:
          description: Display name for the input.
          type: string
        name:
          description: Name of input in the snap_in.
          type: string
        type:
          $ref: '#/components/schemas/snap-in-global-input-type'
      required:
      - name
      - type
      title: snap-in-global-input-config
      type: object
    snap-in-global-input-type:
      description: Type of the input.
      enum:
      - bool
      - enum
      - enum_list
      - float
      - float_list
      - integer
      - integer_list
      - string
      - string_list
      type: string
    snap-in-name-reference-mapping:
      description: |
        Stores mapping from snap-in version defined name to the corresponding
        ID.
      properties:
        name:
          description: |
            Name by which the object is being referred in the snap-in version.
          type: string
        reference:
          $ref: '#/components/schemas/atom-summary'
      required:
      - name
      title: snap-in-name-reference-mapping
      type: object
    snap-in-package:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          description:
            description: Description of the snap-in package.
            type: string
          name:
            description: Name of the snap-in package.
            type: string
          slug:
            description: Globally unique identifier of the Snap-in.
            type: string
        type: object
      title: snap-in-package
    snap-in-package-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          description:
            description: Description of the snap-in package.
            type: string
          name:
            description: Name of the snap-in package.
            type: string
          slug:
            description: Globally unique identifier of the Snap-in.
            type: string
        type: object
      title: snap-in-package-summary
    snap-in-packages-create-request:
      properties:
        description:
          description: Description of the snap-in package
          type: string
        name:
          description: Name of the snap-in package
          type: string
        slug:
          description: Globally unique identifier of the Snap-in
          type: string
      required:
      - description
      - name
      - slug
      title: snap-in-packages-create-request
      type: object
    snap-in-packages-create-response:
      properties:
        snap_in_package:
          $ref: '#/components/schemas/snap-in-package'
      required:
      - snap_in_package
      title: snap-in-packages-create-response
      type: object
      x-go-name: SnapInPackagesCreateResponseBody
    snap-in-packages-delete-request:
      properties:
        id:
          description: The ID of the snap-in package to delete.
          type: string
      required:
      - id
      title: snap-in-packages-delete-request
      type: object
    snap-in-packages-get-request:
      properties:
        id:
          description: The ID of the snap-in package to get.
          type: string
      required:
      - id
      title: snap-in-packages-get-request
      type: object
    snap-in-packages-get-response:
      properties:
        snap_in_package:
          $ref: '#/components/schemas/snap-in-package'
      required:
      - snap_in_package
      title: snap-in-packages-get-response
      type: object
      x-go-name: SnapInPackagesGetResponseBody
    snap-in-packages-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of snap-in packages to return. The default is
            '50', the maximum is '100'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          description: |
            Fields to sort the snap-in packages by and the direction to sort
            them.
          items:
            type: string
          type: array
      title: snap-in-packages-list-request
      type: object
    snap-in-packages-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        snap_in_packages:
          description: List of snap-in packages.
          items:
            $ref: '#/components/schemas/snap-in-package'
          type: array
      required:
      - snap_in_packages
      title: snap-in-packages-list-response
      type: object
      x-go-name: SnapInPackagesListResponseBody
    snap-in-packages-log-entry:
      properties:
        dev_org:
          description: Dev Org for the log statement.
          type: string
        event_id:
          description: |
            Event ID of the event corresponding to the log statement.
          type: string
        event_type:
          description: |
            Event ID type the event corresponding to the log statement.
          type: string
        id:
          description: ID of the log.
          type: string
        level:
          $ref: '#/components/schemas/snap-in-packages-log-level-filter-log-level-enum'
        msg:
          description: Message of the log.
          type: string
        process:
          $ref: '#/components/schemas/snap-in-packages-log-process-filter-log-process-enum'
        snap_in_package:
          description: Snap-in-package from which the function was created.
          type: string
        snap_in_version:
          description: Snap-in-version from which the function was created.
          type: string
        source_name:
          description: |
            Source name of the function. This is the name by which the function
            is referred as in the snap-in-version.
          type: string
        source_type:
          $ref: '#/components/schemas/snap-in-packages-log-source-type-filter-log-source-type-enum'
        target:
          $ref: '#/components/schemas/snap-in-packages-log-target-filter-log-target-enum'
        timestamp:
          description: Timestamp of the log.
          format: date-time
          type: string
      required:
      - id
      - msg
      - timestamp
      title: snap-in-packages-log-entry
      type: object
    snap-in-packages-log-level-filter:
      properties:
        exclude:
          description: |
            Exclude the specified values instead of (default behaviour)
            including them.
          type: boolean
        values:
          description: List of values to include/exclude.
          items:
            $ref: '#/components/schemas/snap-in-packages-log-level-filter-log-level-enum'
          type: array
      required:
      - values
      title: snap-in-packages-log-level-filter
      type: object
    snap-in-packages-log-level-filter-log-level-enum:
      enum:
      - debug
      - error
      - fatal
      - info
      - none
      - trace
      - warn
      type: string
    snap-in-packages-log-process-filter:
      properties:
        exclude:
          description: |
            Exclude the specified values instead of (default behaviour)
            including them.
          type: boolean
        values:
          description: List of values to include/exclude.
          items:
            $ref: '#/components/schemas/snap-in-packages-log-process-filter-log-process-enum'
          type: array
      required:
      - values
      title: snap-in-packages-log-process-filter
      type: object
    snap-in-packages-log-process-filter-log-process-enum:
      enum:
      - build
      - function
      - none
      type: string
    snap-in-packages-log-source-type-filter:
      properties:
        exclude:
          description: |
            Exclude the specified values instead of (default behaviour)
            including them.
          type: boolean
        values:
          description: List of values to include/exclude.
          items:
            $ref: '#/components/schemas/snap-in-packages-log-source-type-filter-log-source-type-enum'
          type: array
      required:
      - values
      title: snap-in-packages-log-source-type-filter
      type: object
    snap-in-packages-log-source-type-filter-log-source-type-enum:
      enum:
      - automation
      - command
      - event_source
      - none
      - snap_kit_action
      type: string
    snap-in-packages-log-string-filter:
      properties:
        exclude:
          description: |
            Exclude the specified values instead of (default behaviour)
            including them.
          type: boolean
        values:
          description: |
            The values to filter on. If empty, filter is ignored. "" is a valid
            value meaning field is not set.
          items:
            type: string
          type: array
      required:
      - values
      title: snap-in-packages-log-string-filter
      type: object
    snap-in-packages-log-target-filter:
      properties:
        exclude:
          description: |
            Exclude the specified values instead of (default behaviour)
            including them.
          type: boolean
        values:
          description: List of values to include/exclude.
          items:
            $ref: '#/components/schemas/snap-in-packages-log-target-filter-log-target-enum'
          type: array
      required:
      - values
      title: snap-in-packages-log-target-filter
      type: object
    snap-in-packages-log-target-filter-log-target-enum:
      enum:
      - dev_org
      - none
      type: string
    snap-in-packages-logs-fetch-request:
      properties:
        cursor:
          description: Cursor for set of logs.
          type: string
        filters:
          $ref: '#/components/schemas/snap-in-packages-logs-fetch-request-filter'
        limit:
          description: Number of logs to fetch. Defaults to 50.
          format: int64
          type: integer
        query:
          description: Query for message text.
          type: string
        timestamp:
          $ref: '#/components/schemas/date-time-filter'
      title: snap-in-packages-logs-fetch-request
      type: object
    snap-in-packages-logs-fetch-request-filter:
      properties:
        dev_org:
          $ref: '#/components/schemas/snap-in-packages-log-string-filter'
        event_id:
          $ref: '#/components/schemas/snap-in-packages-log-string-filter'
        event_type:
          $ref: '#/components/schemas/snap-in-packages-log-string-filter'
        level:
          $ref: '#/components/schemas/snap-in-packages-log-level-filter'
        process:
          $ref: '#/components/schemas/snap-in-packages-log-process-filter'
        snap_in_package:
          $ref: '#/components/schemas/snap-in-packages-log-string-filter'
        snap_in_version:
          $ref: '#/components/schemas/snap-in-packages-log-string-filter'
        source_name:
          $ref: '#/components/schemas/snap-in-packages-log-string-filter'
        source_type:
          $ref: '#/components/schemas/snap-in-packages-log-source-type-filter'
        target:
          $ref: '#/components/schemas/snap-in-packages-log-target-filter'
      title: snap-in-packages-logs-fetch-request-filter
      type: object
    snap-in-packages-logs-fetch-response:
      properties:
        incomplete_results:
          description: Indicates whether the results returned are incomplete.
          type: boolean
        log_summary:
          $ref: '#/components/schemas/snap-in-packages-logs-fetch-response-log-summary'
        logs:
          description: List of logs matching the filters.
          items:
            $ref: '#/components/schemas/snap-in-packages-log-entry'
          type: array
        next_cursor:
          description: Cursor for next set of logs.
          type: string
      required:
      - incomplete_results
      - log_summary
      - logs
      title: snap-in-packages-logs-fetch-response
      type: object
      x-go-name: SnapInPackagesLogsFetchResponseBody
    snap-in-packages-logs-fetch-response-log-summary:
      properties:
        total:
          $ref: '#/components/schemas/snap-in-packages-logs-fetch-response-log-summary-total'
      title: snap-in-packages-logs-fetch-response-log-summary
      type: object
    snap-in-packages-logs-fetch-response-log-summary-total:
      properties:
        relation:
          $ref: '#/components/schemas/snap-in-packages-logs-fetch-response-log-summary-total-total-relation-enum'
        value:
          description: Number of logs matching this request.
          format: int64
          type: integer
      required:
      - relation
      - value
      title: snap-in-packages-logs-fetch-response-log-summary-total
      type: object
    snap-in-packages-logs-fetch-response-log-summary-total-total-relation-enum:
      enum:
      - eq
      - gte
      type: string
    snap-in-service-account:
      description: |
        Details about service account to be associated with snap-ins.
      properties:
        description:
          description: Description of the service account.
          type: string
        display_name:
          description: Display name of the service account.
          type: string
      title: snap-in-service-account
      type: object
    snap-in-snap-component:
      description: Stores snap components.
      properties:
        description:
          description: Snap component description.
          type: string
        display_name:
          description: Shown to the installer.
          type: string
        name:
          description: Snap component name that serves as an id.
          type: string
        snap_kit_action_name:
          description: Name of a snap_kit_action defined in this snap-in.
          type: string
        snap_kit_body:
          description: Snap kit body json.
          type: object
        surface:
          $ref: '#/components/schemas/snap-in-snap-component-surface'
      title: snap-in-snap-component
      type: object
    snap-in-snap-component-surface:
      description: UI Surface associated with this snap component.
      enum:
      - plug
      - support
      type: string
    snap-in-snap-kit-action:
      description: SnapKit action definition.
      properties:
        description:
          description: Description of the SnapKit Action.
          type: string
        function:
          description: Function name ID to trigger for this SnapKit Action.
          type: string
        name:
          description: Name of the SnapKitAction.
          type: string
      title: snap-in-snap-kit-action
      type: object
    snap-in-status:
      description: Deployment status of the snap-in.
      enum:
      - active
      - draft
      type: string
    snap-in-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: snap-in-summary
    snap-in-tag-definition:
      description: Tag summary.
      properties:
        description:
          description: Description of the tag.
          type: string
        name:
          description: Name of the tag.
          type: string
      title: snap-in-tag-definition
      type: object
    snap-in-version:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          automations:
            description: Automation mappings.
            items:
              $ref: '#/components/schemas/snap-in-automation'
            type: array
          changelog:
            description: Summary of the changes.
            type: string
          commands:
            description: Serialized commands to be installed with Snap-In.
            items:
              $ref: '#/components/schemas/snap-in-command'
            type: array
          connections:
            description: Connections used by the snap-in code.
            items:
              $ref: '#/components/schemas/snap-in-connection'
            type: array
          description:
            description: Description.
            type: string
          events:
            description: Event.
            items:
              $ref: '#/components/schemas/snap-in-event-source'
            type: array
          failure_reason:
            description: |
              If state above is `build_failed`/`deployment_failed`, then this
              contains the reason for failure.
            type: string
          functions:
            description: Functions containing the user-provided code.
            items:
              $ref: '#/components/schemas/snap-in-function-definition'
            type: array
          global_variables:
            description: Set of global variables.
            items:
              type: string
            type: array
          manifest_version:
            $ref: '#/components/schemas/semantic-version'
          name:
            description: Name.
            type: string
          service_account:
            $ref: '#/components/schemas/snap-in-service-account'
          slug:
            description: Globally unique identifier of the Snap-in.
            type: string
          snap_components:
            description: |
              List of snap components, where each snap component contains a
              snap-kit.
            items:
              $ref: '#/components/schemas/snap-in-snap-component'
            type: array
          snap_in_package:
            $ref: '#/components/schemas/snap-in-package-summary'
          snapkit_actions:
            description: |
              List of serialized SnapKitAction to be installed with Snap-In. An
              snapkit action is a synchronous code path called when an
              interactive element on the snap-kit is interacted with. Interactive
              elements include buttons, checkboxes, date-pickers etc. A snapkit
              action is defined as change in value of these elements.
            items:
              $ref: '#/components/schemas/snap-in-snap-kit-action'
            type: array
          source_code_artifact:
            $ref: '#/components/schemas/artifact-summary'
          state:
            $ref: '#/components/schemas/snap-in-version-state'
          tags:
            description: Tags created during snap-in installation.
            items:
              $ref: '#/components/schemas/snap-in-tag-definition'
            type: array
        type: object
      title: snap-in-version
    snap-in-version-state:
      description: Snap-in package state.
      enum:
      - build_failed
      - deploying
      - deployment_failed
      - draft
      - published
      - ready
      type: string
    snap-in-version-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: snap-in-version-summary
    snap-in-versions-create-request:
      properties:
        manifest:
          description: Manifest of the snap-in version to be created.
          type: string
        snap_in_package:
          description: Parent snap-in package
          type: string
        source_code_artifact:
          description: |
            The artifact containing user provided source code for snap-in
            functions.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
      required:
      - manifest
      - snap_in_package
      title: snap-in-versions-create-request
      type: object
    snap-in-versions-create-response:
      properties:
        snap_in_version:
          $ref: '#/components/schemas/snap-in-version'
      required:
      - snap_in_version
      title: snap-in-versions-create-response
      type: object
      x-go-name: SnapInVersionsCreateResponseBody
    snap-in-versions-delete-request:
      properties:
        id:
          description: The ID of the snap-in version to delete.
          type: string
      required:
      - id
      title: snap-in-versions-delete-request
      type: object
    snap-in-versions-get-request:
      properties:
        id:
          description: The ID of the snap-in version to get.
          type: string
      required:
      - id
      title: snap-in-versions-get-request
      type: object
    snap-in-versions-get-response:
      properties:
        snap_in_version:
          $ref: '#/components/schemas/snap-in-version'
      required:
      - snap_in_version
      title: snap-in-versions-get-response
      type: object
      x-go-name: SnapInVersionsGetResponseBody
    snap-in-versions-list-request:
      properties:
        created_by:
          description: |
            Filters for snap-in-versions created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of snap-in versions to return. The default is
            '50', the maximum is '100'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        snap_in_package:
          description: |
            Filters for snap-in-versions part of any of these packages.
          items:
            type: string
          type: array
        sort_by:
          description: |
            Fields to sort the snap-in versions by and the direction to sort
            them.
          items:
            type: string
          type: array
        state:
          description: Filters for snap-in-versions in any of these states.
          items:
            $ref: '#/components/schemas/snap-in-version-state'
          type: array
      title: snap-in-versions-list-request
      type: object
    snap-in-versions-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        snap_in_versions:
          description: List of snap-in versions.
          items:
            $ref: '#/components/schemas/snap-in-version'
          type: array
      required:
      - snap_in_versions
      title: snap-in-versions-list-response
      type: object
      x-go-name: SnapInVersionsListResponseBody
    snap-ins-delete-request:
      properties:
        id:
          description: The ID of the snap-in to delete.
          type: string
      required:
      - id
      title: snap-ins-delete-request
      type: object
    snap-ins-deploy-request:
      properties:
        id:
          description: The ID of the snap-in to deploy.
          type: string
      required:
      - id
      title: snap-ins-deploy-request
      type: object
    snap-ins-deploy-response:
      properties:
        snap_in:
          $ref: '#/components/schemas/snap-in'
      required:
      - snap_in
      title: snap-ins-deploy-response
      type: object
      x-go-name: SnapInsDeployResponseBody
    snap-ins-draft-create-request:
      properties:
        snap_in_version:
          description: |
            The snap-in version from which the snap-in should be created.
          type: string
      required:
      - snap_in_version
      title: snap-ins-draft-create-request
      type: object
    snap-ins-draft-create-response:
      properties:
        snap_in:
          $ref: '#/components/schemas/snap-in'
      required:
      - snap_in
      title: snap-ins-draft-create-response
      type: object
      x-go-name: SnapInsDraftCreateResponseBody
    snap-ins-get-request:
      properties:
        id:
          description: The ID of the snap-in to get.
          type: string
      required:
      - id
      title: snap-ins-get-request
      type: object
    snap-ins-get-response:
      properties:
        snap_in:
          $ref: '#/components/schemas/snap-in'
      required:
      - snap_in
      title: snap-ins-get-response
      type: object
      x-go-name: SnapInsGetResponseBody
    snap-ins-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of snap-ins to return. The default is '50', the
            maximum is '100'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          description: |
            Fields to sort the snap-ins by and the direction to sort them.
          items:
            type: string
          type: array
      title: snap-ins-list-request
      type: object
    snap-ins-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        snap_ins:
          description: List of snap-ins.
          items:
            $ref: '#/components/schemas/snap-in'
          type: array
      required:
      - snap_ins
      title: snap-ins-list-response
      type: object
      x-go-name: SnapInsListResponseBody
    snap-ins-update-request:
      properties:
        connections:
          description: List of connections used in the snap-in
          items:
            $ref: '#/components/schemas/update-snap-in-name-reference-mapping'
          type: array
        custom_fields:
          description: Application-defined custom fields.
          type: object
        id:
          description: The ID of the snap-in to update.
          type: string
        inputs:
          description: List of inputs to update
          items:
            $ref: '#/components/schemas/update-snap-in-global-input'
          type: array
        inputs_snap_kit_action_payload:
          description: |
            The action payload generated by user interaction if the inputs are
            being updated via snap-kits.
          type: object
        schema_fragment_ids:
          description: Schema fragment IDs.
          items:
            type: string
          type: array
      required:
      - id
      title: snap-ins-update-request
      type: object
    snap-ins-update-response:
      properties:
        snap_in:
          $ref: '#/components/schemas/snap-in'
      required:
      - snap_in
      title: snap-ins-update-response
      type: object
      x-go-name: SnapInsUpdateResponseBody
    snap-kit-action-request:
      discriminator:
        mapping:
          button: '#/components/schemas/snap-kit-action-request-button'
          form: '#/components/schemas/snap-kit-action-request-form'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/snap-kit-action-request-button'
      - $ref: '#/components/schemas/snap-kit-action-request-form'
      properties:
        action_id:
          description: |
            Id of the interactive element specified by developer in a snap-kit
            object.
          type: string
        action_type:
          description: Action interaction type.
          type: string
        block_id:
          description: |
            Id of the block within the surface which is the container for the
            interactive element.
          type: string
        timestamp:
          description: Timestamp when the action was originated.
          format: date-time
          type: string
        type:
          $ref: '#/components/schemas/snap-kit-action-request-element-type-value'
      required:
      - action_id
      - timestamp
      - type
      title: snap-kit-action-request
      type: object
    snap-kit-action-request-button:
      properties:
        value:
          description: Value for the button interactive element.
          type: string
      required:
      - value
      title: snap-kit-action-request-button
      type: object
    snap-kit-action-request-element-type-value:
      enum:
      - button
      - form
      type: string
    snap-kit-action-request-form:
      properties:
        value:
          description: Value for the form interactive element.
          type: object
      required:
      - value
      title: snap-kit-action-request-form
      type: object
    snap-kit-action-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: snap-kit-action-summary
    snap-type:
      enum:
      - flow
      - snap_in
      type: string
    snaps-list-request:
      title: snaps-list-request
      type: object
    snaps-list-response:
      properties:
        snaps:
          description: List of snaps.
          items:
            $ref: '#/components/schemas/snap'
          type: array
      required:
      - snaps
      title: snaps-list-response
      type: object
      x-go-name: SnapsListResponseBody
    socket-action:
      properties:
        subscribe:
          $ref: '#/components/schemas/socket-action-subscribe'
        type:
          enum:
          - subscribe
          - user_typing
          type: string
        user_typing:
          $ref: '#/components/schemas/socket-action-user-typing'
      title: socket-action
      type: object
    socket-action-subscribe:
      properties:
        add:
          description: |
            Adds event subscriptions for the objects with provided IDs. If a
            subscription for an ID is already active, then nothing is done.
          items:
            type: string
          type: array
        id:
          description: |
            An ID, generated by the client, that will be provided in the
            resulting subscribe event. This is a mechanism for the client to
            match a subscribe request (action) to its response (event), where a
            subscribe action may generate one or more events. Therefore, the
            client should not reuse the ID for several minutes to ensure that
            duplicates aren't mistaken.
          type: string
        remove:
          description: |
            Removes event subscriptions for the objects with the provided IDs.
            If there is no active subscription for an ID, then nothing is done.
          items:
            type: string
          type: array
      title: socket-action-subscribe
      type: object
    socket-action-user-typing:
      properties:
        object:
          description: The ID of the object that the user is typing to.
          type: string
      required:
      - object
      title: socket-action-user-typing
      type: object
    socket-event:
      properties:
        account_created:
          $ref: '#/components/schemas/event-account-created'
        account_deleted:
          $ref: '#/components/schemas/event-account-deleted'
        account_updated:
          $ref: '#/components/schemas/event-account-updated'
        article_created:
          $ref: '#/components/schemas/event-article-created'
        article_deleted:
          $ref: '#/components/schemas/event-article-deleted'
        article_updated:
          $ref: '#/components/schemas/event-article-updated'
        artifact_created:
          $ref: '#/components/schemas/event-artifact-created'
        artifact_deleted:
          $ref: '#/components/schemas/event-artifact-deleted'
        artifact_updated:
          $ref: '#/components/schemas/event-artifact-updated'
        conversation_created:
          $ref: '#/components/schemas/event-conversation-created'
        conversation_deleted:
          $ref: '#/components/schemas/event-conversation-deleted'
        conversation_updated:
          $ref: '#/components/schemas/event-conversation-updated'
        dev_user_created:
          $ref: '#/components/schemas/event-dev-user-created'
        dev_user_deleted:
          $ref: '#/components/schemas/event-dev-user-deleted'
        dev_user_updated:
          $ref: '#/components/schemas/event-dev-user-updated'
        flow_created:
          $ref: '#/components/schemas/event-flow-created'
        flow_deleted:
          $ref: '#/components/schemas/event-flow-deleted'
        flow_updated:
          $ref: '#/components/schemas/event-flow-updated'
        link_created:
          $ref: '#/components/schemas/event-link-created'
        link_deleted:
          $ref: '#/components/schemas/event-link-deleted'
        link_updated:
          $ref: '#/components/schemas/event-link-updated'
        marketplace_item_created:
          $ref: '#/components/schemas/event-marketplace-item-created'
        marketplace_item_deleted:
          $ref: '#/components/schemas/event-marketplace-item-deleted'
        marketplace_item_updated:
          $ref: '#/components/schemas/event-marketplace-item-updated'
        part_created:
          $ref: '#/components/schemas/event-part-created'
        part_deleted:
          $ref: '#/components/schemas/event-part-deleted'
        part_updated:
          $ref: '#/components/schemas/event-part-updated'
        rev_org_created:
          $ref: '#/components/schemas/event-rev-org-created'
        rev_org_deleted:
          $ref: '#/components/schemas/event-rev-org-deleted'
        rev_org_updated:
          $ref: '#/components/schemas/event-rev-org-updated'
        rev_user_created:
          $ref: '#/components/schemas/event-rev-user-created'
        rev_user_deleted:
          $ref: '#/components/schemas/event-rev-user-deleted'
        rev_user_updated:
          $ref: '#/components/schemas/event-rev-user-updated'
        snap_in_created:
          $ref: '#/components/schemas/event-snap-in-created'
        snap_in_deleted:
          $ref: '#/components/schemas/event-snap-in-deleted'
        snap_in_updated:
          $ref: '#/components/schemas/event-snap-in-updated'
        subscribe:
          $ref: '#/components/schemas/event-subscribe'
        tag_created:
          $ref: '#/components/schemas/event-tag-created'
        tag_deleted:
          $ref: '#/components/schemas/event-tag-deleted'
        tag_updated:
          $ref: '#/components/schemas/event-tag-updated'
        timeline_entry_created:
          $ref: '#/components/schemas/event-timeline-entry-created'
        timeline_entry_deleted:
          $ref: '#/components/schemas/event-timeline-entry-deleted'
        timeline_entry_updated:
          $ref: '#/components/schemas/event-timeline-entry-updated'
        type:
          enum:
          - account_created
          - account_deleted
          - account_updated
          - article_created
          - article_deleted
          - article_updated
          - artifact_created
          - artifact_deleted
          - artifact_updated
          - conversation_created
          - conversation_deleted
          - conversation_updated
          - dev_user_created
          - dev_user_deleted
          - dev_user_updated
          - flow_created
          - flow_deleted
          - flow_updated
          - link_created
          - link_deleted
          - link_updated
          - marketplace_item_created
          - marketplace_item_deleted
          - marketplace_item_updated
          - part_created
          - part_deleted
          - part_updated
          - rev_org_created
          - rev_org_deleted
          - rev_org_updated
          - rev_user_created
          - rev_user_deleted
          - rev_user_updated
          - snap_in_created
          - snap_in_deleted
          - snap_in_updated
          - subscribe
          - tag_created
          - tag_deleted
          - tag_updated
          - timeline_entry_created
          - timeline_entry_deleted
          - timeline_entry_updated
          - user_typing
          - vista_created
          - vista_deleted
          - vista_updated
          - webhook_created
          - webhook_deleted
          - webhook_updated
          - work_created
          - work_deleted
          - work_updated
          type: string
        user_typing:
          $ref: '#/components/schemas/event-user-typing'
        vista_created:
          $ref: '#/components/schemas/event-vista-created'
        vista_deleted:
          $ref: '#/components/schemas/event-vista-deleted'
        vista_updated:
          $ref: '#/components/schemas/event-vista-updated'
        webhook_created:
          $ref: '#/components/schemas/event-webhook-created'
        webhook_deleted:
          $ref: '#/components/schemas/event-webhook-deleted'
        webhook_updated:
          $ref: '#/components/schemas/event-webhook-updated'
        work_created:
          $ref: '#/components/schemas/event-work-created'
        work_deleted:
          $ref: '#/components/schemas/event-work-deleted'
        work_updated:
          $ref: '#/components/schemas/event-work-updated'
      title: socket-event
      type: object
    sockets-connect-request:
      description: The request to connect to an open socket.
      properties:
        id:
          description: The ID for the open socket to connect to.
          type: string
      required:
      - id
      title: sockets-connect-request
      type: object
    sockets-open-request:
      description: The request to open an event socket.
      title: sockets-open-request
      type: object
    sockets-open-response:
      description: The response to opening an event socket.
      properties:
        id:
          description: The ID to use to connect to the opened socket.
          type: string
      required:
      - id
      title: sockets-open-response
      type: object
      x-go-name: SocketsOpenResponseBody
    source-details:
      description: Discovery source details.
      properties:
        last_captured_timestamp:
          description: Discovery source data last captured timestamp.
          format: date-time
          type: string
        size_bytes:
          description: Discovery source data collected file size in bytes.
          format: int32
          type: integer
        type:
          description: Discovery source type.
          type: string
      title: source-details
      type: object
    stage:
      description: Describes the current stage of a work item.
      properties:
        name:
          description: Current stage name of the work item.
          type: string
        notes:
          description: Notes relevant to the stage.
          type: string
        ordinal:
          description: Current stage number of the work item (sortable).
          format: int32
          type: integer
        stage:
          $ref: '#/components/schemas/custom-stage-summary'
        state:
          $ref: '#/components/schemas/custom-state-summary'
      required:
      - name
      title: stage
      type: object
    stage-diagram:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          is_default:
            description: True if this diagram is the default for the leaf type.
            type: boolean
          leaf_type:
            description: The leaf type this stage diagram applies to.
            type: string
          name:
            description: The human readable name of the diagram.
            type: string
          stages:
            description: Stage node.
            items:
              $ref: '#/components/schemas/stage-node'
            type: array
        required:
        - stages
        type: object
      title: stage-diagram
    stage-diagram-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: stage-diagram-summary
    stage-diagrams-get-request:
      properties:
        id:
          description: The ID of the stage diagram to get.
          type: string
        leaf_type:
          description: |
            The leaf type. Should be specified to retrieve the default stage
            diagram for the leaf type. If not provided, then id is used.
          type: string
      title: stage-diagrams-get-request
      type: object
    stage-diagrams-get-response:
      properties:
        stage_diagram:
          $ref: '#/components/schemas/stage-diagram'
      required:
      - stage_diagram
      title: stage-diagrams-get-response
      type: object
      x-go-name: StageDiagramsGetResponseBody
    stage-diagrams-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        leaf_type:
          description: The list of leaf types.
          items:
            type: string
          type: array
        limit:
          description: The maximum number of items.
          format: int32
          type: integer
        name:
          description: The list of stage diagram names.
          items:
            type: string
          type: array
        sort_by:
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
          type: array
      title: stage-diagrams-list-request
      type: object
    stage-diagrams-list-response:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        result:
          description: The stage diagram.
          items:
            $ref: '#/components/schemas/stage-diagram'
          type: array
      required:
      - result
      title: stage-diagrams-list-response
      type: object
      x-go-name: StageDiagramsListResponseBody
    stage-filter:
      description: The filter for stages.
      properties:
        name:
          description: Filters for records in the provided stage(s).
          items:
            type: string
          type: array
      title: stage-filter
      type: object
    stage-init:
      description: Sets an object's initial stage.
      properties:
        id:
          description: |
            The ID of the custom stage. If this is set, the name field is
            ignored.
          type: string
        name:
          description: The name of the stage.
          type: string
        notes:
          description: Notes relevant to the stage.
          type: string
      title: stage-init
      type: object
    stage-node:
      description: Diagram stage.
      properties:
        is_deprecated:
          description: True if this stage has been deprecated.
          type: boolean
        is_start:
          description: |
            True if this stage is the starting stage of the stage diagram.
          type: boolean
        stage:
          $ref: '#/components/schemas/custom-stage-summary'
        transitions:
          description: The list of stages that can be reached.
          items:
            $ref: '#/components/schemas/stage-transition'
          type: array
      required:
      - transitions
      title: stage-node
      type: object
    stage-transition:
      description: Stage transition.
      properties:
        target_stage:
          $ref: '#/components/schemas/custom-stage-summary'
      title: stage-transition
      type: object
    stage-update:
      description: Updates an object's stage.
      properties:
        name:
          description: |
            The updated name of the stage, otherwise unchanged if not set.
          type: string
        notes:
          description: |
            The updated notes for the stage, otherwise unchanged if not set.
          type: string
        stage:
          description: |
            The ID of the updated custom stage, otherwise unchanged if not set.
            If this is set, the name field is ignored.
          type: string
      title: stage-update
      type: object
    start-data-collection-request:
      properties:
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      title: start-data-collection-request
      type: object
    start-data-collection-response:
      title: start-data-collection-response
      type: object
      x-go-name: StartDataCollectionResponseBody
    status:
      description: Status of the user.
      properties:
        description:
          description: Description of the status.
          type: string
        emoji:
          description: Name of the emoji supporting the status text.
          type: string
        expires_at:
          description: Time at which status expires.
          format: date-time
          type: string
      title: status
      type: object
    stock-field-enum-override:
      description: Override for the allowed values of a stock field enum.
      properties:
        enum_values:
          description: Allowed enum values.
          items:
            type: string
          type: array
        field_name:
          description: REST API stock field name.
          type: string
      required:
      - enum_values
      title: stock-field-enum-override
      type: object
    stock-schema-fragment:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          composite_schemas:
            description: List of composite schemas.
            items:
              $ref: '#/components/schemas/composite-schema'
            type: array
          description:
            description: Description of the schema.
            type: string
          fields:
            description: List of all fields in this schema.
            items:
              $ref: '#/components/schemas/schema-field-descriptor'
            type: array
          leaf_type:
            description: Leaf type this fragment applies to.
            type: string
          new_fragment_ref:
            $ref: '#/components/schemas/atom-summary'
          old_fragment_ref:
            $ref: '#/components/schemas/atom-summary'
          schema_signature:
            description: |
              The SHA-256 hash of the schema. Used to implement idempotent
              updates.
            type: string
          schema_signature_salt:
            description: |
              The salt used to evaluate SHA-256 hash of the schema. Used to
              implement idempotent updates.
            type: string
          title:
            description: Title of the schema.
            type: string
        required:
        - composite_schemas
        - fields
        type: object
      title: stock-schema-fragment
    stock-schema-fragment-private:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          composite_schemas:
            description: List of composite schemas.
            items:
              $ref: '#/components/schemas/composite-schema-private'
            type: array
          description:
            description: Description of the schema.
            type: string
          fields:
            description: List of all fields in this schema.
            items:
              $ref: '#/components/schemas/field-descriptor'
            type: array
          leaf_type:
            description: Leaf type this fragment applies to.
            type: string
          new_fragment_ref:
            $ref: '#/components/schemas/atom-summary'
          old_fragment_ref:
            $ref: '#/components/schemas/atom-summary'
          schema_signature:
            description: |
              The SHA-256 hash of the schema. Used to implement idempotent
              updates.
            type: string
          schema_signature_salt:
            description: |
              The salt used to evaluate SHA-256 hash of the schema. Used to
              implement idempotent updates.
            type: string
          title:
            description: Title of the schema.
            type: string
        required:
        - composite_schemas
        - fields
        type: object
      title: stock-schema-fragment-private
    stock-schema-fragment-private-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: stock-schema-fragment-private-summary
    stock-schema-fragment-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: stock-schema-fragment-summary
    stock-schema-fragments-get-request:
      properties:
        id:
          description: The ID of the stock schema fragment.
          type: string
        leaf_type:
          description: The leaf type this fragment applies to.
          type: string
      title: stock-schema-fragments-get-request
      type: object
    stock-schema-fragments-get-request-private:
      properties:
        id:
          description: The ID of the stock schema fragment.
          type: string
        leaf_type:
          description: The leaf type this fragment applies to.
          type: string
      title: stock-schema-fragments-get-request-private
      type: object
    stock-schema-fragments-get-response:
      properties:
        fragment:
          $ref: '#/components/schemas/stock-schema-fragment'
      required:
      - fragment
      title: stock-schema-fragments-get-response
      type: object
      x-go-name: StockSchemaFragmentsGetResponseBody
    stock-schema-fragments-get-response-private:
      properties:
        fragment:
          $ref: '#/components/schemas/stock-schema-fragment-private'
      required:
      - fragment
      title: stock-schema-fragments-get-response-private
      type: object
    stock-schema-fragments-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        leaf_type:
          description: The list of leaf types.
          items:
            type: string
          type: array
        limit:
          description: The maximum number of items.
          format: int32
          type: integer
        sort_by:
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
          type: array
      title: stock-schema-fragments-list-request
      type: object
    stock-schema-fragments-list-request-private:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        leaf_type:
          description: The list of leaf types.
          items:
            type: string
          type: array
        limit:
          description: The maximum number of items.
          format: int32
          type: integer
        sort_by:
          description: |
            The list of fields to sort the items by and how to sort them.
          items:
            type: string
          type: array
      title: stock-schema-fragments-list-request-private
      type: object
    stock-schema-fragments-list-response:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        result:
          description: The stock schema fragments.
          items:
            $ref: '#/components/schemas/stock-schema-fragment'
          type: array
      required:
      - result
      title: stock-schema-fragments-list-response
      type: object
      x-go-name: StockSchemaFragmentsListResponseBody
    stock-schema-fragments-list-response-private:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        result:
          description: The stock schema fragments.
          items:
            $ref: '#/components/schemas/stock-schema-fragment-private'
          type: array
      required:
      - result
      title: stock-schema-fragments-list-response-private
      type: object
    subtype:
      properties:
        display_name:
          description: Display name of the subtype.
          type: string
        fragment_id:
          description: DON of the custom type fragment this subtype belongs to.
          type: string
        fragment_id_v1:
          description: DON of the custom type fragment this subtype belongs to.
          type: string
        value:
          description: Value of the subtype.
          type: string
      required:
      - fragment_id
      - value
      title: subtype
      type: object
    subtypes-list-request:
      properties:
        leaf_type:
          description: Leaf type for which subtypes are required.
          type: string
      required:
      - leaf_type
      title: subtypes-list-request
      type: object
    subtypes-list-response:
      properties:
        subtypes:
          description: List of subtypes.
          items:
            $ref: '#/components/schemas/subtype'
          type: array
      required:
      - subtypes
      title: subtypes-list-response
      type: object
      x-go-name: SubtypesListResponseBody
    summary-view-ui-metadata:
      description: Summary view UI hint overrides.
      properties:
        is_hidden:
          description: Whether field is hidden in UI.
          type: boolean
      title: summary-view-ui-metadata
      type: object
    support-metric-target:
      description: |
        An individual metric of an SLA, describing which metric should be
        evaluated and against what target.
      properties:
        metric_definition:
          $ref: '#/components/schemas/metric-definition-summary'
        org_schedule:
          $ref: '#/components/schemas/org-schedule-summary'
        performance:
          description: |
            The percentage of instances for which this metric's target must not
            be breached, in order not to breach the overall SLA policy.
          format: double
          type: number
        target:
          description: |
            The target value to be achieved, for example the time in which to
            do something, or the maximum allowed number of message pairs. The
            units and interpretation of the value is controlled by the
            properties of the metric referenced in metric_definition_id, time
            metrics count time in minutes, while value metrics just use
            arbitrary units.
          format: int32
          type: integer
        warning_target:
          description: |
            The threshold in the same units as target where the metric is
            considered to be 'at risk'. If it is reached, a notification will
            be generated. It might be greater or smaller than the target,
            depending on whether the metric is 'lesser is better' or 'greater
            is better'.
          format: int32
          type: integer
      title: support-metric-target
      type: object
    support-notifications-group:
      description: Preferences group for support notifications.
      properties:
        conv_msg_email_delay:
          description: |
            Delay time in minutes after which the rev/dev user will be notified
            of a new message on conversation via email.
          format: int32
          type: integer
      title: support-notifications-group
      type: object
    support-preferences-group:
      description: Preferences group for Support.
      properties:
        notification_preferences:
          $ref: '#/components/schemas/support-notifications-group'
      title: support-preferences-group
      type: object
    supported-languages-request:
      properties:
        target_language:
          description: |
            The language to use to return localized, human readable names of
            supported languages.
          type: string
      title: supported-languages-request
      type: object
    supported-languages-response:
      properties:
        languages:
          description: The list of languages supported by translation API.
          items:
            $ref: '#/components/schemas/language-resource'
          type: array
      required:
      - languages
      title: supported-languages-response
      type: object
      x-go-name: SupportedLanguagesResponseBody
    survey:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          description:
            description: Description of the survey.
            type: string
          name:
            description: |
              Survey name associated with schema. This name would be unique per
              dev org.
            type: string
          schema:
            description: List of all fields in the schema.
            items:
              $ref: '#/components/schemas/schema-field-descriptor'
            type: array
        required:
        - schema
        type: object
      title: survey
    survey-engagement-summary:
      description: Survey engagement summary object.
      properties:
        survey_url:
          description: URL to the survey.
          type: string
      title: survey-engagement-summary
      type: object
    survey-response-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: survey-response-summary
    survey-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: survey-summary
    surveys-create-request:
      properties:
        description:
          description: Description about the survey.
          type: string
        name:
          description: The survey's name.
          type: string
        schema:
          description: Schema for the survey.
          items:
            $ref: '#/components/schemas/field-descriptor'
          type: array
      required:
      - name
      - schema
      title: surveys-create-request
      type: object
    surveys-create-response:
      properties:
        survey:
          $ref: '#/components/schemas/survey'
      required:
      - survey
      title: surveys-create-response
      type: object
      x-go-name: SurveysCreateResponseBody
    surveys-submit-request:
      properties:
        object:
          description: |
            The ID of the object this survey is on (e.g. issue, conversation,
            etc).
          type: string
        response:
          description: Survey response submitted for the object.
          type: object
        survey:
          description: The ID of the survey to submit the response to.
          type: string
      required:
      - object
      - response
      - survey
      title: surveys-submit-request
      type: object
    surveys-submit-response:
      title: surveys-submit-response
      type: object
      x-go-name: SurveysSubmitResponseBody
    sys-user:
      allOf:
      - $ref: '#/components/schemas/user-base'
      - properties:
          description:
            description: Description of the system user.
            type: string
          system_user_token_ids:
            description: |
              References to the tokens issued by the STS for this system user.
            items:
              type: string
            type: array
        type: object
      title: sys-user
    sys-user-summary:
      allOf:
      - $ref: '#/components/schemas/user-base-summary'
      title: sys-user-summary
    sys-users-get-request:
      description: A request to get a system user's information.
      properties:
        id:
          description: User ID of the requested system user.
          type: string
      title: sys-users-get-request
      type: object
    sys-users-get-response:
      description: The response to getting the information for the system user.
      properties:
        sys_user:
          $ref: '#/components/schemas/sys-user'
      required:
      - sys_user
      title: sys-users-get-response
      type: object
      x-go-name: SysUsersGetResponseBody
    sys-users-list-request:
      description: A request to get the list of system user's information.
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of system users to return. Value can range from
            '1' to '100', with a default of '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        sort_by:
          description: |
            Fields to sort the system users by and the direction to sort them.
          items:
            type: string
          type: array
      title: sys-users-list-request
      type: object
    sys-users-list-response:
      description: The response to listing the system users.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration. If not
            provided, then iteration has completed.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        sys_users:
          description: The list of system users.
          items:
            $ref: '#/components/schemas/sys-user'
          type: array
      required:
      - sys_users
      title: sys-users-list-response
      type: object
      x-go-name: SysUsersListResponseBody
    sys-users-update-request:
      description: Request to update information of the system user.
      properties:
        display_handle:
          deprecated: true
          description: Updated display handle for the system user.
          type: string
        display_name:
          description: Updated display name for the system user.
          type: string
        display_picture:
          description: Artifact ID of the system user's new display picture.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          nullable: true
          type: string
        display_picture_id:
          deprecated: true
          description: Artifact ID of the system user's new display picture.
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          nullable: true
          type: string
        full_name:
          description: Updated full name for the system user.
          type: string
        id:
          description: The ID of system user to update.
          type: string
      required:
      - id
      title: sys-users-update-request
      type: object
    sys-users-update-response:
      description: Updated Sys user object.
      properties:
        sys_user:
          $ref: '#/components/schemas/sys-user'
      required:
      - sys_user
      title: sys-users-update-response
      type: object
      x-go-name: SysUsersUpdateResponseBody
    tag:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          access_level:
            $ref: '#/components/schemas/access-level'
          allowed_values:
            description: |
              The allowed values for the tag, where a value is provided when a
              tag is associated with an object. If empty, then no value should be
              provided when the association is made.
            items:
              type: string
            type: array
          description:
            description: |
              An informative description for the tag that should provide context
              on the tag's purpose and usage.
            type: string
          name:
            description: |
              The name of the tag, which denotes the logical concept by which all
              tagged objects will be associated. The name is guaranteed to be
              unique.
            type: string
          style:
            description: Style information of the tag (color, size, etc.).
            type: string
          style_new:
            $ref: '#/components/schemas/tag-style'
          type:
            $ref: '#/components/schemas/tag-type'
        required:
        - name
        type: object
      title: tag
    tag-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          tag:
            $ref: '#/components/schemas/tag-summary'
        required:
        - tag
        type: object
      title: tag-search-summary
    tag-style:
      properties:
        color:
          description: The hex color code in "#RRGGBB" format.
          type: string
      title: tag-style
      type: object
    tag-style-summary:
      title: tag-style-summary
      type: object
    tag-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          name:
            description: |
              The name of the tag, which denotes the logical concept by which all
              tagged objects will be associated. The name is guaranteed to be
              unique.
            type: string
          style:
            description: Style information of the tag (color, size, etc.).
            type: string
          style_new:
            $ref: '#/components/schemas/tag-style-summary'
        required:
        - name
        type: object
      title: tag-summary
    tag-type:
      description: An enum to specify the behaviour of values for this tag.
      enum:
      - annotation
      - tag
      type: string
    tag-with-value:
      properties:
        id:
          $ref: '#/components/schemas/tag-summary'
        tag:
          $ref: '#/components/schemas/tag-summary'
        value:
          description: The value for the object's association with the tag.
          type: string
      required:
      - id
      - tag
      title: tag-with-value
      type: object
    tags-create-request:
      description: The request to create a new tag.
      properties:
        allowed_values:
          description: |
            The allowed values for the tag, or empty if no values are
            permitted.
          items:
            type: string
          type: array
        description:
          description: The description for the tag.
          type: string
        name:
          description: |
            The name for the tag, which must be unique across all tags.
          type: string
        style:
          deprecated: true
          description: Style information for the tag.
          type: string
        style_new:
          $ref: '#/components/schemas/tag-style'
        type:
          $ref: '#/components/schemas/tag-type'
      required:
      - name
      title: tags-create-request
      type: object
    tags-create-response:
      description: The response to creating a new tag.
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
      - tag
      title: tags-create-response
      type: object
      x-go-name: TagsCreateResponseBody
    tags-delete-request:
      description: The request to delete a tag.
      properties:
        id:
          description: The ID of the tag to delete.
          example: don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          type: string
      required:
      - id
      title: tags-delete-request
      type: object
    tags-delete-response:
      description: The response for deleting a tag.
      title: tags-delete-response
      type: object
      x-go-name: TagsDeleteResponseBody
    tags-get-request:
      description: The request to get a tag's information.
      properties:
        id:
          description: The requested tag's ID.
          example: don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          type: string
      required:
      - id
      title: tags-get-request
      type: object
    tags-get-response:
      description: The response to getting a tag's information.
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
      - tag
      title: tags-get-response
      type: object
      x-go-name: TagsGetResponseBody
    tags-list-request:
      description: The request to get information about a list of tags.
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of tags to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        name:
          description: Filters for tags with the provided names.
          items:
            type: string
          type: array
      title: tags-list-request
      type: object
    tags-list-response:
      description: The response to listing the tags.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        tags:
          description: The list of tags.
          items:
            $ref: '#/components/schemas/tag'
          type: array
      required:
      - tags
      title: tags-list-response
      type: object
      x-go-name: TagsListResponseBody
    tags-update-allowed-values:
      description: Specifies an update to a tag's allowed values.
      properties:
        set:
          description: Sets the allowed values for the tag.
          items:
            type: string
          type: array
      title: tags-update-allowed-values
      type: object
    tags-update-request:
      description: The request to update a tag.
      properties:
        allowed_values:
          $ref: '#/components/schemas/tags-update-allowed-values'
        description:
          description: The updated description of the tag.
          type: string
        id:
          description: The ID of the tag to update.
          example: don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          type: string
        name:
          description: |
            The updated name of the tag. The name must be unique across all
            tags.
          type: string
        style:
          description: The updated style information for the tag.
          type: string
        style_new:
          $ref: '#/components/schemas/tag-style'
        type:
          $ref: '#/components/schemas/tag-type'
      required:
      - id
      title: tags-update-request
      type: object
    tags-update-response:
      description: The response for updating a tag.
      properties:
        tag:
          $ref: '#/components/schemas/tag'
      required:
      - tag
      title: tags-update-response
      type: object
      x-go-name: TagsUpdateResponseBody
    target-object-type:
      description: Type of target object for a link.
      enum:
      - issue
      - ticket
      type: string
    task:
      allOf:
      - $ref: '#/components/schemas/work-base'
      - properties:
          actual_effort:
            description: Actual effort to complete the task.
            format: double
            type: number
          applies_to_versions:
            description: Part versions relevant to the work.
            items:
              type: string
            type: array
          embedded:
            description: |
              Whether this task is an embedded task of another work or not.
            type: boolean
          estimated_effort:
            description: Estimated effort to complete the task.
            format: double
            type: number
          priority:
            $ref: '#/components/schemas/task-priority'
          start_date:
            description: Timestamp when the task was started.
            format: date-time
            type: string
        type: object
      title: task
    task-priority:
      description: Priority of the work based upon impact and criticality.
      enum:
      - p0
      - p1
      - p2
      - p3
      type: string
    task-summary:
      allOf:
      - $ref: '#/components/schemas/work-base-summary'
      title: task-summary
    template:
      description: |
        Template refers to the semver formatted version of a flow and its
        source code. Once a new version of a flow is released (i.e. marketplace
        item is updated and  transitioned to state 'published') all the
        installations of such items will be updated to the new flow.
      properties:
        artifact_id:
          $ref: '#/components/schemas/artifact-summary'
        version:
          description: |
            Semver formatted version of the template. Version needs to match
            the following pattern: 'major.minor.fix'. An example of a valid
            version is '1.2.3' or '0.0.1'.
          type: string
      title: template
      type: object
    tenant-fragment:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-base'
      title: tenant-fragment
    tenant-fragment-private:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-private-base'
      title: tenant-fragment-private
    tenant-fragment-private-summary:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-private-base-summary'
      title: tenant-fragment-private-summary
    tenant-fragment-summary:
      allOf:
      - $ref: '#/components/schemas/custom-schema-fragment-base-summary'
      title: tenant-fragment-summary
    ticket:
      allOf:
      - $ref: '#/components/schemas/work-base'
      - properties:
          applies_to_versions:
            description: Part versions relevant to the work.
            items:
              type: string
            type: array
          group:
            $ref: '#/components/schemas/group-summary'
          rev_org:
            $ref: '#/components/schemas/org-summary'
          severity:
            $ref: '#/components/schemas/ticket-severity'
          sla:
            $ref: '#/components/schemas/sla-summary'
          sla_summary:
            $ref: '#/components/schemas/archetype-sla-summary'
        type: object
      title: ticket
    ticket-creation-group:
      description: Preferences group for Ticket creation.
      properties:
        default_ticket_owner_id:
          $ref: '#/components/schemas/user-summary'
        default_ticket_part_id:
          $ref: '#/components/schemas/part-summary'
      title: ticket-creation-group
      type: object
    ticket-severity:
      description: Severity of the ticket.
      enum:
      - blocker
      - high
      - low
      - medium
      type: string
    ticket-summary:
      allOf:
      - $ref: '#/components/schemas/work-base-summary'
      - properties:
          rev_org:
            $ref: '#/components/schemas/org-summary'
          severity:
            $ref: '#/components/schemas/ticket-severity'
        type: object
      title: ticket-summary
    time-range:
      description: A time range object.
      properties:
        end_time:
          description: Timestamp representing the end of the time range.
          format: date-time
          type: string
        start_time:
          description: Timestamp representing the start of the time range.
          format: date-time
          type: string
      required:
      - end_time
      - start_time
      title: time-range
      type: object
    timeline-change-event:
      allOf:
      - $ref: '#/components/schemas/timeline-entry-base'
      - properties:
          event:
            $ref: '#/components/schemas/timeline-event'
        type: object
      title: timeline-change-event
    timeline-change-event-summary:
      allOf:
      - $ref: '#/components/schemas/timeline-entry-base-summary'
      title: timeline-change-event-summary
    timeline-comment:
      allOf:
      - $ref: '#/components/schemas/timeline-entry-base'
      - properties:
          artifacts:
            description: The artifacts for the comment.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          attachments:
            description: The attachments for the comment.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          body:
            description: |
              The comment's body. If the comment has been deleted, then no body
              will appear in the response.
            type: string
          body_type:
            $ref: '#/components/schemas/timeline-comment-body-type'
          references:
            description: The objects referenced in the comment.
            items:
              $ref: '#/components/schemas/atom-summary'
            type: array
          snap_kit_body:
            description: The SnapKit Body of the comment.
            type: object
        type: object
      title: timeline-comment
    timeline-comment-body-type:
      description: The type of the body to use for the comment.
      enum:
      - snap_kit
      - text
      type: string
    timeline-comment-summary:
      allOf:
      - $ref: '#/components/schemas/timeline-entry-base-summary'
      title: timeline-comment-summary
    timeline-comments-create-request:
      properties:
        artifact_ids:
          description: The ID of the artifacts to the comment.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        attachment_ids:
          description: The ID of the attachments to the comment.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        body:
          description: The comment's body.
          type: string
        body_type:
          $ref: '#/components/schemas/timeline-comment-body-type'
        id:
          description: The ID of the object to create the comment for.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        snap_kit_body:
          description: The SnapKit body of the comment.
          type: object
      required:
      - id
      title: timeline-comments-create-request
      type: object
    timeline-comments-create-response:
      properties:
        entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
      - entry
      title: timeline-comments-create-response
      type: object
      x-go-name: TimelineCommentsCreateResponseBody
    timeline-entries-collection:
      description: Describes collections of timeline entries.
      enum:
      - comments
      - events
      type: string
    timeline-entries-create-request:
      description: The request to create a timeline entry for an object.
      discriminator:
        mapping:
          timeline_comment: '#/components/schemas/timeline-entries-create-request-timeline-comment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/timeline-entries-create-request-timeline-comment'
      properties:
        object:
          description: The ID of the object to create the timeline entry for.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        type:
          $ref: '#/components/schemas/timeline-entries-create-request-type'
        visibility:
          $ref: '#/components/schemas/timeline-entry-visibility'
      required:
      - object
      - type
      title: timeline-entries-create-request
      type: object
    timeline-entries-create-request-timeline-comment:
      properties:
        artifacts:
          description: The IDs of the artifacts attached to the comment.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        body:
          description: The comment's body.
          type: string
        body_type:
          $ref: '#/components/schemas/timeline-comment-body-type'
        snap_kit_body:
          description: The SnapKit body of the comment.
          type: object
      title: timeline-entries-create-request-timeline-comment
      type: object
    timeline-entries-create-request-type:
      enum:
      - timeline_comment
      type: string
    timeline-entries-create-response:
      description: The response to creating a timeline entry for an object.
      properties:
        timeline_entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
      - timeline_entry
      title: timeline-entries-create-response
      type: object
      x-go-name: TimelineEntriesCreateResponseBody
    timeline-entries-delete-request:
      description: The request to delete a timeline entry from an object.
      properties:
        id:
          description: The ID of the timeline entry to delete.
          type: string
      required:
      - id
      title: timeline-entries-delete-request
      type: object
    timeline-entries-delete-response:
      description: |
        The response to deleting a new timeline entry from an object.
      title: timeline-entries-delete-response
      type: object
      x-go-name: TimelineEntriesDeleteResponseBody
    timeline-entries-get-request:
      description: The request to get a timeline entry.
      properties:
        id:
          description: The ID of the timeline entry to get.
          type: string
      required:
      - id
      title: timeline-entries-get-request
      type: object
    timeline-entries-get-response:
      description: The request to getting a timeline entry.
      properties:
        entry:
          $ref: '#/components/schemas/timeline-entry'
        timeline_entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
      - entry
      - timeline_entry
      title: timeline-entries-get-response
      type: object
      x-go-name: TimelineEntriesGetResponseBody
    timeline-entries-list-request:
      description: The request to list timeline entries for an object.
      properties:
        collections:
          description: |
            The collection(s) to list entries from, otherwise if not provided,
            all entries are returned.
          items:
            $ref: '#/components/schemas/timeline-entries-collection'
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        entry:
          description: |
            The entry to begin iteration from. Note the entry will *not* be
            included in the result (exclusive). If provided, then no cursor
            should be set.
          type: string
        id:
          deprecated: true
          description: The ID of the object to list timeline entries for.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        limit:
          description: |
            The maximum number of entries to return. If not set, then this
            defaults to `50`.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        object:
          description: The ID of the object to list timeline entries for.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      title: timeline-entries-list-request
      type: object
    timeline-entries-list-response:
      description: The response to listing timeline entries for an object.
      properties:
        cursor:
          deprecated: true
          description: |
            The cursor that should be used to resume iteration, otherwise if
            not provided, then iteration has completed.
          type: string
        entries:
          deprecated: true
          description: The timeline entries for the object.
          items:
            $ref: '#/components/schemas/timeline-entry'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        timeline_entries:
          description: The timeline entries for the object.
          items:
            $ref: '#/components/schemas/timeline-entry'
          type: array
      required:
      - entries
      - timeline_entries
      title: timeline-entries-list-response
      type: object
      x-go-name: TimelineEntriesListResponseBody
    timeline-entries-update-request:
      description: The request to update a timeline entry.
      discriminator:
        mapping:
          timeline_comment: '#/components/schemas/timeline-entries-update-request-timeline-comment'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/timeline-entries-update-request-timeline-comment'
      properties:
        id:
          description: The ID of the timeline entry to update.
          type: string
        type:
          $ref: '#/components/schemas/timeline-entries-update-request-type'
      required:
      - id
      - type
      title: timeline-entries-update-request
      type: object
    timeline-entries-update-request-timeline-comment:
      properties:
        artifacts:
          $ref: '#/components/schemas/timeline-entries-update-request-timeline-comment-artifacts'
        body:
          description: The updated comment's body.
          type: string
        body_type:
          $ref: '#/components/schemas/timeline-comment-body-type'
        snap_kit_body:
          description: The SnapKit body of the comment.
          type: object
      title: timeline-entries-update-request-timeline-comment
      type: object
    timeline-entries-update-request-timeline-comment-artifacts:
      properties:
        add:
          description: |
            Adds the provided artifacts to the comment. An artifact cannot be
            added more than once, i.e. nothing is done if the artifact is
            already attached. Mutually exclusive with `set`.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        remove:
          description: |
            Removes the provided artifacts from the comment. If an artifact is
            not present, then it's ignored. Mututally exclusive with `set`.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        set:
          description: Sets the field to the provided artifacts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
      title: timeline-entries-update-request-timeline-comment-artifacts
      type: object
    timeline-entries-update-request-type:
      enum:
      - timeline_comment
      type: string
    timeline-entries-update-response:
      description: The response to updating a timeline entry.
      properties:
        timeline_entry:
          $ref: '#/components/schemas/timeline-entry'
      required:
      - timeline_entry
      title: timeline-entries-update-response
      type: object
      x-go-name: TimelineEntriesUpdateResponseBody
    timeline-entry:
      discriminator:
        mapping:
          timeline_change_event: '#/components/schemas/timeline-change-event'
          timeline_comment: '#/components/schemas/timeline-comment'
          timeline_huddle: '#/components/schemas/timeline-huddle'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/timeline-change-event'
      - $ref: '#/components/schemas/timeline-comment'
      - $ref: '#/components/schemas/timeline-huddle'
      properties:
        type:
          $ref: '#/components/schemas/timeline-entry-type'
      required:
      - type
      title: timeline-entry
      type: object
    timeline-entry-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          pin:
            $ref: '#/components/schemas/timeline-pin'
          reactions:
            description: The reactions to the entry.
            items:
              $ref: '#/components/schemas/timeline-reaction'
            type: array
          thread:
            $ref: '#/components/schemas/timeline-thread'
          visibility:
            $ref: '#/components/schemas/timeline-entry-visibility'
        type: object
      title: timeline-entry-base
    timeline-entry-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: timeline-entry-base-summary
    timeline-entry-type:
      enum:
      - timeline_change_event
      - timeline_comment
      - timeline_huddle
      type: string
    timeline-entry-visibility:
      description: |
        The visibility of the entry. If 'private', then the entry is only
        visible to the creator, otherwise if not set, then the entry has
        default visibility.
      enum:
      - private
      type: string
    timeline-event:
      description: A timeline event.
      properties:
        annotated:
          $ref: '#/components/schemas/event-annotated'
        created:
          $ref: '#/components/schemas/event-created'
        deleted:
          $ref: '#/components/schemas/event-deleted'
        linked:
          $ref: '#/components/schemas/event-linked'
        type:
          $ref: '#/components/schemas/timeline-event-type'
        updated:
          $ref: '#/components/schemas/event-updated'
      title: timeline-event
      type: object
    timeline-event-type:
      description: The type of the event.
      enum:
      - annotated
      - created
      - deleted
      - linked
      - updated
      type: string
    timeline-huddle:
      allOf:
      - $ref: '#/components/schemas/timeline-entry-base'
      - properties:
          status:
            $ref: '#/components/schemas/timeline-huddle-status'
        required:
        - status
        type: object
      title: timeline-huddle
    timeline-huddle-created:
      description: Describes a huddle that was created but has not yet started.
      title: timeline-huddle-created
      type: object
    timeline-huddle-ended:
      description: Describes a huddle entry that has ended.
      properties:
        ended_date:
          description: The timestamp when the huddle had ended.
          format: date-time
          type: string
        participants:
          description: |
            A subset of the participants in the huddle, which are the users
            that joined the huddle at some point during its lifetime.
          items:
            $ref: '#/components/schemas/user-summary'
          type: array
        started_date:
          description: The timestamp when the huddle had started.
          format: date-time
          type: string
        total_participants:
          description: The total number of participants.
          format: int32
          type: integer
      required:
      - ended_date
      - started_date
      title: timeline-huddle-ended
      type: object
    timeline-huddle-started:
      description: Describes a huddle that has started.
      properties:
        room:
          description: The ID of the room for the huddle.
          type: string
        room_v1:
          description: The ID of the room for the huddle.
          type: string
        started_date:
          description: The timestamp when the huddle was started.
          format: date-time
          type: string
        total_users:
          description: The total number of users in the huddle.
          format: int32
          type: integer
        users:
          description: A subset of the users that are in the huddle.
          items:
            $ref: '#/components/schemas/user-summary'
          type: array
      required:
      - started_date
      title: timeline-huddle-started
      type: object
    timeline-huddle-status:
      discriminator:
        mapping:
          created: '#/components/schemas/timeline-huddle-created'
          ended: '#/components/schemas/timeline-huddle-ended'
          started: '#/components/schemas/timeline-huddle-started'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/timeline-huddle-created'
      - $ref: '#/components/schemas/timeline-huddle-ended'
      - $ref: '#/components/schemas/timeline-huddle-started'
      properties:
        type:
          $ref: '#/components/schemas/timeline-huddle-status-type'
      required:
      - type
      title: timeline-huddle-status
      type: object
    timeline-huddle-status-type:
      enum:
      - created
      - ended
      - started
      type: string
    timeline-huddle-summary:
      allOf:
      - $ref: '#/components/schemas/timeline-entry-base-summary'
      title: timeline-huddle-summary
    timeline-pin:
      description: Information about a pinned entry.
      properties:
        pinned_by:
          $ref: '#/components/schemas/user-summary'
        pinned_date:
          description: Time when the object was pinned.
          format: date-time
          type: string
      title: timeline-pin
      type: object
    timeline-reaction:
      description: Reaction.
      properties:
        emoji:
          description: The reaction's emoji.
          type: string
        reacted:
          description: |
            Whether the requesting user reacted with this reaction type.
          type: boolean
        total_users:
          description: The total number of users with this reaction type.
          format: int32
          type: integer
      title: timeline-reaction
      type: object
    timeline-thread:
      description: Thread.
      properties:
        first_replies_by:
          description: |
            A subset of the first users in the thread. They will be ordered by
            their appearance, beginning from the first reply and onwards. This
            should be used only as a hint and should not be relied upon to be
            present.
          items:
            $ref: '#/components/schemas/user-summary'
          type: array
        last_reply_by:
          $ref: '#/components/schemas/user-summary'
        last_reply_date:
          description: Time of the last reply.
          format: date-time
          type: string
        total_replies:
          description: The total number of replies in the thread.
          format: int32
          type: integer
        total_users:
          description: The total number of unique users in the thread.
          format: int32
          type: integer
      required:
      - first_replies_by
      title: timeline-thread
      type: object
    timestamp:
      properties:
        nanos:
          format: int32
          type: integer
        seconds:
          format: int64
          type: integer
      required:
      - nanos
      - seconds
      title: timestamp
      type: object
    track-event:
      properties:
        name:
          description: Name of the event.
          type: string
        payload:
          description: Payload of the event
          type: object
      required:
      - name
      - payload
      title: track-event
      type: object
    track-events-publish-request:
      properties:
        events_list:
          items:
            $ref: '#/components/schemas/track-event'
          type: array
      required:
      - events_list
      title: track-events-publish-request
      type: object
    track-events-publish-response:
      title: track-events-publish-response
      type: object
      x-go-name: TrackEventsPublishResponseBody
    translate-request:
      properties:
        contents:
          description: The content to translate.
          items:
            $ref: '#/components/schemas/translate-request-content'
          type: array
        input_language:
          description: |
            The language of the input text, if not set the API will attempt to
            identify it.
          type: string
        mime_type:
          description: The format of the source text, for example, 'text/html'.
          type: string
        target_language:
          description: The language to use for translation of the input text.
          type: string
      required:
      - contents
      - target_language
      title: translate-request
      type: object
    translate-request-content:
      properties:
        key:
          description: |
            A unique identifier for the text, for example, 'comment_id'.
          type: string
        text:
          description: The input text to translate.
          type: string
      required:
      - text
      title: translate-request-content
      type: object
    translate-response:
      properties:
        translations:
          description: Translated content.
          items:
            $ref: '#/components/schemas/translation'
          type: array
      required:
      - translations
      title: translate-response
      type: object
      x-go-name: TranslateResponseBody
    translation:
      properties:
        detected_language:
          description: |
            The detected language of the input text when the input language is
            not specified.
          type: string
        key:
          description: |
            A unique identifier for the text e.g comment_id. This is copied
            over from the TranslationRequest content.
          type: string
        text:
          description: The text translated to target language.
          type: string
      required:
      - text
      title: translation
      type: object
    type-ahead-context:
      description: Fields required for typeahead recommendation.
      properties:
        applies_to_part:
          description: The part that the work applies to.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        applies_to_part_id:
          deprecated: true
          description: The part that the work applies to.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        body:
          $ref: '#/components/schemas/type-ahead-context-text-context'
        title:
          $ref: '#/components/schemas/type-ahead-context-text-context'
      title: type-ahead-context
      type: object
    type-ahead-context-text-context:
      description: |
        Text context is used to represent the context for any text field.
      properties:
        after:
          description: The text after the cursor.
          type: string
        before:
          description: The text before the cursor.
          type: string
      title: type-ahead-context-text-context
      type: object
    type-ahead-request:
      description: Typeahead request.
      properties:
        action:
          $ref: '#/components/schemas/user-action'
        context:
          $ref: '#/components/schemas/type-ahead-context'
        requested_field:
          $ref: '#/components/schemas/type-ahead-requested-field'
      required:
      - context
      - requested_field
      title: type-ahead-request
      type: object
    type-ahead-requested-field:
      description: Field types for typeahead recommendation.
      enum:
      - body
      - title
      type: string
    type-ahead-response:
      description: Typeahead response.
      properties:
        body:
          $ref: '#/components/schemas/type-ahead-response-text-recommendation'
        title:
          $ref: '#/components/schemas/type-ahead-response-text-recommendation'
        version:
          description: The version of the type ahead model.
          type: string
      required:
      - body
      - title
      title: type-ahead-response
      type: object
      x-go-name: TypeAheadResponseBody
    type-ahead-response-text-recommendation:
      description: The text recommedation returned by typeahead.
      properties:
        after:
          description: The text after the cursor.
          type: string
        before:
          description: The text before the cursor.
          type: string
        recommendation:
          description: The text recommendation.
          type: string
      required:
      - after
      - before
      - recommendation
      title: type-ahead-response-text-recommendation
      type: object
    unit:
      description: |
        Unit encapsulates the name of the unit and the type of the unit. For
        example, '#Number of API calls' where name is 'number_of_api_calls' and
        type is 'number'.
      properties:
        name:
          description: |
            This represents human readable unit name of the UOM For example,
            number of API calls.
          type: string
        type:
          $ref: '#/components/schemas/unit-type'
      required:
      - name
      - type
      title: unit
      type: object
    unit-summary:
      description: |
        Unit encapsulates the name of the unit and the type of the unit. For
        example, '#Number of API calls' where name is 'number_of_api_calls' and
        type is 'number'.
      properties:
        name:
          description: |
            This represents human readable unit name of the UOM For example,
            number of API calls.
          type: string
        type:
          $ref: '#/components/schemas/unit-type'
      required:
      - name
      - type
      title: unit-summary
      type: object
    unit-type:
      description: |
        This defines the UOM unit type. For example, for 'number of video
        calls', unit type will be a number.
      enum:
      - boolean
      - number
      type: string
    unlink-rev-user-from-rev-org-request:
      description: A request to unlink a rev user from a rev org.
      properties:
        rev_org_don:
          description: The don of the rev org to unlink the rev user from.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        user_don:
          description: The don of the rev user to unlink.
          type: string
      required:
      - rev_org_don
      - user_don
      title: unlink-rev-user-from-rev-org-request
      type: object
    unlink-rev-user-from-rev-org-response:
      description: The response to unlink a rev user from a rev org.
      properties:
        rev_user:
          $ref: '#/components/schemas/rev-user'
      required:
      - rev_user
      title: unlink-rev-user-from-rev-org-response
      type: object
      x-go-name: UnlinkRevUserFromRevOrgResponseBody
    unschedule-data-collection-request:
      properties:
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      title: unschedule-data-collection-request
      type: object
    unschedule-data-collection-response:
      title: unschedule-data-collection-response
      type: object
      x-go-name: UnscheduleDataCollectionResponseBody
    unschedule-discovery-request:
      properties:
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      title: unschedule-discovery-request
      type: object
    unschedule-discovery-response:
      title: unschedule-discovery-response
      type: object
      x-go-name: UnscheduleDiscoveryResponseBody
    uom:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          aggregation_details:
            $ref: '#/components/schemas/aggregation-detail'
          description:
            description: Description of the UOM.
            type: string
          dimensions:
            description: |
              The list of dimensions that can be emitted along with the metering
              data.
            items:
              type: string
            type: array
          is_enabled:
            description: |
              If set to true, then the UOM can be configured as part of
              entitlements in skus and metering data only for the enabled uoms
              will be passed through the metering pipeline.
            type: boolean
          meter_name:
            description: Human readable meter name of the UOM.
            type: string
          meter_scope:
            $ref: '#/components/schemas/uom-meter-scope'
          name:
            description: Human readable name of the UOM.
            type: string
          part:
            $ref: '#/components/schemas/part-summary'
          product:
            $ref: '#/components/schemas/part-summary'
          unit:
            $ref: '#/components/schemas/unit'
        required:
        - aggregation_details
        - is_enabled
        - meter_name
        - meter_scope
        - name
        - product
        - unit
        type: object
      title: uom
    uom-meter-scope:
      description: |
        The granularity at which the metering ingestion data is to be emitted
        for the UOM.
      enum:
      - org
      - user
      type: string
    uom-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          aggregation_details:
            $ref: '#/components/schemas/aggregation-detail-summary'
          meter_name:
            description: Human readable meter name of the UOM.
            type: string
          name:
            description: Human readable name of the UOM.
            type: string
          unit:
            $ref: '#/components/schemas/unit-summary'
        required:
        - aggregation_details
        - meter_name
        - name
        - unit
        type: object
      title: uom-summary
    uoms-create-request:
      properties:
        aggregation_detail:
          $ref: '#/components/schemas/aggregation-detail'
        description:
          description: Description of the UOM.
          type: string
        dimensions:
          description: |
            The list of dimensions that can be emitted along with the metering
            data. These might be needed in metering calculation or can be used
            in the analytics service
          items:
            type: string
          type: array
        meter_name:
          description: Human readable meter name of the UOM.
          type: string
        meter_scope:
          $ref: '#/components/schemas/uom-meter-scope'
        name:
          description: Human readable name of the UOM.
          type: string
        part_id:
          description: The part ID for which the UOM is defined.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        product_id:
          description: The product ID for which the UOM is defined.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        unit:
          $ref: '#/components/schemas/unit'
      required:
      - aggregation_detail
      - meter_name
      - meter_scope
      - name
      - product_id
      - unit
      title: uoms-create-request
      type: object
    uoms-create-response:
      properties:
        uom:
          $ref: '#/components/schemas/uom'
      required:
      - uom
      title: uoms-create-response
      type: object
      x-go-name: UomsCreateResponseBody
    uoms-delete-request:
      properties:
        id:
          description: The UOM's DON.
          type: string
      required:
      - id
      title: uoms-delete-request
      type: object
    uoms-get-request:
      properties:
        id:
          description: The UOM's DON.
          type: string
      required:
      - id
      title: uoms-get-request
      type: object
    uoms-get-response:
      properties:
        uom:
          $ref: '#/components/schemas/uom'
      required:
      - uom
      title: uoms-get-response
      type: object
      x-go-name: UomsGetResponseBody
    uoms-list-request:
      properties:
        aggregation_types:
          description: |
            The list of aggregation types which are to be aggregated.
          items:
            $ref: '#/components/schemas/aggregation-detail-aggregation-type'
          type: array
        ids:
          description: The list of UOM DONs which are to be aggregated.
          items:
            type: string
          type: array
        meter_names:
          description: The list of meter names which are to be aggregated.
          items:
            type: string
          type: array
        part_ids:
          description: The list of part DONs which are to be aggregated.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        product_ids:
          description: The list of product DONs which are to be aggregated.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        sort_by:
          description: |
            List of fields to sort the UOMs, by and how to sort them. Default
            is to sort by created_date in descending order.
          items:
            type: string
          type: array
        unit_types:
          description: The list of unit types which are to be aggregated.
          items:
            $ref: '#/components/schemas/unit-type'
          type: array
      title: uoms-list-request
      type: object
    uoms-list-response:
      properties:
        uoms:
          description: The list of UOMs.
          items:
            $ref: '#/components/schemas/uom'
          type: array
      required:
      - uoms
      title: uoms-list-response
      type: object
      x-go-name: UomsListResponseBody
    uoms-update-request:
      properties:
        aggregation_type:
          $ref: '#/components/schemas/aggregation-detail-aggregation-type'
        description:
          description: Description of the UOM.
          type: string
        id:
          description: The UOM's DON.
          type: string
        is_enabled:
          description: |
            To enable/disable the UOM. If the value is set to true, then the
            UOM can be configured as part of entitlements in skus.Also,
            metering data only for the enabled UOM's will be passed through the
            metering pipeline
          type: boolean
        name:
          description: Human readable name of the UOM.
          type: string
        unit:
          description: Unit name of the UOM.
          type: string
      required:
      - id
      title: uoms-update-request
      type: object
    uoms-update-response:
      properties:
        uom:
          $ref: '#/components/schemas/uom'
      required:
      - uom
      title: uoms-update-response
      type: object
      x-go-name: UomsUpdateResponseBody
    update-availability-preferences-group:
      description: Update object for AvailabilityPreferencesGroup.
      properties:
        manual_away:
          description: Manually set presence to away
          type: boolean
      title: update-availability-preferences-group
      type: object
    update-discovery-profile-request:
      properties:
        extractors:
          $ref: '#/components/schemas/extractors'
        id:
          description: The ID of the discovery profile to update.
          type: string
        mergers:
          $ref: '#/components/schemas/dev-rev-partitioner-merger'
        other_data_source_dev_org:
          description: |
            The updated ID of other data source Dev org to run discovery.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
        partitioners:
          $ref: '#/components/schemas/dev-rev-partitioner-merger'
        profile_name:
          description: The updated name of the discovery profile.
          type: string
      required:
      - id
      title: update-discovery-profile-request
      type: object
    update-discovery-profile-response:
      properties:
        discovery_profile:
          $ref: '#/components/schemas/discovery-profile'
      required:
      - discovery_profile
      title: update-discovery-profile-response
      type: object
      x-go-name: UpdateDiscoveryProfileResponseBody
    update-discovery-settings-request:
      properties:
        data_collection_app_settings:
          $ref: '#/components/schemas/data-collection-app-settings'
        discovery_app_settings:
          $ref: '#/components/schemas/discovery-app-settings'
        discovery_profile_id:
          description: Discovery profile id associated with devorg.
          type: string
        github_repos:
          description: Discovery GitHub repositories settings for devorg.
          items:
            $ref: '#/components/schemas/discovery-github-repos-settings'
          type: array
        other_dev_org:
          description: |
            Optional Dev organization ID. This allows running on another Dev
            organization, as long as the logged in user has access to it.
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      title: update-discovery-settings-request
      type: object
    update-discovery-settings-response:
      properties:
        discovery_settings:
          $ref: '#/components/schemas/discovery-settings'
      required:
      - discovery_settings
      title: update-discovery-settings-response
      type: object
      x-go-name: UpdateDiscoverySettingsResponseBody
    update-entitlements:
      properties:
        add_entitlements:
          description: Entitlements to be added under the SKU.
          items:
            $ref: '#/components/schemas/update-entitlements-add-update-entitlement'
          type: array
        remove_entitlements:
          description: |
            Entitlements to be removed from the SKU. In case, a SKU is
            versioned orinherited, then entitlements from the parent SKU can be
            removed.
          items:
            $ref: '#/components/schemas/update-entitlements-remove-entitlement'
          type: array
        update_entitlements:
          description: |
            Entitlements to be updated in the SKU. In case, a SKU is versioned
            orinherited, then entitlements from the parent SKU can be updated.
          items:
            $ref: '#/components/schemas/update-entitlements-add-update-entitlement'
          type: array
      title: update-entitlements
      type: object
    update-entitlements-add-update-entitlement:
      properties:
        duration:
          $ref: '#/components/schemas/duration'
        quantity:
          description: |
            Quantity, that the entitlement is entitled to use for the specified
            UOM ID. In case of UOM being a boolean type (like
            inline_compression, SAML, OAUTH) then quantity will simply be 0/1.
          format: int32
          type: integer
        scope:
          $ref: '#/components/schemas/entitlement-scope'
        uom_id:
          description: UOM ID of entitlement to be added/updated in the SKU.
          type: string
      required:
      - uom_id
      title: update-entitlements-add-update-entitlement
      type: object
    update-entitlements-remove-entitlement:
      properties:
        uom_id:
          description: UOM ID of entitlement to be removed from the SKU.
          type: string
      required:
      - uom_id
      title: update-entitlements-remove-entitlement
      type: object
    update-event-source-setup-instructions:
      properties:
        content:
          description: Instructions content
          type: string
        format:
          $ref: '#/components/schemas/instructions-format'
      title: update-event-source-setup-instructions
      type: object
    update-flow-name-reference-mapping:
      properties:
        name:
          description: |
            Name by which the object is being referred in the flow. May be
            different from the value of the `name` field (if present) of the
            object.
          type: string
        reference:
          description: Reference to the actual object.
          type: string
      title: update-flow-name-reference-mapping
      type: object
    update-flow-name-value-pair:
      properties:
        name:
          description: Name
          type: string
        value:
          description: Value
          type: string
      title: update-flow-name-value-pair
      type: object
    update-flow-setup-resource:
      properties:
        resource:
          $ref: '#/components/schemas/update-flow-name-reference-mapping'
        resource_type:
          $ref: '#/components/schemas/setup-resource-resource-type'
      title: update-flow-setup-resource
      type: object
    update-function-definition:
      properties:
        config_policy:
          $ref: '#/components/schemas/update-policy-instance'
        function_name:
          description: Name of the function.
          type: string
      title: update-function-definition
      type: object
    update-general-preferences-group:
      description: Update object for GeneralPreferencesGroup.
      properties:
        availabilty:
          $ref: '#/components/schemas/update-availability-preferences-group'
      title: update-general-preferences-group
      type: object
    update-global-input:
      properties:
        name:
          description: Name
          type: string
        value:
          description: Value
          type: string
      title: update-global-input
      type: object
    update-keyring:
      properties:
        categories:
          $ref: '#/components/schemas/update-keyring-categories'
        description:
          description: Description of the keyring.
          type: string
        external_org_id:
          description: External organization ID of the keyring.
          type: string
        key:
          description: Secret key.
          type: string
        name:
          description: Name of the keyring.
          type: string
        scope:
          $ref: '#/components/schemas/keyring-scope'
      title: update-keyring
      type: object
    update-keyring-categories:
      properties:
        set:
          description: |
            The updated categories, which will replace current categories.
          items:
            type: string
          type: array
      title: update-keyring-categories
      type: object
    update-microflow-definition:
      properties:
        description:
          description: Description of the microflow
          type: string
        name:
          description: Name of the microflow
          type: string
        publish_status:
          $ref: '#/components/schemas/microflow-definition-publish-status'
        states:
          description: |
            Possible states of the object on which microflow is defined
          items:
            $ref: '#/components/schemas/update-microflow-target-object-state'
          type: array
        transitions:
          description: Possible transitions in the microflow
          items:
            $ref: '#/components/schemas/update-microflow-target-object-transition'
          type: array
      title: update-microflow-definition
      type: object
    update-microflow-target-object-state:
      properties:
        description:
          description: Description of the state
          type: string
        name:
          description: Name of the state
          type: string
      title: update-microflow-target-object-state
      type: object
    update-microflow-target-object-transition:
      properties:
        allowed_triggers:
          description: Set of triggers which could execute this transition
          items:
            $ref: '#/components/schemas/update-microflow-trigger-definition'
          type: array
        conditions:
          $ref: '#/components/schemas/update-policy-instance'
        description:
          description: Description of the transition
          type: string
        from_states:
          description: Set of source states for the transition
          items:
            type: string
          type: array
        global:
          description: Whether this is a global transition
          type: boolean
        initial:
          description: Whether this is an initial transition
          type: boolean
        is_ui_action:
          description: Whether a button is displayed for the transition
          type: boolean
        name:
          description: The name of the transition, unique within a microflow
          type: string
        post_function_definitions_ids:
          description: Functions executed asynchronously, on transition success
          items:
            type: string
          type: array
        pre_function_definitions_ids:
          description: Functions executed synchronously with state change
          items:
            type: string
          type: array
        to_state:
          description: The destination state of the transition
          type: string
        validations:
          $ref: '#/components/schemas/update-policy-instance'
      title: update-microflow-target-object-transition
      type: object
    update-microflow-trigger-definition:
      properties:
        config:
          description: Configuration defining applicable events from the source
          type: string
        event_source_id:
          description: ID of the event source being subscribed
          type: string
      title: update-microflow-trigger-definition
      type: object
    update-notification-preferences-group:
      description: Update object for NotificationPreferencesGroup.
      properties:
        email_notifications:
          $ref: '#/components/schemas/notification-preferences-group-email-notifications'
      title: update-notification-preferences-group
      type: object
    update-org-preferences:
      description: Update object for OrgPreferences.
      properties:
        autoresponse_initial_message:
          description: Automated initial response message.
          type: string
        new_conversation_notified_to:
          description: |
            Users who are notified when a new conversation is created.
          items:
            type: string
          type: array
        rev_portal:
          $ref: '#/components/schemas/update-rev-portal-group'
        support:
          $ref: '#/components/schemas/update-support-preferences-group'
        weekly_analytics_report_recipients:
          description: |
            Groups or users to send the analytics report to. If not specified,
            send to all users in the organization.
          items:
            type: string
          type: array
      title: update-org-preferences
      type: object
    update-phone-number:
      description: Update object for PhoneNumber.
      properties:
        e164_number:
          description: The phone number in e164 format.
          type: string
        extension:
          description: An optional extension.
          type: string
      title: update-phone-number
      type: object
    update-policy-instance:
      properties:
        name:
          description: Name of the policy
          type: string
        parameters:
          description: JSON string storing values for each templated variable.
          type: string
        policy:
          description: Rego policy string
          type: string
        system_parseable:
          description: Whether the policy is system generated
          type: boolean
      title: update-policy-instance
      type: object
    update-postal-address:
      description: Update object for PostalAddress.
      properties:
        country:
          description: Country name component.
          type: string
        formatted:
          description: |
            Full mailing address, formatted for display or use on a mailing
            label.
          type: string
        locality:
          description: Town, city.
          type: string
        postal_code:
          description: Zip code of the address.
          type: string
        region:
          description: State, province, prefecture, or region component.
          type: string
        street_address:
          description: Full street address component.
          type: string
      title: update-postal-address
      type: object
    update-pricing:
      properties:
        add_price_infos:
          description: Pricing objects to be added.
          items:
            $ref: '#/components/schemas/update-pricing-add-price-info'
          type: array
        remove_price_infos:
          description: Pricing objects to be removed.
          items:
            $ref: '#/components/schemas/update-pricing-remove-price-info'
          type: array
        update_price_infos:
          description: Pricing objects to be updated.
          items:
            $ref: '#/components/schemas/update-pricing-update-price-info'
          type: array
      title: update-pricing
      type: object
    update-pricing-add-price-info:
      properties:
        billing_cycle:
          $ref: '#/components/schemas/pricing-billing-cycle'
        block_size:
          description: |
            Number of units in each block. For example, If the metered units is
            540 and the block size is 100. Then the quantity will be 5.4. The
            default value is 1.
          format: int32
          type: integer
        currency:
          description: |
            Currency used for the pricing object. For example, USD, INR etc.
            Defaults to USD.
          type: string
        description:
          description: Description of the pricing object.
          type: string
        is_active:
          description: |
            Helps in deciding if a pricing object can be used for purchasing
            new items. If set to true then new purchase can be made. If set to
            false then no new purchase can be made, but quantity of existing
            items, which were bought with this pricing ID can be updated.
            Defaults to false.
          type: boolean
        is_tiered:
          description: |
            Whether the slabs should be priced tiered or flat. The default
            value is false.
          type: boolean
        price_slabs:
          description: List of price slabs for the given currency.
          items:
            $ref: '#/components/schemas/price-slab'
          type: array
      required:
      - billing_cycle
      - currency
      - price_slabs
      title: update-pricing-add-price-info
      type: object
    update-pricing-remove-price-info:
      properties:
        billing_cycle:
          $ref: '#/components/schemas/pricing-billing-cycle'
        currency:
          description: |
            Currency used for the pricing. For example, USD, INR etc. Defaults
            to USD.
          type: string
      required:
      - billing_cycle
      - currency
      title: update-pricing-remove-price-info
      type: object
    update-pricing-update-price-info:
      properties:
        billing_cycle:
          $ref: '#/components/schemas/pricing-billing-cycle'
        block_size:
          description: |
            Number of units in each block. For example, If the metered units is
            540 and the block size is 100. Then the quantity will be 5.4. The
            default value is 1.
          format: int32
          type: integer
        currency:
          description: |
            Currency used for the pricing. For example, USD, INR etc. Defaults
            to USD.
          type: string
        description:
          description: Description of the pricing.
          type: string
        is_active:
          description: |
            Helps in deciding if a pricing object can be used for purchasing
            new items. If set to true then new purchase can be made. If set to
            false then no new purchase can be made, but quantity of existing
            items, which were bought with this pricing ID can be updated.
            Defaults to false.
          type: boolean
        is_tiered:
          description: |
            Whether the slabs should be priced tiered or flat. The default
            value is false.
          type: boolean
        price_slabs:
          description: List of price slabs for the given currency.
          items:
            $ref: '#/components/schemas/price-slab'
          type: array
      required:
      - billing_cycle
      - currency
      - price_slabs
      title: update-pricing-update-price-info
      type: object
    update-recurring-line-items:
      properties:
        quantity:
          description: Quantity to be updated in the service plan.
          format: int32
          type: integer
        recurring_line_item_id:
          description: Recurring line item to be updated in the service plan.
          type: string
      required:
      - recurring_line_item_id
      title: update-recurring-line-items
      type: object
    update-rev-portal-group:
      description: Update object for RevPortalGroup.
      properties:
        ticket_creation_preferences:
          $ref: '#/components/schemas/update-ticket-creation-group'
      title: update-rev-portal-group
      type: object
    update-snap-in-global-input:
      properties:
        name:
          description: Name of the input whose value is to be updated.
          type: string
        value:
          description: Updated value, omit to UNSET.
          type: string
      required:
      - name
      title: update-snap-in-global-input
      type: object
    update-snap-in-name-reference-mapping:
      properties:
        name:
          description: |
            Name by which the object is being referred in the snap-in version.
          type: string
        reference:
          description: Reference to the actual object.
          example: don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          type: string
      title: update-snap-in-name-reference-mapping
      type: object
    update-support-notifications-group:
      description: Update object for SupportNotificationsGroup.
      properties:
        conv_msg_email_delay:
          description: |
            Delay time in minutes after which the rev/dev user will be notified
            of a new message on conversation via email.
          format: int64
          type: integer
      title: update-support-notifications-group
      type: object
    update-support-preferences-group:
      description: Update object for SupportPreferencesGroup.
      properties:
        notification_preferences:
          $ref: '#/components/schemas/update-support-notifications-group'
      title: update-support-preferences-group
      type: object
    update-ticket-creation-group:
      description: Update object for TicketCreationGroup.
      properties:
        default_ticket_owner_id:
          description: |
            Default owner for the ticket, in case the ticket is created without
            an assigned owner
          type: string
        default_ticket_part_id:
          description: |
            Default part to which a ticket is assigned, in case a ticket is
            being created without an assigned part
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      title: update-ticket-creation-group
      type: object
    update-user-preferences:
      description: Update object for UserPreferences.
      properties:
        enable_email_notifications:
          description: Enable email notifications
          type: boolean
        enable_weekly_analytics_report:
          description: Enable weekly analytics report.
          type: boolean
        general_preferences:
          $ref: '#/components/schemas/update-general-preferences-group'
        notification_preferences:
          $ref: '#/components/schemas/update-notification-preferences-group'
        theme_mode:
          $ref: '#/components/schemas/user-preferences-theme-mode'
      title: update-user-preferences
      type: object
    user-action:
      description: User action types.
      enum:
      - create_part
      - create_work
      - update_part
      - update_work
      type: string
    user-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          display_handle:
            description: |
              The user's display handle. This field is deprecated now. Use
              display_name field instead.
            type: string
          display_name:
            description: |
              The user's display name. The name is non-unique and mutable.
            type: string
          display_picture:
            $ref: '#/components/schemas/artifact-summary'
          email:
            description: Email address of the user.
            type: string
          full_name:
            description: Full name of the user.
            type: string
          phone_numbers:
            description: Phone numbers of the user.
            items:
              type: string
            type: array
          state:
            $ref: '#/components/schemas/user-state'
          thumbnail:
            description: The display picture of the user.
            type: string
        type: object
      title: user-base
    user-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          display_handle:
            description: |
              The user's display handle. This field is deprecated now. Use
              display_name field instead.
            type: string
          display_name:
            description: |
              The user's display name. The name is non-unique and mutable.
            type: string
          display_picture:
            $ref: '#/components/schemas/artifact-summary'
          email:
            description: Email address of the user.
            type: string
          full_name:
            description: Full name of the user.
            type: string
          state:
            $ref: '#/components/schemas/user-state'
          thumbnail:
            description: The display picture of the user.
            type: string
        type: object
      title: user-base-summary
    user-invitation-delete-request:
      description: The request to delete a invitation sent to the user.
      properties:
        email:
          description: Email of the invited user.
          type: string
      required:
      - email
      title: user-invitation-delete-request
      type: object
    user-invitation-delete-response:
      description: The response of deleting a invitation sent to the user.
      title: user-invitation-delete-response
      type: object
      x-go-name: UserInvitationDeleteResponseBody
    user-mentioned-notification:
      allOf:
      - $ref: '#/components/schemas/notification-base'
      - properties:
          body:
            description: The body on which the user was mentioned.
            type: string
          references:
            description: The objects referenced in the body.
            items:
              $ref: '#/components/schemas/atom-summary'
            type: array
          source:
            $ref: '#/components/schemas/atom-summary'
        type: object
      title: user-mentioned-notification
    user-mentioned-notification-summary:
      allOf:
      - $ref: '#/components/schemas/notification-base-summary'
      title: user-mentioned-notification-summary
    user-participation-notification:
      allOf:
      - $ref: '#/components/schemas/notification-base'
      - properties:
          comment_activities:
            description: |
              Details of the comment activities that triggered the notification.
            items:
              $ref: '#/components/schemas/comment-activity'
            type: array
          event_activities:
            description: |
              Details of the event activities that triggered the notification.
            items:
              $ref: '#/components/schemas/event-activity'
            type: array
          latest_activity_type:
            $ref: '#/components/schemas/user-participation-notification-latest-activity-type'
        type: object
      title: user-participation-notification
    user-participation-notification-latest-activity-type:
      description: The latest type of the activity triggering the notification.
      enum:
      - comment
      - event
      type: string
    user-participation-notification-summary:
      allOf:
      - $ref: '#/components/schemas/notification-base-summary'
      title: user-participation-notification-summary
    user-preferences:
      allOf:
      - $ref: '#/components/schemas/preferences-base'
      - properties:
          enable_email_notifications:
            description: Enable email notifications.
            type: boolean
          enable_weekly_analytics_report:
            description: Enable weekly analytics report.
            type: boolean
          general_preferences:
            $ref: '#/components/schemas/general-preferences-group'
          notification_preferences:
            $ref: '#/components/schemas/notification-preferences-group'
          theme_mode:
            $ref: '#/components/schemas/user-preferences-theme-mode'
        type: object
      title: user-preferences
    user-preferences-summary:
      allOf:
      - $ref: '#/components/schemas/preferences-base-summary'
      title: user-preferences-summary
    user-preferences-theme-mode:
      description: App theme mode.
      enum:
      - auto
      - dark
      - light
      type: string
    user-privileges-request:
      description: |
        A request to get the privileges of user on the target object/object
        type.
      properties:
        target:
          $ref: '#/components/schemas/user-privileges-request-target'
      required:
      - target
      title: user-privileges-request
      type: object
    user-privileges-request-target:
      description: Information regarding the target object/object type
      properties:
        id:
          description: |
            The ID of the target object for which user privileges are
            requested.
          type: string
        object_type:
          $ref: '#/components/schemas/object-type-proto'
      title: user-privileges-request-target
      type: object
    user-privileges-response:
      description: Response object for the user privileges request.
      properties:
        authorized_fields:
          description: |
            The list of fields the user has privileges on for the requested
            target object/object type.
          items:
            $ref: '#/components/schemas/authorized-field-metadata'
          type: array
        decision_id:
          description: |
            Unique decision ID that can be used to identify the policy
            evaluation
          type: string
        is_field_acl_enabled:
          description: |
            Whether Field ACL is enabled or not for the user object/object
            type.
          type: boolean
        is_mfz_enabled:
          description: |
            Whether MFZ is enabled or not for the user object/object type.
          type: boolean
        privileges:
          description: |
            The list of the privileges the user has on the requested target
            object/object type.
          items:
            $ref: '#/components/schemas/operation-type'
          type: array
      required:
      - authorized_fields
      - is_field_acl_enabled
      - is_mfz_enabled
      - privileges
      title: user-privileges-response
      type: object
      x-go-name: UserPrivilegesResponseBody
    user-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          user:
            $ref: '#/components/schemas/user-summary'
        required:
        - user
        type: object
      title: user-search-summary
    user-state:
      description: State of the user.
      enum:
      - active
      - deactivated
      - locked
      - shadow
      - unassigned
      type: string
    user-summary:
      discriminator:
        mapping:
          dev_user: '#/components/schemas/dev-user-summary'
          devrev_profile: '#/components/schemas/devrev-profile-summary'
          rev_user: '#/components/schemas/rev-user-summary'
          service_account: '#/components/schemas/service-account-summary'
          sys_user: '#/components/schemas/sys-user-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/dev-user-summary'
      - $ref: '#/components/schemas/devrev-profile-summary'
      - $ref: '#/components/schemas/rev-user-summary'
      - $ref: '#/components/schemas/service-account-summary'
      - $ref: '#/components/schemas/sys-user-summary'
      properties:
        type:
          $ref: '#/components/schemas/user-type'
      required:
      - type
      title: user-summary
      type: object
    user-type:
      enum:
      - dev_user
      - devrev_profile
      - rev_user
      - service_account
      - sys_user
      type: string
    validate-flow-template-request:
      properties:
        new_version:
          description: New version of the flow. Required with old version.
          type: string
        new_yaml:
          description: The new template as a string.
          type: string
        old_version:
          description: Old version of the flow. Required with old yaml.
          type: string
        old_yaml:
          description: The old template as a string.
          type: string
      required:
      - new_yaml
      title: validate-flow-template-request
      type: object
    validate-flow-template-response:
      properties:
        valid:
          description: |
            If the templates are valid and the version update (if applicable)
            is allowed.
          type: boolean
        validation_error:
          description: Any error in the YAML or version update
          type: string
      required:
      - valid
      title: validate-flow-template-response
      type: object
      x-go-name: ValidateFlowTemplateResponseBody
    verify-check-code-request:
      description: "Request to check the verification code received on the phone number
        via\npreviously invoked \"verify.send-code\" api. \n"
      properties:
        phone_number:
          description: The phone number to check the verification code for.
          type: string
        verification_code:
          description: 'The verification code to check. '
          type: string
      required:
      - phone_number
      - verification_code
      title: verify-check-code-request
      type: object
    verify-check-code-response:
      description: |
        The response to check a verification code for a phone number.
      properties:
        is_valid:
          description: |
            Whether the verification code is valid. The given code is
            considered valid when it matches the code received on the given
            phone number and the code has not expired. Verification codes
            expires within 10 minutes of first invocation of"verify.send-code"
            endpoint.
          type: boolean
      required:
      - is_valid
      title: verify-check-code-response
      type: object
      x-go-name: VerifyCheckCodeResponseBody
    verify-redirect-mobile-signup-request:
      title: verify-redirect-mobile-signup-request
      type: object
    verify-redirect-mobile-signup-response:
      title: verify-redirect-mobile-signup-response
      type: object
      x-go-name: VerifyRedirectMobileSignupResponseBody
    verify-send-code-request:
      description: |
        Request object to send a verification code to a phone number.
      properties:
        phone_number:
          description: The phone number to send the verification code to.
          type: string
      required:
      - phone_number
      title: verify-send-code-request
      type: object
    verify-send-code-response:
      description: |
        Response to send a verification code to a phone number. On successful
        response, the verification code is sent to the phone number. To verify
        the phone number, validate the verification code using the
        "verify.check-code" endpoint. In case of non-existing phone number the
        endpoint will return an error.
      title: verify-send-code-response
      type: object
      x-go-name: VerifySendCodeResponseBody
    vertex-v2:
      discriminator:
        mapping:
          capability: '#/components/schemas/vertex-v2-capability'
          custom_part: '#/components/schemas/vertex-v2-custom-part'
          enhancement: '#/components/schemas/vertex-v2-enhancement'
          feature: '#/components/schemas/vertex-v2-feature'
          linkable: '#/components/schemas/vertex-v2-linkable'
          product: '#/components/schemas/vertex-v2-product'
          runnable: '#/components/schemas/vertex-v2-runnable'
        propertyName: object_type
      oneOf:
      - $ref: '#/components/schemas/vertex-v2-capability'
      - $ref: '#/components/schemas/vertex-v2-custom-part'
      - $ref: '#/components/schemas/vertex-v2-enhancement'
      - $ref: '#/components/schemas/vertex-v2-feature'
      - $ref: '#/components/schemas/vertex-v2-linkable'
      - $ref: '#/components/schemas/vertex-v2-product'
      - $ref: '#/components/schemas/vertex-v2-runnable'
      properties:
        created_by_id:
          description: ID of user who created the object.
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
        created_by_id_v1:
          description: ID of user who created the object.
          type: string
        created_date:
          description: The timestamp at which the object was created.
          type: string
        dev_oid:
          description: The ID of the Dev org.
          type: string
        display_id:
          description: Human-readable ID specific to the Dev org.
          type: string
        id:
          description: |
            ID of the devrev object which is represented by this Vertex
          type: string
        id_v1:
          description: |
            ID of the devrev object which is represented by this Vertex
          type: string
        modified_by_id:
          description: ID of the user who last modified the object.
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
        modified_by_id_v1:
          description: ID of the user who last modified the object.
          type: string
        modified_date:
          description: The timestamp at which the object was last modified.
          type: string
        name:
          description: Name of the part.
          type: string
        object_type:
          $ref: '#/components/schemas/vertex-v2-object-type'
        object_version:
          description: The version of the object.
          format: int64
          type: integer
        part_category:
          $ref: '#/components/schemas/part-category'
        part_type:
          $ref: '#/components/schemas/part-type'
      required:
      - created_by_id
      - created_date
      - id
      - modified_by_id
      - modified_date
      - name
      - object_type
      - part_category
      - part_type
      title: vertex-v2
      type: object
    vertex-v2-capability:
      properties:
        fullfilled_by:
          description: IDs of the Dev part fullfilling the part.
          items:
            type: string
          type: array
        fullfilled_by_v1:
          description: IDs of the Dev part fullfilling the part.
          type: string
        links:
          description: Links associated with the object.
          items:
            $ref: '#/components/schemas/archetype-link-summary'
          type: array
        part_of_part_id:
          description: ID of the parent part.
          type: string
        part_of_part_id_v1:
          description: ID of the parent part.
          type: string
      required:
      - fullfilled_by
      - links
      - part_of_part_id
      title: vertex-v2-capability
      type: object
    vertex-v2-custom-part:
      title: vertex-v2-custom-part
      type: object
    vertex-v2-enhancement:
      title: vertex-v2-enhancement
      type: object
    vertex-v2-feature:
      properties:
        fullfilled_by:
          description: IDs of the Dev part fullfilling the part.
          items:
            type: string
          type: array
        fullfilled_by_v1:
          description: IDs of the Dev part fullfilling the part.
          type: string
        links:
          description: Links associated with the object.
          items:
            $ref: '#/components/schemas/archetype-link-summary'
          type: array
        part_of_part_id:
          description: ID of the parent part.
          type: string
        part_of_part_id_v1:
          description: ID of the parent part.
          type: string
      required:
      - fullfilled_by
      - links
      - part_of_part_id
      title: vertex-v2-feature
      type: object
    vertex-v2-linkable:
      properties:
        links:
          description: Links associated with the object.
          items:
            $ref: '#/components/schemas/archetype-link-summary'
          type: array
      required:
      - links
      title: vertex-v2-linkable
      type: object
    vertex-v2-object-type:
      enum:
      - capability
      - custom_part
      - enhancement
      - feature
      - linkable
      - product
      - runnable
      type: string
    vertex-v2-product:
      properties:
        fullfilled_by:
          description: IDs of the Dev part fullfilling the part.
          items:
            type: string
          type: array
        fullfilled_by_v1:
          description: IDs of the Dev part fullfilling the part.
          type: string
        links:
          description: Links associated with the object.
          items:
            $ref: '#/components/schemas/archetype-link-summary'
          type: array
      required:
      - fullfilled_by
      - links
      title: vertex-v2-product
      type: object
    vertex-v2-runnable:
      properties:
        links:
          description: Links associated with the object.
          items:
            $ref: '#/components/schemas/archetype-link-summary'
          type: array
      required:
      - links
      title: vertex-v2-runnable
      type: object
    view-frame:
      properties:
        conversation_ids:
          items:
            type: string
          type: array
        current_filter:
          type: string
        part_ids:
          items:
            type: string
          type: array
        revo_ids:
          items:
            type: string
          type: array
        route:
          $ref: '#/components/schemas/app-route-value'
        vista_id:
          type: string
        work_ids:
          items:
            type: string
          type: array
      required:
      - conversation_ids
      - part_ids
      - revo_ids
      - route
      - work_ids
      title: view-frame
      type: object
    vista:
      description: Represents a collection of DevRev objects.
      discriminator:
        mapping:
          curated: '#/components/schemas/curated-vista'
          dynamic: '#/components/schemas/dynamic-vista'
          grouped: '#/components/schemas/grouped-vista'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/curated-vista'
      - $ref: '#/components/schemas/dynamic-vista'
      - $ref: '#/components/schemas/grouped-vista'
      properties:
        type:
          $ref: '#/components/schemas/vista-type'
      required:
      - type
      title: vista
      type: object
    vista-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          access_level:
            $ref: '#/components/schemas/access-level'
          applies_to_parts:
            description: |
              List of parts to which the corresponding vista is linked.
            items:
              $ref: '#/components/schemas/part-summary'
            type: array
          custom_view:
            $ref: '#/components/schemas/custom-view'
          description:
            description: Description of the vista.
            type: string
          end_date:
            description: Timestamp when the vista ends.
            format: date-time
            type: string
          icon_type:
            description: |
              Denotes the icon associated with the object in the UI. For example,
              'BUG_SELECT', 'INBOX_MAIL_INCOMING'.
            type: string
          is_default:
            description: Boolean to specify whether it's a default Vista or not.
            type: boolean
          members:
            description: Members associated with the object.
            items:
              $ref: '#/components/schemas/object-member-v1'
            type: array
          name:
            description: Name of the vista.
            type: string
          start_date:
            description: Timestamp when the vista starts.
            format: date-time
            type: string
        required:
        - name
        type: object
      title: vista-base
    vista-group:
      description: Represents a vista group item.
      discriminator:
        mapping:
          works: '#/components/schemas/works-vista-group-item'
        propertyName: object_type
      oneOf:
      - $ref: '#/components/schemas/works-vista-group-item'
      properties:
        object_type:
          $ref: '#/components/schemas/grouped-vista-filter-type'
      required:
      - object_type
      title: vista-group
      type: object
    vista-group-item-parent-summary-summary:
      description: Parent Vista Summary.
      properties:
        name:
          description: Name of the parent vista.
          type: string
      title: vista-group-item-parent-summary-summary
      type: object
    vista-group-item-state:
      description: Defines the state of the group item.
      enum:
      - active
      - completed
      - planned
      type: string
    vista-group-item-summary:
      description: Vista group item.
      properties:
        end_date:
          description: Timestamp when the vista ends.
          format: date-time
          type: string
        id:
          description: ID of the group item in don v2 format.
          type: string
        id_v1:
          description: ID of the group item in don v2 format.
          type: string
        name:
          description: Name of the group.
          type: string
        parent:
          $ref: '#/components/schemas/vista-group-item-parent-summary-summary'
        start_date:
          description: Timestamp when the vista starts.
          format: date-time
          type: string
        state:
          $ref: '#/components/schemas/vista-group-item-state'
        type:
          $ref: '#/components/schemas/vista-group-item-type'
      required:
      - id
      - name
      - type
      title: vista-group-item-summary
      type: object
    vista-group-item-type:
      description: Type of the group object.
      enum:
      - curated
      - dynamic
      type: string
    vista-member-value:
      properties:
        id:
          description: The ID of the member.
          type: string
        role:
          description: The ID of the role.
          type: string
      required:
      - id
      - role
      title: vista-member-value
      type: object
    vista-shared-notification:
      allOf:
      - $ref: '#/components/schemas/notification-base'
      - properties:
          vista_id:
            $ref: '#/components/schemas/atom-summary'
        type: object
      title: vista-shared-notification
    vista-shared-notification-summary:
      allOf:
      - $ref: '#/components/schemas/notification-base-summary'
      title: vista-shared-notification-summary
    vista-type:
      description: Type of vista object.
      enum:
      - curated
      - dynamic
      - grouped
      type: string
    vistas-create-request:
      description: The request to create new vista.
      discriminator:
        mapping:
          curated: '#/components/schemas/vistas-create-request-curated-vista'
          dynamic: '#/components/schemas/vistas-create-request-dynamic-vista'
          grouped: '#/components/schemas/vistas-create-request-grouped-vista'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/vistas-create-request-curated-vista'
      - $ref: '#/components/schemas/vistas-create-request-dynamic-vista'
      - $ref: '#/components/schemas/vistas-create-request-grouped-vista'
      properties:
        applies_to_parts:
          description: |
            List of parts to which the corresponding vista is linked.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        custom_view:
          $ref: '#/components/schemas/custom-view'
        description:
          description: Description of the vista.
          type: string
        end_date:
          description: Timestamp when the vista ends.
          format: date-time
          type: string
        icon_type:
          description: Icon type for the vista.
          type: string
        members:
          description: Members associated with vista.
          items:
            $ref: '#/components/schemas/vista-member-value'
          type: array
        name:
          description: Name of the vista.
          type: string
        start_date:
          description: Timestamp when the vista starts.
          format: date-time
          type: string
        type:
          $ref: '#/components/schemas/vista-type'
      required:
      - name
      - type
      title: vistas-create-request
      type: object
    vistas-create-request-curated-vista:
      properties:
        items:
          description: Items associated with the vista.
          items:
            $ref: '#/components/schemas/vistas-create-request-curated-vista-item-value'
          type: array
      title: vistas-create-request-curated-vista
      type: object
    vistas-create-request-curated-vista-item-value:
      properties:
        id:
          description: The ID of the item.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      required:
      - id
      title: vistas-create-request-curated-vista-item-value
      type: object
    vistas-create-request-dynamic-vista:
      discriminator:
        mapping:
          accounts: '#/components/schemas/vistas-create-request-dynamic-vista-accounts-vista'
          conversations: '#/components/schemas/vistas-create-request-dynamic-vista-conversations-vista'
          parts: '#/components/schemas/vistas-create-request-dynamic-vista-parts-vista'
          rev_orgs: '#/components/schemas/vistas-create-request-dynamic-vista-rev-orgs-vista'
          works: '#/components/schemas/vistas-create-request-dynamic-vista-works-vista'
        propertyName: filter_type
      oneOf:
      - $ref: '#/components/schemas/vistas-create-request-dynamic-vista-accounts-vista'
      - $ref: '#/components/schemas/vistas-create-request-dynamic-vista-conversations-vista'
      - $ref: '#/components/schemas/vistas-create-request-dynamic-vista-parts-vista'
      - $ref: '#/components/schemas/vistas-create-request-dynamic-vista-rev-orgs-vista'
      - $ref: '#/components/schemas/vistas-create-request-dynamic-vista-works-vista'
      properties:
        filter_type:
          $ref: '#/components/schemas/dynamic-vista-filter-type'
      required:
      - filter_type
      title: vistas-create-request-dynamic-vista
      type: object
    vistas-create-request-dynamic-vista-accounts-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-create-request-dynamic-vista-accounts-vista-filter'
        items:
          description: Pinned items associated with the vista.
          items:
            $ref: '#/components/schemas/vistas-create-request-dynamic-vista-accounts-vista-item-value'
          type: array
      required:
      - filter
      title: vistas-create-request-dynamic-vista-accounts-vista
      type: object
    vistas-create-request-dynamic-vista-accounts-vista-filter:
      properties:
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        domains:
          description: Array of domain for Accounts to be filtered.
          items:
            type: string
          type: array
        external_refs:
          description: Array of references of Accounts to be filtered.
          items:
            type: string
          type: array
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters by owners.
          items:
            type: string
          type: array
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            Filters on tags. Input will be of the format (tags=<tag id
            1>=<value>&tags=<tag id 2>)
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tier:
          description: Array of tier for Accounts to be filtered.
          items:
            type: string
          type: array
      title: vistas-create-request-dynamic-vista-accounts-vista-filter
      type: object
    vistas-create-request-dynamic-vista-accounts-vista-item-value:
      properties:
        id:
          description: The ID of the item.
          type: string
      required:
      - id
      title: vistas-create-request-dynamic-vista-accounts-vista-item-value
      type: object
    vistas-create-request-dynamic-vista-conversations-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-create-request-dynamic-vista-conversations-vista-filter'
        items:
          description: Pinned items associated with the vista.
          items:
            $ref: '#/components/schemas/vistas-create-request-dynamic-vista-conversations-vista-item-value'
          type: array
      required:
      - filter
      title: vistas-create-request-dynamic-vista-conversations-vista
      type: object
    vistas-create-request-dynamic-vista-conversations-vista-filter:
      properties:
        applies_to_parts:
          description: |
            Filters for conversations belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        group_by:
          description: The field to group the collection by.
          type: string
        members:
          description: |
            Filters for conversations where these users are participants.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters for conversations owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        rev_org:
          description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sla_stage:
          deprecated: true
          description: |
            Filters for conversations with any of the provided SLA stages.
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        source_channels:
          description: |
            Filters for conversations with any of the provided source channels.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: |
            Filters for conversations with any of the provided states.
          items:
            type: string
          type: array
        tags:
          description: Filters for conversations with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tickets:
          description: |
            Filters for conversations with any of the provided ticket IDs.
          items:
            type: string
          type: array
      title: vistas-create-request-dynamic-vista-conversations-vista-filter
      type: object
    vistas-create-request-dynamic-vista-conversations-vista-item-value:
      properties:
        id:
          description: The ID of the item.
          type: string
      required:
      - id
      title: vistas-create-request-dynamic-vista-conversations-vista-item-value
      type: object
    vistas-create-request-dynamic-vista-parts-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-create-request-dynamic-vista-parts-vista-filter'
        items:
          description: Pinned items associated with the vista.
          items:
            $ref: '#/components/schemas/vistas-create-request-dynamic-vista-parts-vista-item-value'
          type: array
      required:
      - filter
      title: vistas-create-request-dynamic-vista-parts-vista
      type: object
    vistas-create-request-dynamic-vista-parts-vista-filter:
      properties:
        categories:
          description: Filters for parts of the provided categories.
          items:
            $ref: '#/components/schemas/part-category'
          type: array
        created_by:
          description: Filters for parts created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        enhancement:
          $ref: '#/components/schemas/parts-filter-enhancement'
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        name:
          description: Filters for parts of the provided name(s).
          items:
            type: string
          type: array
        owned_by:
          description: Filters for parts owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for parts owned by any of the provided users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: Filters for part with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for parts with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags:
          description: Filters for part with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
        type:
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
        types:
          deprecated: true
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      title: vistas-create-request-dynamic-vista-parts-vista-filter
      type: object
    vistas-create-request-dynamic-vista-parts-vista-item-value:
      properties:
        id:
          description: The ID of the item.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      required:
      - id
      title: vistas-create-request-dynamic-vista-parts-vista-item-value
      type: object
    vistas-create-request-dynamic-vista-rev-orgs-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-create-request-dynamic-vista-rev-orgs-vista-filter'
        items:
          description: Pinned items associated with the vista.
          items:
            $ref: '#/components/schemas/vistas-create-request-dynamic-vista-rev-orgs-vista-item-value'
          type: array
      required:
      - filter
      title: vistas-create-request-dynamic-vista-rev-orgs-vista
      type: object
    vistas-create-request-dynamic-vista-rev-orgs-vista-filter:
      properties:
        account:
          description: Filters by account.
          items:
            type: string
          type: array
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        domain:
          description: Array of domain for Rev organizations to be filtered.
          items:
            type: string
          type: array
        environment:
          description: Environment values to be filtered.
          items:
            $ref: '#/components/schemas/org-environment'
          type: array
        external_ref:
          description: List of external refs to filter Rev organizations for.
          items:
            type: string
          type: array
        external_ref_issuer:
          description: |
            Array of external ref issuers for Rev organizations to be filtered.
          items:
            type: string
          type: array
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters by owners.
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters by owners.
          items:
            type: string
          type: array
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        state:
          description: State values to be filtered.
          items:
            $ref: '#/components/schemas/org-state'
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            Filters on tags. Input will be of the format (tags=<tag id
            1>=<value>&tags=<tag id 2>)
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tier:
          description: Array of tier for Rev organizations to be filtered.
          items:
            type: string
          type: array
        type:
          description: Types of Rev organizations to be filtered.
          items:
            $ref: '#/components/schemas/rev-org-type'
          type: array
      title: vistas-create-request-dynamic-vista-rev-orgs-vista-filter
      type: object
    vistas-create-request-dynamic-vista-rev-orgs-vista-item-value:
      properties:
        id:
          description: The ID of the item.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
      required:
      - id
      title: vistas-create-request-dynamic-vista-rev-orgs-vista-item-value
      type: object
    vistas-create-request-dynamic-vista-works-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-create-request-dynamic-vista-works-vista-filter'
        items:
          description: Pinned items associated with the vista.
          items:
            $ref: '#/components/schemas/vistas-create-request-dynamic-vista-works-vista-item-value'
          type: array
      required:
      - filter
      title: vistas-create-request-dynamic-vista-works-vista
      type: object
    vistas-create-request-dynamic-vista-works-vista-filter:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_date:
          $ref: '#/components/schemas/date-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        group_by:
          description: The field to group the collection by.
          type: string
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
      title: vistas-create-request-dynamic-vista-works-vista-filter
      type: object
    vistas-create-request-dynamic-vista-works-vista-item-value:
      properties:
        id:
          description: The ID of the item.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      required:
      - id
      title: vistas-create-request-dynamic-vista-works-vista-item-value
      type: object
    vistas-create-request-grouped-vista:
      discriminator:
        mapping:
          parts: '#/components/schemas/vistas-create-request-grouped-vista-parts-vista'
          works: '#/components/schemas/vistas-create-request-grouped-vista-works-vista'
        propertyName: filter_type
      oneOf:
      - $ref: '#/components/schemas/vistas-create-request-grouped-vista-parts-vista'
      - $ref: '#/components/schemas/vistas-create-request-grouped-vista-works-vista'
      properties:
        filter_type:
          $ref: '#/components/schemas/grouped-vista-filter-type'
        flavor:
          $ref: '#/components/schemas/grouped-vista-flavor'
      required:
      - filter_type
      title: vistas-create-request-grouped-vista
      type: object
    vistas-create-request-grouped-vista-parts-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-create-request-grouped-vista-parts-vista-filter'
        groups:
          description: The list of vista groups.
          items:
            $ref: '#/components/schemas/vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item'
          type: array
      title: vistas-create-request-grouped-vista-parts-vista
      type: object
    vistas-create-request-grouped-vista-parts-vista-filter:
      properties:
        categories:
          description: Filters for parts of the provided categories.
          items:
            $ref: '#/components/schemas/part-category'
          type: array
        created_by:
          description: Filters for parts created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        enhancement:
          $ref: '#/components/schemas/parts-filter-enhancement'
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        name:
          description: Filters for parts of the provided name(s).
          items:
            type: string
          type: array
        owned_by:
          description: Filters for parts owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for parts owned by any of the provided users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: Filters for part with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for parts with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags:
          description: Filters for part with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
        type:
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
        types:
          deprecated: true
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      title: vistas-create-request-grouped-vista-parts-vista-filter
      type: object
    vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item:
      discriminator:
        mapping:
          curated: '#/components/schemas/vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-curated-group'
          dynamic: '#/components/schemas/vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-dynamic-group'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-curated-group'
      - $ref: '#/components/schemas/vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-dynamic-group'
      properties:
        custom_view:
          $ref: '#/components/schemas/custom-view'
        description:
          description: Description of the group.
          type: string
        icon_type:
          description: Icon associated with the group in the UI.
          type: string
        name:
          description: Name of the group.
          type: string
        type:
          $ref: '#/components/schemas/works-vista-group-item-type'
      required:
      - name
      - type
      title: vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item
      type: object
    vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-curated-group:
      properties:
        items:
          description: Static list of part items.
          items:
            $ref: '#/components/schemas/vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-curated-group-item-value'
          type: array
      title: vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-curated-group
      type: object
    vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-curated-group-item-value:
      properties:
        id:
          description: The ID of the item.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      required:
      - id
      title: vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-curated-group-item-value
      type: object
    vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-dynamic-group:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-dynamic-group-filter'
      required:
      - filter
      title: vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-dynamic-group
      type: object
    vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-dynamic-group-filter:
      properties:
        categories:
          description: Filters for parts of the provided categories.
          items:
            $ref: '#/components/schemas/part-category'
          type: array
        created_by:
          description: Filters for parts created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        enhancement:
          $ref: '#/components/schemas/parts-filter-enhancement'
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        name:
          description: Filters for parts of the provided name(s).
          items:
            type: string
          type: array
        owned_by:
          description: Filters for parts owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for parts owned by any of the provided users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: Filters for part with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for parts with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags:
          description: Filters for part with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
        type:
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
        types:
          deprecated: true
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      title: vistas-create-request-grouped-vista-parts-vista-parts-vista-group-item-dynamic-group-filter
      type: object
    vistas-create-request-grouped-vista-works-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-create-request-grouped-vista-works-vista-filter'
        groups:
          description: The list of vista groups.
          items:
            $ref: '#/components/schemas/vistas-create-request-grouped-vista-works-vista-works-vista-group-item'
          type: array
      title: vistas-create-request-grouped-vista-works-vista
      type: object
    vistas-create-request-grouped-vista-works-vista-filter:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_date:
          $ref: '#/components/schemas/date-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        group_by:
          description: The field to group the collection by.
          type: string
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
      title: vistas-create-request-grouped-vista-works-vista-filter
      type: object
    vistas-create-request-grouped-vista-works-vista-works-vista-group-item:
      discriminator:
        mapping:
          curated: '#/components/schemas/vistas-create-request-grouped-vista-works-vista-works-vista-group-item-curated-group'
          dynamic: '#/components/schemas/vistas-create-request-grouped-vista-works-vista-works-vista-group-item-dynamic-group'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/vistas-create-request-grouped-vista-works-vista-works-vista-group-item-curated-group'
      - $ref: '#/components/schemas/vistas-create-request-grouped-vista-works-vista-works-vista-group-item-dynamic-group'
      properties:
        custom_view:
          $ref: '#/components/schemas/custom-view'
        description:
          description: Description of the group.
          type: string
        end_date:
          description: Timestamp when the vista group item ends.
          format: date-time
          type: string
        icon_type:
          description: Icon associated with the group in the UI.
          type: string
        name:
          description: Name of the group.
          type: string
        start_date:
          description: Timestamp when the vista group item starts.
          format: date-time
          type: string
        type:
          $ref: '#/components/schemas/works-vista-group-item-type'
      required:
      - name
      - type
      title: vistas-create-request-grouped-vista-works-vista-works-vista-group-item
      type: object
    vistas-create-request-grouped-vista-works-vista-works-vista-group-item-curated-group:
      properties:
        items:
          description: Static list of work items.
          items:
            $ref: '#/components/schemas/vistas-create-request-grouped-vista-works-vista-works-vista-group-item-curated-group-item-value'
          type: array
      title: vistas-create-request-grouped-vista-works-vista-works-vista-group-item-curated-group
      type: object
    vistas-create-request-grouped-vista-works-vista-works-vista-group-item-curated-group-item-value:
      properties:
        id:
          description: The ID of the item.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      required:
      - id
      title: vistas-create-request-grouped-vista-works-vista-works-vista-group-item-curated-group-item-value
      type: object
    vistas-create-request-grouped-vista-works-vista-works-vista-group-item-dynamic-group:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-create-request-grouped-vista-works-vista-works-vista-group-item-dynamic-group-filter'
      required:
      - filter
      title: vistas-create-request-grouped-vista-works-vista-works-vista-group-item-dynamic-group
      type: object
    vistas-create-request-grouped-vista-works-vista-works-vista-group-item-dynamic-group-filter:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_date:
          $ref: '#/components/schemas/date-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        group_by:
          description: The field to group the collection by.
          type: string
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
      title: vistas-create-request-grouped-vista-works-vista-works-vista-group-item-dynamic-group-filter
      type: object
    vistas-create-response:
      description: The response to vista creation.
      properties:
        vista:
          $ref: '#/components/schemas/vista'
      required:
      - vista
      title: vistas-create-response
      type: object
      x-go-name: VistasCreateResponseBody
    vistas-delete-request:
      description: The request to delete a vista.
      properties:
        id:
          description: The ID of the vista to delete.
          type: string
      required:
      - id
      title: vistas-delete-request
      type: object
    vistas-delete-response:
      description: The response when deleting a vista.
      title: vistas-delete-response
      type: object
      x-go-name: VistasDeleteResponseBody
    vistas-get-request:
      description: The request to get a vista's information.
      properties:
        id:
          description: The vista's ID.
          type: string
      required:
      - id
      title: vistas-get-request
      type: object
    vistas-get-response:
      description: The response to getting a vista's information.
      properties:
        vista:
          $ref: '#/components/schemas/vista'
      required:
      - vista
      title: vistas-get-response
      type: object
      x-go-name: VistasGetResponseBody
    vistas-groups-create-request:
      title: vistas-groups-create-request
      type: object
    vistas-groups-create-response:
      title: vistas-groups-create-response
      type: object
      x-go-name: VistasGroupsCreateResponseBody
    vistas-groups-delete-request:
      title: vistas-groups-delete-request
      type: object
    vistas-groups-delete-response:
      title: vistas-groups-delete-response
      type: object
      x-go-name: VistasGroupsDeleteResponseBody
    vistas-groups-get-request:
      description: The request to get a vista group item's information.
      properties:
        id:
          description: The vista group item's ID.
          type: string
      required:
      - id
      title: vistas-groups-get-request
      type: object
    vistas-groups-get-response:
      description: The response to getting a vista group item's information.
      properties:
        vista_group:
          $ref: '#/components/schemas/vista-group'
      required:
      - vista_group
      title: vistas-groups-get-response
      type: object
      x-go-name: VistasGroupsGetResponseBody
    vistas-groups-list-request:
      title: vistas-groups-list-request
      type: object
    vistas-groups-list-response:
      title: vistas-groups-list-response
      type: object
      x-go-name: VistasGroupsListResponseBody
    vistas-groups-update-request:
      description: The request to update a vista's group.
      discriminator:
        mapping:
          works: '#/components/schemas/vistas-groups-update-request-works-group-item'
        propertyName: object_type
      oneOf:
      - $ref: '#/components/schemas/vistas-groups-update-request-works-group-item'
      properties:
        custom_view:
          $ref: '#/components/schemas/vistas-groups-update-request-custom-view'
        description:
          description: Updated description of the group.
          type: string
        end_date:
          description: Timestamp when the vista ends.
          format: date-time
          type: string
        icon_type:
          description: Updated icon associated with the group in the UI.
          type: string
        id:
          description: The ID of the vista group to update.
          type: string
        name:
          description: Updated name of the group.
          type: string
        object_type:
          $ref: '#/components/schemas/grouped-vista-filter-type'
        start_date:
          description: Timestamp when the vista starts.
          format: date-time
          type: string
      required:
      - id
      - object_type
      title: vistas-groups-update-request
      type: object
    vistas-groups-update-request-custom-view:
      properties:
        column_properties:
          $ref: '#/components/schemas/vistas-groups-update-request-custom-view-column-properties'
        show_groups:
          description: Boolean to specify whether to show groups or not.
          type: boolean
      title: vistas-groups-update-request-custom-view
      type: object
    vistas-groups-update-request-custom-view-column-properties:
      properties:
        set:
          description: Sets the column property items to provided list.
          items:
            $ref: '#/components/schemas/vistas-groups-update-request-custom-view-column-properties-column-property'
          type: array
      title: vistas-groups-update-request-custom-view-column-properties
      type: object
    vistas-groups-update-request-custom-view-column-properties-column-property:
      properties:
        name:
          description: Name of the column.
          type: string
      required:
      - name
      title: vistas-groups-update-request-custom-view-column-properties-column-property
      type: object
    vistas-groups-update-request-works-group-item:
      discriminator:
        mapping:
          curated: '#/components/schemas/vistas-groups-update-request-works-group-item-curated-group'
          dynamic: '#/components/schemas/vistas-groups-update-request-works-group-item-dynamic-group'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/vistas-groups-update-request-works-group-item-curated-group'
      - $ref: '#/components/schemas/vistas-groups-update-request-works-group-item-dynamic-group'
      properties:
        type:
          $ref: '#/components/schemas/works-vista-group-item-type'
      required:
      - type
      title: vistas-groups-update-request-works-group-item
      type: object
    vistas-groups-update-request-works-group-item-curated-group:
      properties:
        items:
          $ref: '#/components/schemas/vistas-groups-update-request-works-group-item-curated-group-items'
      title: vistas-groups-update-request-works-group-item-curated-group
      type: object
    vistas-groups-update-request-works-group-item-curated-group-items:
      properties:
        add:
          description: Adds the provided items to the front of the item list.
          items:
            $ref: '#/components/schemas/vistas-groups-update-request-works-group-item-curated-group-items-item-value'
          type: array
        remove:
          description: Removes the provided items from the item list.
          items:
            $ref: '#/components/schemas/vistas-groups-update-request-works-group-item-curated-group-items-item-value'
          type: array
        set:
          description: Sets the items to the provided items.
          items:
            $ref: '#/components/schemas/vistas-groups-update-request-works-group-item-curated-group-items-item-value'
          type: array
      title: vistas-groups-update-request-works-group-item-curated-group-items
      type: object
    vistas-groups-update-request-works-group-item-curated-group-items-item-value:
      properties:
        id:
          description: The ID of the item.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      required:
      - id
      title: vistas-groups-update-request-works-group-item-curated-group-items-item-value
      type: object
    vistas-groups-update-request-works-group-item-dynamic-group:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-groups-update-request-works-group-item-dynamic-group-filter'
      title: vistas-groups-update-request-works-group-item-dynamic-group
      type: object
    vistas-groups-update-request-works-group-item-dynamic-group-filter:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_date:
          $ref: '#/components/schemas/date-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        group_by:
          description: The field to group the collection by.
          type: string
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
      title: vistas-groups-update-request-works-group-item-dynamic-group-filter
      type: object
    vistas-groups-update-response:
      description: The response to updating a vista's group.
      properties:
        vista_group:
          $ref: '#/components/schemas/vista-group'
      required:
      - vista_group
      title: vistas-groups-update-response
      type: object
      x-go-name: VistasGroupsUpdateResponseBody
    vistas-list-request:
      description: The request to get information about a list of vistas.
      properties:
        ancestor_part:
          description: |
            Filters for vistas which have one of the parts linked as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part:
          description: |
            Filters for vistas belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_by:
          description: Filters for vistas created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        flavor:
          description: Filters for vistas of specific flavor.
          items:
            $ref: '#/components/schemas/grouped-vista-flavor'
          type: array
        is_default:
          description: Whether the default vistas should be fetched or not.
          type: boolean
        limit:
          description: |
            The maximum number of vistas to return. The default is '50', the
            maximum is '100'.
          format: int32
          type: integer
        members:
          description: Filters for vistas accessible to the input members.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        mode:
          $ref: '#/components/schemas/list-mode'
        object_type:
          description: |
            Filters for vistas of specific object types like works, parts etc.
          items:
            $ref: '#/components/schemas/dynamic-vista-filter-type'
          type: array
        sort_by:
          description: |
            Fields to sort the vistas by and the direction to sort them.
          items:
            type: string
          type: array
        type:
          description: Filters for vistas of the specific type.
          items:
            $ref: '#/components/schemas/vista-type'
          type: array
      title: vistas-list-request
      type: object
    vistas-list-response:
      description: The response to listing the vistas.
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        vistas:
          description: The list of vistas.
          items:
            $ref: '#/components/schemas/vista'
          type: array
      required:
      - vistas
      title: vistas-list-response
      type: object
      x-go-name: VistasListResponseBody
    vistas-update-request:
      description: The request to update a vista.
      discriminator:
        mapping:
          curated: '#/components/schemas/vistas-update-request-curated-vista'
          dynamic: '#/components/schemas/vistas-update-request-dynamic-vista'
          grouped: '#/components/schemas/vistas-update-request-grouped-vista'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/vistas-update-request-curated-vista'
      - $ref: '#/components/schemas/vistas-update-request-dynamic-vista'
      - $ref: '#/components/schemas/vistas-update-request-grouped-vista'
      properties:
        applies_to_parts:
          $ref: '#/components/schemas/vistas-update-request-applies-to-parts'
        custom_view:
          $ref: '#/components/schemas/vistas-update-request-custom-view'
        description:
          description: The updated vista's description.
          type: string
        end_date:
          description: Updated timestamp of when the vista ends.
          format: date-time
          type: string
        icon_type:
          description: The updated vista's icon type.
          type: string
        id:
          description: The ID of the vista to update.
          type: string
        members:
          $ref: '#/components/schemas/vistas-update-request-members'
        name:
          description: The updated vista's name.
          type: string
        start_date:
          description: Updated timestamp of when the vista starts.
          format: date-time
          type: string
        type:
          $ref: '#/components/schemas/vista-type'
      required:
      - id
      - type
      title: vistas-update-request
      type: object
    vistas-update-request-applies-to-parts:
      properties:
        set:
          description: |
            Updates the list of parts to which the corresponding vista is
            linked.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      title: vistas-update-request-applies-to-parts
      type: object
    vistas-update-request-curated-vista:
      properties:
        items:
          $ref: '#/components/schemas/vistas-update-request-curated-vista-items'
      title: vistas-update-request-curated-vista
      type: object
    vistas-update-request-curated-vista-items:
      properties:
        set:
          description: Sets the items to the provided items.
          items:
            $ref: '#/components/schemas/vistas-update-request-curated-vista-items-item-value'
          type: array
      title: vistas-update-request-curated-vista-items
      type: object
    vistas-update-request-curated-vista-items-item-value:
      properties:
        id:
          description: The ID of the item.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      required:
      - id
      title: vistas-update-request-curated-vista-items-item-value
      type: object
    vistas-update-request-custom-view:
      properties:
        column_properties:
          $ref: '#/components/schemas/vistas-update-request-custom-view-column-properties'
        show_groups:
          description: Boolean to specify whether to show groups or not.
          type: boolean
      title: vistas-update-request-custom-view
      type: object
    vistas-update-request-custom-view-column-properties:
      properties:
        set:
          description: Sets the column property items to provided list.
          items:
            $ref: '#/components/schemas/vistas-update-request-custom-view-column-properties-column-property'
          type: array
      title: vistas-update-request-custom-view-column-properties
      type: object
    vistas-update-request-custom-view-column-properties-column-property:
      properties:
        name:
          description: Name of the column.
          type: string
      required:
      - name
      title: vistas-update-request-custom-view-column-properties-column-property
      type: object
    vistas-update-request-dynamic-vista:
      discriminator:
        mapping:
          accounts: '#/components/schemas/vistas-update-request-dynamic-vista-accounts-vista'
          conversations: '#/components/schemas/vistas-update-request-dynamic-vista-conversations-vista'
          parts: '#/components/schemas/vistas-update-request-dynamic-vista-parts-vista'
          rev_orgs: '#/components/schemas/vistas-update-request-dynamic-vista-rev-orgs-vista'
          works: '#/components/schemas/vistas-update-request-dynamic-vista-works-vista'
        propertyName: filter_type
      oneOf:
      - $ref: '#/components/schemas/vistas-update-request-dynamic-vista-accounts-vista'
      - $ref: '#/components/schemas/vistas-update-request-dynamic-vista-conversations-vista'
      - $ref: '#/components/schemas/vistas-update-request-dynamic-vista-parts-vista'
      - $ref: '#/components/schemas/vistas-update-request-dynamic-vista-rev-orgs-vista'
      - $ref: '#/components/schemas/vistas-update-request-dynamic-vista-works-vista'
      properties:
        filter_type:
          $ref: '#/components/schemas/dynamic-vista-filter-type'
      required:
      - filter_type
      title: vistas-update-request-dynamic-vista
      type: object
    vistas-update-request-dynamic-vista-accounts-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-update-request-dynamic-vista-accounts-vista-filter'
        items:
          $ref: '#/components/schemas/vistas-update-request-dynamic-vista-accounts-vista-items'
      title: vistas-update-request-dynamic-vista-accounts-vista
      type: object
    vistas-update-request-dynamic-vista-accounts-vista-filter:
      properties:
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        domains:
          description: Array of domain for Accounts to be filtered.
          items:
            type: string
          type: array
        external_refs:
          description: Array of references of Accounts to be filtered.
          items:
            type: string
          type: array
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters by owners.
          items:
            type: string
          type: array
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            Filters on tags. Input will be of the format (tags=<tag id
            1>=<value>&tags=<tag id 2>)
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tier:
          description: Array of tier for Accounts to be filtered.
          items:
            type: string
          type: array
      title: vistas-update-request-dynamic-vista-accounts-vista-filter
      type: object
    vistas-update-request-dynamic-vista-accounts-vista-items:
      properties:
        set:
          description: Sets the items to the provided items.
          items:
            $ref: '#/components/schemas/vistas-update-request-dynamic-vista-accounts-vista-items-item-value'
          type: array
      title: vistas-update-request-dynamic-vista-accounts-vista-items
      type: object
    vistas-update-request-dynamic-vista-accounts-vista-items-item-value:
      properties:
        id:
          description: The ID of the item.
          type: string
      required:
      - id
      title: vistas-update-request-dynamic-vista-accounts-vista-items-item-value
      type: object
    vistas-update-request-dynamic-vista-conversations-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-update-request-dynamic-vista-conversations-vista-filter'
        items:
          $ref: '#/components/schemas/vistas-update-request-dynamic-vista-conversations-vista-items'
      title: vistas-update-request-dynamic-vista-conversations-vista
      type: object
    vistas-update-request-dynamic-vista-conversations-vista-filter:
      properties:
        applies_to_parts:
          description: |
            Filters for conversations belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        group_by:
          description: The field to group the collection by.
          type: string
        members:
          description: |
            Filters for conversations where these users are participants.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters for conversations owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        rev_org:
          description: |
            Filters for conversations that are associated with any of the
            provided Rev organizations.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        sla_stage:
          deprecated: true
          description: |
            Filters for conversations with any of the provided SLA stages.
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        source_channels:
          description: |
            Filters for conversations with any of the provided source channels.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: |
            Filters for conversations with any of the provided states.
          items:
            type: string
          type: array
        tags:
          description: Filters for conversations with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tickets:
          description: |
            Filters for conversations with any of the provided ticket IDs.
          items:
            type: string
          type: array
      title: vistas-update-request-dynamic-vista-conversations-vista-filter
      type: object
    vistas-update-request-dynamic-vista-conversations-vista-items:
      properties:
        set:
          description: Sets the items to the provided items.
          items:
            $ref: '#/components/schemas/vistas-update-request-dynamic-vista-conversations-vista-items-item-value'
          type: array
      title: vistas-update-request-dynamic-vista-conversations-vista-items
      type: object
    vistas-update-request-dynamic-vista-conversations-vista-items-item-value:
      properties:
        id:
          description: The ID of the item.
          type: string
      required:
      - id
      title: vistas-update-request-dynamic-vista-conversations-vista-items-item-value
      type: object
    vistas-update-request-dynamic-vista-parts-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-update-request-dynamic-vista-parts-vista-filter'
        items:
          $ref: '#/components/schemas/vistas-update-request-dynamic-vista-parts-vista-items'
      title: vistas-update-request-dynamic-vista-parts-vista
      type: object
    vistas-update-request-dynamic-vista-parts-vista-filter:
      properties:
        categories:
          description: Filters for parts of the provided categories.
          items:
            $ref: '#/components/schemas/part-category'
          type: array
        created_by:
          description: Filters for parts created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        enhancement:
          $ref: '#/components/schemas/parts-filter-enhancement'
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        name:
          description: Filters for parts of the provided name(s).
          items:
            type: string
          type: array
        owned_by:
          description: Filters for parts owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for parts owned by any of the provided users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: Filters for part with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for parts with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags:
          description: Filters for part with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
        type:
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
        types:
          deprecated: true
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      title: vistas-update-request-dynamic-vista-parts-vista-filter
      type: object
    vistas-update-request-dynamic-vista-parts-vista-items:
      properties:
        set:
          description: Sets the items to the provided items.
          items:
            $ref: '#/components/schemas/vistas-update-request-dynamic-vista-parts-vista-items-item-value'
          type: array
      title: vistas-update-request-dynamic-vista-parts-vista-items
      type: object
    vistas-update-request-dynamic-vista-parts-vista-items-item-value:
      properties:
        id:
          description: The ID of the item.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      required:
      - id
      title: vistas-update-request-dynamic-vista-parts-vista-items-item-value
      type: object
    vistas-update-request-dynamic-vista-rev-orgs-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-update-request-dynamic-vista-rev-orgs-vista-filter'
        items:
          $ref: '#/components/schemas/vistas-update-request-dynamic-vista-rev-orgs-vista-items'
      title: vistas-update-request-dynamic-vista-rev-orgs-vista
      type: object
    vistas-update-request-dynamic-vista-rev-orgs-vista-filter:
      properties:
        account:
          description: Filters by account.
          items:
            type: string
          type: array
        created_by:
          description: Filters by creator.
          items:
            type: string
          type: array
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        custom_field_filter:
          description: |
            Filters on custom fields. Input will be of the format
            (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
          items:
            type: string
          type: array
        domain:
          description: Array of domain for Rev organizations to be filtered.
          items:
            type: string
          type: array
        environment:
          description: Environment values to be filtered.
          items:
            $ref: '#/components/schemas/org-environment'
          type: array
        external_ref:
          description: List of external refs to filter Rev organizations for.
          items:
            type: string
          type: array
        external_ref_issuer:
          description: |
            Array of external ref issuers for Rev organizations to be filtered.
          items:
            type: string
          type: array
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        owned_by:
          description: Filters by owners.
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters by owners.
          items:
            type: string
          type: array
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        state:
          description: State values to be filtered.
          items:
            $ref: '#/components/schemas/org-state'
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tags:
          description: |
            Filters on tags. Input will be of the format (tags=<tag id
            1>=<value>&tags=<tag id 2>)
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
        tier:
          description: Array of tier for Rev organizations to be filtered.
          items:
            type: string
          type: array
        type:
          description: Types of Rev organizations to be filtered.
          items:
            $ref: '#/components/schemas/rev-org-type'
          type: array
      title: vistas-update-request-dynamic-vista-rev-orgs-vista-filter
      type: object
    vistas-update-request-dynamic-vista-rev-orgs-vista-items:
      properties:
        set:
          description: Sets the items to the provided items.
          items:
            $ref: '#/components/schemas/vistas-update-request-dynamic-vista-rev-orgs-vista-items-item-value'
          type: array
      title: vistas-update-request-dynamic-vista-rev-orgs-vista-items
      type: object
    vistas-update-request-dynamic-vista-rev-orgs-vista-items-item-value:
      properties:
        id:
          description: The ID of the item.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
      required:
      - id
      title: vistas-update-request-dynamic-vista-rev-orgs-vista-items-item-value
      type: object
    vistas-update-request-dynamic-vista-works-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-update-request-dynamic-vista-works-vista-filter'
        items:
          $ref: '#/components/schemas/vistas-update-request-dynamic-vista-works-vista-items'
      title: vistas-update-request-dynamic-vista-works-vista
      type: object
    vistas-update-request-dynamic-vista-works-vista-filter:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_date:
          $ref: '#/components/schemas/date-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        group_by:
          description: The field to group the collection by.
          type: string
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
      title: vistas-update-request-dynamic-vista-works-vista-filter
      type: object
    vistas-update-request-dynamic-vista-works-vista-items:
      properties:
        set:
          description: Sets the items to the provided items.
          items:
            $ref: '#/components/schemas/vistas-update-request-dynamic-vista-works-vista-items-item-value'
          type: array
      title: vistas-update-request-dynamic-vista-works-vista-items
      type: object
    vistas-update-request-dynamic-vista-works-vista-items-item-value:
      properties:
        id:
          description: The ID of the item.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      required:
      - id
      title: vistas-update-request-dynamic-vista-works-vista-items-item-value
      type: object
    vistas-update-request-grouped-vista:
      discriminator:
        mapping:
          parts: '#/components/schemas/vistas-update-request-grouped-vista-parts-vista'
          works: '#/components/schemas/vistas-update-request-grouped-vista-works-vista'
        propertyName: filter_type
      oneOf:
      - $ref: '#/components/schemas/vistas-update-request-grouped-vista-parts-vista'
      - $ref: '#/components/schemas/vistas-update-request-grouped-vista-works-vista'
      properties:
        filter_type:
          $ref: '#/components/schemas/grouped-vista-filter-type'
        flavor:
          $ref: '#/components/schemas/grouped-vista-flavor'
      required:
      - filter_type
      title: vistas-update-request-grouped-vista
      type: object
    vistas-update-request-grouped-vista-parts-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-update-request-grouped-vista-parts-vista-filter'
        groups:
          $ref: '#/components/schemas/vistas-update-request-grouped-vista-parts-vista-parts-vista-group-items'
      title: vistas-update-request-grouped-vista-parts-vista
      type: object
    vistas-update-request-grouped-vista-parts-vista-filter:
      properties:
        categories:
          description: Filters for parts of the provided categories.
          items:
            $ref: '#/components/schemas/part-category'
          type: array
        created_by:
          description: Filters for parts created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
        created_date:
          $ref: '#/components/schemas/date-time-filter'
        enhancement:
          $ref: '#/components/schemas/parts-filter-enhancement'
        group_by:
          description: The field to group the collection by.
          type: string
        modified_date:
          $ref: '#/components/schemas/date-time-filter'
        name:
          description: Filters for parts of the provided name(s).
          items:
            type: string
          type: array
        owned_by:
          description: Filters for parts owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for parts owned by any of the provided users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        state:
          description: Filters for part with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for parts with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags:
          description: Filters for part with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_op:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
        type:
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
        types:
          deprecated: true
          description: Filters for parts of the provided type(s).
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      title: vistas-update-request-grouped-vista-parts-vista-filter
      type: object
    vistas-update-request-grouped-vista-parts-vista-parts-vista-group-items:
      properties:
        set:
          description: Sets the groups to the provided set.
          items:
            $ref: '#/components/schemas/parts-vista-group-item-update'
          type: array
      title: vistas-update-request-grouped-vista-parts-vista-parts-vista-group-items
      type: object
    vistas-update-request-grouped-vista-works-vista:
      properties:
        filter:
          $ref: '#/components/schemas/vistas-update-request-grouped-vista-works-vista-filter'
        groups:
          $ref: '#/components/schemas/vistas-update-request-grouped-vista-works-vista-works-vista-group-items'
      title: vistas-update-request-grouped-vista-works-vista
      type: object
    vistas-update-request-grouped-vista-works-vista-filter:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_date:
          $ref: '#/components/schemas/date-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        group_by:
          description: The field to group the collection by.
          type: string
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
      title: vistas-update-request-grouped-vista-works-vista-filter
      type: object
    vistas-update-request-grouped-vista-works-vista-works-vista-group-items:
      properties:
        set:
          description: Sets the groups to the provided set.
          items:
            $ref: '#/components/schemas/works-vista-group-item-update'
          type: array
      title: vistas-update-request-grouped-vista-works-vista-works-vista-group-items
      type: object
    vistas-update-request-members:
      properties:
        set:
          description: Sets the members to the provided members.
          items:
            $ref: '#/components/schemas/vista-member-value'
          type: array
      title: vistas-update-request-members
      type: object
    vistas-update-response:
      description: The response to updating a vista.
      properties:
        vista:
          $ref: '#/components/schemas/vista'
      required:
      - vista
      title: vistas-update-response
      type: object
      x-go-name: VistasUpdateResponseBody
    watch-event:
      description: Describes the types of watch events present on an object.
      enum:
      - comments
      - mentions
      - updates
      type: string
    watchers-get-request:
      properties:
        id:
          description: The object's ID.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      required:
      - id
      title: watchers-get-request
      type: object
    watchers-get-response:
      properties:
        events:
          description: The events that the requesting user is watching.
          items:
            $ref: '#/components/schemas/watch-event'
          type: array
      required:
      - events
      title: watchers-get-response
      type: object
      x-go-name: WatchersGetResponseBody
    watchers-list-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from, otherwise if not provided,
            then iteration starts from the beginning.
          type: string
        events:
          description: |
            The watch events that must be present. If empty, all watchers that
            contain at least one watched event are returned, otherwise watchers
            that contain at least one of the provided events will be returned.
          items:
            $ref: '#/components/schemas/watch-event'
          type: array
        id:
          description: The object's ID.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
        limit:
          description: |
            The maximum number of watchers to return. If not set or `<= 0`,
            then this defaults to `50`.
          format: int32
          type: integer
      required:
      - id
      title: watchers-list-request
      type: object
    watchers-list-response:
      properties:
        next_cursor:
          description: |
            The cursor that should be used to iterate the next sequence of
            results, otherwise if not set, then no elements exist after.
          type: string
        users:
          description: The list of users set as watchers on the object.
          items:
            $ref: '#/components/schemas/user-summary'
          type: array
      required:
      - users
      title: watchers-list-response
      type: object
      x-go-name: WatchersListResponseBody
    watchers-update-request:
      properties:
        events:
          description: |
            The watch events that the users will be updated for on the object.
            At least one event must be specified for add.
          items:
            $ref: '#/components/schemas/watch-event'
          type: array
        id:
          description: The object's ID.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
        watchers:
          $ref: '#/components/schemas/watchers-update-request-watchers'
      required:
      - events
      - id
      title: watchers-update-request
      type: object
    watchers-update-request-watchers:
      properties:
        add:
          description: The list of users to add as watchers on the object.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        remove:
          description: The list of users to remove as watchers on the object.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: watchers-update-request-watchers
      type: object
    watchers-update-response:
      title: watchers-update-response
      type: object
      x-go-name: WatchersUpdateResponseBody
    webhook:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          event_types:
            description: The event types that the webhook will receive.
            items:
              $ref: '#/components/schemas/webhook-event-type'
            type: array
          secret:
            description: The secret to use for verifying webhook events.
            format: byte
            type: string
          status:
            $ref: '#/components/schemas/webhook-status'
          unique_key:
            description: |
              The client-provided unique key that's associated with the webhook.
            format: byte
            type: string
          url:
            description: The URL of the webhook endpoint.
            type: string
        required:
        - secret
        - status
        - url
        type: object
      title: webhook
    webhook-event-request:
      properties:
        account_created:
          $ref: '#/components/schemas/event-account-created'
        account_deleted:
          $ref: '#/components/schemas/event-account-deleted'
        account_updated:
          $ref: '#/components/schemas/event-account-updated'
        article_created:
          $ref: '#/components/schemas/event-article-created'
        article_deleted:
          $ref: '#/components/schemas/event-article-deleted'
        article_updated:
          $ref: '#/components/schemas/event-article-updated'
        artifact_created:
          $ref: '#/components/schemas/event-artifact-created'
        artifact_deleted:
          $ref: '#/components/schemas/event-artifact-deleted'
        artifact_updated:
          $ref: '#/components/schemas/event-artifact-updated'
        conversation_created:
          $ref: '#/components/schemas/event-conversation-created'
        conversation_deleted:
          $ref: '#/components/schemas/event-conversation-deleted'
        conversation_updated:
          $ref: '#/components/schemas/event-conversation-updated'
        dev_user_created:
          $ref: '#/components/schemas/event-dev-user-created'
        dev_user_deleted:
          $ref: '#/components/schemas/event-dev-user-deleted'
        dev_user_updated:
          $ref: '#/components/schemas/event-dev-user-updated'
        flow_created:
          $ref: '#/components/schemas/event-flow-created'
        flow_deleted:
          $ref: '#/components/schemas/event-flow-deleted'
        flow_updated:
          $ref: '#/components/schemas/event-flow-updated'
        id:
          description: The event's ID.
          type: string
        id_v1:
          description: The event's ID.
          type: string
        link_created:
          $ref: '#/components/schemas/event-link-created'
        link_deleted:
          $ref: '#/components/schemas/event-link-deleted'
        link_updated:
          $ref: '#/components/schemas/event-link-updated'
        marketplace_item_created:
          $ref: '#/components/schemas/event-marketplace-item-created'
        marketplace_item_deleted:
          $ref: '#/components/schemas/event-marketplace-item-deleted'
        marketplace_item_updated:
          $ref: '#/components/schemas/event-marketplace-item-updated'
        part_created:
          $ref: '#/components/schemas/event-part-created'
        part_deleted:
          $ref: '#/components/schemas/event-part-deleted'
        part_updated:
          $ref: '#/components/schemas/event-part-updated'
        rev_org_created:
          $ref: '#/components/schemas/event-rev-org-created'
        rev_org_deleted:
          $ref: '#/components/schemas/event-rev-org-deleted'
        rev_org_updated:
          $ref: '#/components/schemas/event-rev-org-updated'
        rev_user_created:
          $ref: '#/components/schemas/event-rev-user-created'
        rev_user_deleted:
          $ref: '#/components/schemas/event-rev-user-deleted'
        rev_user_updated:
          $ref: '#/components/schemas/event-rev-user-updated'
        snap_in_created:
          $ref: '#/components/schemas/event-snap-in-created'
        snap_in_deleted:
          $ref: '#/components/schemas/event-snap-in-deleted'
        snap_in_updated:
          $ref: '#/components/schemas/event-snap-in-updated'
        tag_created:
          $ref: '#/components/schemas/event-tag-created'
        tag_deleted:
          $ref: '#/components/schemas/event-tag-deleted'
        tag_updated:
          $ref: '#/components/schemas/event-tag-updated'
        timeline_entry_created:
          $ref: '#/components/schemas/event-timeline-entry-created'
        timeline_entry_deleted:
          $ref: '#/components/schemas/event-timeline-entry-deleted'
        timeline_entry_updated:
          $ref: '#/components/schemas/event-timeline-entry-updated'
        timestamp:
          description: |
            Timestamp of the webhook's invocation for the event. Note this
            should be used to protect against replay attacks, where the event
            should only be processed if the timestamp isn't stale by several
            seconds.
          format: date-time
          type: string
        type:
          $ref: '#/components/schemas/webhook-event-type'
        unique_key:
          description: |
            The unique key that was provided upon the webhook's creation.
          format: byte
          type: string
        verify:
          $ref: '#/components/schemas/webhook-event-verify'
        vista_created:
          $ref: '#/components/schemas/event-vista-created'
        vista_deleted:
          $ref: '#/components/schemas/event-vista-deleted'
        vista_updated:
          $ref: '#/components/schemas/event-vista-updated'
        webhook_created:
          $ref: '#/components/schemas/event-webhook-created'
        webhook_deleted:
          $ref: '#/components/schemas/event-webhook-deleted'
        webhook_id:
          description: ID of the webhook for the event.
          example: don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>
          type: string
        webhook_id_v1:
          description: ID of the webhook for the event.
          type: string
        webhook_updated:
          $ref: '#/components/schemas/event-webhook-updated'
        work_created:
          $ref: '#/components/schemas/event-work-created'
        work_deleted:
          $ref: '#/components/schemas/event-work-deleted'
        work_updated:
          $ref: '#/components/schemas/event-work-updated'
      required:
      - id
      - webhook_id
      title: webhook-event-request
      type: object
    webhook-event-response:
      properties:
        challenge:
          description: |
            The challenge from the "verify" request, otherwise this should not
            be set for other request types.
          format: byte
          type: string
      title: webhook-event-response
      type: object
      x-go-name: WebhookEventResponseBody
    webhook-event-type:
      description: The event types that the webhook will receive.
      enum:
      - account_created
      - account_deleted
      - account_updated
      - article_created
      - article_deleted
      - article_updated
      - artifact_created
      - artifact_deleted
      - artifact_updated
      - command_created
      - command_deleted
      - command_updated
      - conversation_created
      - conversation_deleted
      - conversation_updated
      - custom_schema_fragment_created
      - custom_schema_fragment_deleted
      - custom_schema_fragment_updated
      - dev_user_created
      - dev_user_deleted
      - dev_user_updated
      - flow_created
      - flow_deleted
      - flow_updated
      - link_created
      - link_deleted
      - link_updated
      - marketplace_item_created
      - marketplace_item_deleted
      - marketplace_item_updated
      - part_created
      - part_deleted
      - part_updated
      - rev_org_created
      - rev_org_deleted
      - rev_org_updated
      - rev_user_created
      - rev_user_deleted
      - rev_user_updated
      - snap_in_created
      - snap_in_deleted
      - snap_in_updated
      - tag_created
      - tag_deleted
      - tag_updated
      - timeline_entry_created
      - timeline_entry_deleted
      - timeline_entry_updated
      - verify
      - vista_created
      - vista_deleted
      - vista_updated
      - webhook_created
      - webhook_deleted
      - webhook_updated
      - work_created
      - work_deleted
      - work_updated
      type: string
    webhook-event-verify:
      properties:
        challenge:
          description: The challenge that must be echoed in the response.
          format: byte
          type: string
      required:
      - challenge
      title: webhook-event-verify
      type: object
    webhook-status:
      description: The status of the webhook.
      enum:
      - active
      - inactive
      - unverified
      type: string
    webhook-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      title: webhook-summary
    webhooks-create-request:
      description: The request to create a new webhook.
      properties:
        event_types:
          description: The event types that the webhook endpoint will receive.
          items:
            $ref: '#/components/schemas/webhook-event-type'
          type: array
        secret:
          description: |
            The secret to use when verifying webhook events. If provided, the
            secret must be between 8 and 32 bytes (inclusive). If not set, a
            secret will be automatically generated and provided in the
            response.
          format: byte
          type: string
        unique_key:
          description: |
            A unique key to associate with the webhook. This key can be used to
            ensure idempotency of webhook creations within a Dev organization,
            and will be provided in every webhook event. If set, the value must
            be non-empty. If provided and another webhook in the Dev
            organization has the same unique key, then status `409 Conflict`
            will be returned.
          format: byte
          type: string
        url:
          description: The URL of the webhook endpoint.
          type: string
      required:
      - url
      title: webhooks-create-request
      type: object
    webhooks-create-response:
      description: The response to creating a new webhook.
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
      - webhook
      title: webhooks-create-response
      type: object
      x-go-name: WebhooksCreateResponseBody
    webhooks-delete-request:
      description: The request to delete a webhook.
      properties:
        id:
          description: ID for the webhook.
          example: don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>
          type: string
      required:
      - id
      title: webhooks-delete-request
      type: object
    webhooks-delete-response:
      description: The response to deleting the webhook.
      title: webhooks-delete-response
      type: object
      x-go-name: WebhooksDeleteResponseBody
    webhooks-get-request:
      description: The request to get a webhook's information.
      properties:
        id:
          description: ID for the webhook.
          example: don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>
          type: string
      required:
      - id
      title: webhooks-get-request
      type: object
    webhooks-get-response:
      description: The response to getting the information for the webhook.
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
      - webhook
      title: webhooks-get-response
      type: object
      x-go-name: WebhooksGetResponseBody
    webhooks-list-request:
      description: The request to list the webhooks.
      title: webhooks-list-request
      type: object
    webhooks-list-response:
      description: The response to listing the webhooks.
      properties:
        webhooks:
          description: The list of webhooks.
          items:
            $ref: '#/components/schemas/webhook'
          type: array
      required:
      - webhooks
      title: webhooks-list-response
      type: object
      x-go-name: WebhooksListResponseBody
    webhooks-update-action:
      description: The action to update the webhook's status.
      enum:
      - activate
      - deactivate
      type: string
    webhooks-update-request:
      description: The request to update a webhook.
      properties:
        action:
          $ref: '#/components/schemas/webhooks-update-action'
        event_types:
          $ref: '#/components/schemas/webhooks-update-request-event-types'
        id:
          description: ID for the webhook.
          example: don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>
          type: string
        secret:
          description: |
            If provided, updates the secret that's used when verifying webhook
            events, which must be between 8 and 32 bytes (inclusive). Otherwise
            if empty, then a new secret is generated. If the webhook is active,
            then its status will transition to the 'unverified' state and it
            won't receive any object events until successfully verified.
          format: byte
          type: string
        url:
          description: |
            The webhook's updated URL. If the webhook is active, then the
            webhook's status will transition to the 'unverified' state and it
            won't receive any object events until successfully verified.
          type: string
      required:
      - id
      title: webhooks-update-request
      type: object
    webhooks-update-request-event-types:
      properties:
        add:
          description: |
            The event types to add. If a provided event type is already set for
            the webhook, then nothing is done. Note this is mutually exclusive
            with 'set'.
          items:
            $ref: '#/components/schemas/webhook-event-type'
          type: array
        remove:
          description: |
            The event types to remove. If a provided event type isn't set for
            the webhook, then nothing is done. Note this is mutually exclusive
            with 'set'.
          items:
            $ref: '#/components/schemas/webhook-event-type'
          type: array
        set:
          description: |
            The updated event types, which will replace the webhook's current
            event types. Note this is mutually exclusive with 'add' and
            'remove'.
          items:
            $ref: '#/components/schemas/webhook-event-type'
          type: array
      title: webhooks-update-request-event-types
      type: object
    webhooks-update-response:
      description: The response to updating the webhook.
      properties:
        webhook:
          $ref: '#/components/schemas/webhook'
      required:
      - webhook
      title: webhooks-update-response
      type: object
      x-go-name: WebhooksUpdateResponseBody
    weekly-org-schedule:
      description: The schedule for each week.
      properties:
        intervals:
          description: The 'on' intervals of the week.
          items:
            $ref: '#/components/schemas/weekly-org-schedule-interval'
          type: array
        period_name:
          description: Describes in which named period the schedule applies.
          type: string
      title: weekly-org-schedule
      type: object
    weekly-org-schedule-interval:
      description: |
        A time interval within a week when the schedule is 'on'. It is defined
        in minutes counting from Sunday midnight to Sunday midnight. (that is,
        0 is Sunday 00:00).
      properties:
        from:
          description: The time (in minutes) when the interval starts.
          format: int32
          type: integer
        to:
          description: |
            The time (in minutes) when the interval ends. Should be larger than
            'from'.
          format: int32
          type: integer
      title: weekly-org-schedule-interval
      type: object
    window-based-insight:
      allOf:
      - $ref: '#/components/schemas/insight-base'
      - properties:
          bad_delta_threshold:
            description: |
              Threshold of delta beyond which it should be considered bad.
            format: double
            type: number
          good_delta_threshold:
            description: |
              Threshold of delta beyond which it should be considered good.
            format: double
            type: number
        type: object
      title: window-based-insight
    window-based-insight-summary:
      allOf:
      - $ref: '#/components/schemas/insight-base-summary'
      title: window-based-insight-summary
    window-based-insight-value:
      allOf:
      - $ref: '#/components/schemas/insight-value-base'
      - properties:
          previous_value_for_one_week:
            description: |
              Previous value of the insight with one week as the window value.
            format: double
            type: number
          value_for_one_week:
            description: Value of the insight with one week as the window value.
            format: double
            type: number
        type: object
      title: window-based-insight-value
    window-based-insight-value-summary:
      allOf:
      - $ref: '#/components/schemas/insight-value-base-summary'
      title: window-based-insight-value-summary
    work:
      discriminator:
        mapping:
          custom_work: '#/components/schemas/custom-work'
          issue: '#/components/schemas/issue'
          opportunity: '#/components/schemas/opportunity'
          project: '#/components/schemas/project'
          task: '#/components/schemas/task'
          ticket: '#/components/schemas/ticket'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/custom-work'
      - $ref: '#/components/schemas/issue'
      - $ref: '#/components/schemas/opportunity'
      - $ref: '#/components/schemas/project'
      - $ref: '#/components/schemas/task'
      - $ref: '#/components/schemas/ticket'
      properties:
        type:
          $ref: '#/components/schemas/work-type'
      required:
      - type
      title: work
      type: object
    work-base:
      allOf:
      - $ref: '#/components/schemas/atom-base'
      - properties:
          actual_close_date:
            description: Timestamp when the work was actually completed.
            format: date-time
            type: string
          age_days:
            description: Age of the work item in day(s).
            format: double
            type: number
          applies_to_part:
            $ref: '#/components/schemas/part-summary'
          artifacts:
            description: The artifacts attached to the work item.
            items:
              $ref: '#/components/schemas/artifact-summary'
            type: array
          body:
            description: Body of the work object.
            type: string
          custom_fields:
            description: Custom fields.
            type: object
          custom_schema_fragments:
            description: Custom schema fragments.
            items:
              type: string
            type: array
          custom_schema_fragments_v1:
            description: Custom schema fragments.
            type: string
          links:
            description: Links associated with the object.
            items:
              $ref: '#/components/schemas/archetype-link-summary'
            type: array
          owned_by:
            description: The users that own the work.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          reactions:
            description: Reactions on the object.
            items:
              $ref: '#/components/schemas/object-reaction'
            type: array
          references:
            description: The object IDs referenced in the body.
            items:
              $ref: '#/components/schemas/atom-summary'
            type: array
          reported_by:
            description: Users that reported the work.
            items:
              $ref: '#/components/schemas/user-summary'
            type: array
          schema_fragment_ids:
            deprecated: true
            description: Combination of stock and custom schema fragment IDs.
            items:
              type: string
            type: array
          schema_fragment_ids_v1:
            description: Combination of stock and custom schema fragment IDs.
            type: string
          stage:
            $ref: '#/components/schemas/stage'
          state:
            description: State of the object based upon the stage.
            type: string
          stock_schema_fragment:
            description: Stock schema fragment.
            type: string
          stock_schema_fragment_v1:
            description: Stock schema fragment.
            type: string
          subtype:
            description: Subtype corresponding to the custom type fragment.
            type: string
          tags:
            description: Tags associated with the object.
            items:
              $ref: '#/components/schemas/tag-with-value'
            type: array
          target_close_date:
            description: Timestamp when the work is expected to be complete.
            format: date-time
            type: string
          title:
            description: Title of the work object.
            type: string
        required:
        - owned_by
        - title
        type: object
      title: work-base
    work-base-summary:
      allOf:
      - $ref: '#/components/schemas/atom-base-summary'
      - properties:
          title:
            description: Title of the work object.
            type: string
        required:
        - title
        type: object
      title: work-base-summary
    work-context:
      description: Work fields required for recommendation.
      properties:
        applies_to_part:
          description: The part that the work applies to.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        applies_to_part_id:
          deprecated: true
          description: The part that the work applies to.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        body:
          description: Body of the work.
          type: string
        owned_by:
          description: The users that own the work.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: The users that own the work.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: List of tag ids.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags:
          description: List of tag ids.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        title:
          description: Title of the work.
          type: string
        type:
          $ref: '#/components/schemas/work-type'
      required:
      - title
      - type
      title: work-context
      type: object
    work-deflect-base:
      properties:
        confidence:
          description: |
            Confidence score of the deflection recommendation. Range of the
            confidence must be 0 -> 1.
          format: float
          type: number
      required:
      - confidence
      title: work-deflect-base
      type: object
    work-deflect-request:
      description: Work deflect request.
      properties:
        context:
          $ref: '#/components/schemas/work-context'
      required:
      - context
      title: work-deflect-request
      type: object
    work-deflect-response:
      description: Work Deflect response.
      properties:
        results:
          description: The deflection results.
          items:
            $ref: '#/components/schemas/work-deflect-result'
          type: array
        version:
          description: Version of the deflection model.
          type: string
      required:
      - results
      title: work-deflect-response
      type: object
      x-go-name: WorkDeflectResponseBody
    work-deflect-result:
      allOf:
      - $ref: '#/components/schemas/work-deflect-base'
      - properties:
          work:
            $ref: '#/components/schemas/work-summary'
        required:
        - work
        type: object
      description: A work deflection result.
      title: work-deflect-result
    work-search-summary:
      allOf:
      - $ref: '#/components/schemas/search-summary-base'
      - properties:
          work:
            $ref: '#/components/schemas/work-summary'
        required:
        - work
        type: object
      title: work-search-summary
    work-summary:
      discriminator:
        mapping:
          custom_work: '#/components/schemas/custom-work-summary'
          issue: '#/components/schemas/issue-summary'
          opportunity: '#/components/schemas/opportunity-summary'
          project: '#/components/schemas/project-summary'
          task: '#/components/schemas/task-summary'
          ticket: '#/components/schemas/ticket-summary'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/custom-work-summary'
      - $ref: '#/components/schemas/issue-summary'
      - $ref: '#/components/schemas/opportunity-summary'
      - $ref: '#/components/schemas/project-summary'
      - $ref: '#/components/schemas/task-summary'
      - $ref: '#/components/schemas/ticket-summary'
      properties:
        type:
          $ref: '#/components/schemas/work-type'
      required:
      - type
      title: work-summary
      type: object
    work-type:
      enum:
      - custom_work
      - issue
      - opportunity
      - project
      - task
      - ticket
      type: string
    works-count-request:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_date:
          $ref: '#/components/schemas/date-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
      title: works-count-request
      type: object
    works-count-response:
      properties:
        count:
          description: Count of works matching the filter.
          format: int32
          type: integer
      required:
      - count
      title: works-count-response
      type: object
      x-go-name: WorksCountResponseBody
    works-create-request:
      additionalProperties: true
      discriminator:
        mapping:
          custom_work: '#/components/schemas/works-create-request-custom-work'
          issue: '#/components/schemas/works-create-request-issue'
          opportunity: '#/components/schemas/works-create-request-opportunity'
          task: '#/components/schemas/works-create-request-task'
          ticket: '#/components/schemas/works-create-request-ticket'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/works-create-request-custom-work'
      - $ref: '#/components/schemas/works-create-request-issue'
      - $ref: '#/components/schemas/works-create-request-opportunity'
      - $ref: '#/components/schemas/works-create-request-task'
      - $ref: '#/components/schemas/works-create-request-ticket'
      properties:
        applies_to_part:
          description: |
            The [part](https://devrev.ai/docs/product/parts) that the work
            applies to. Specifying a part is required when creating tickets and
            issues.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        applies_to_part_id:
          deprecated: true
          description: The part that the work applies to.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        artifact_ids:
          deprecated: true
          description: The IDs of the new artifact items.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        artifacts:
          description: |
            The IDs of the artifacts to associate with the work item.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
        body:
          description: Body of the work object.
          type: string
        custom_schema_fragments:
          description: The custom schema fragments to use.
          items:
            type: string
          type: array
        links:
          description: Links associated with the work item.
          items:
            $ref: '#/components/schemas/embed-links-create-request'
          type: array
        owned_by:
          description: The users that own the work.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: The users that own the work.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        reported_by:
          description: The users that reported the work.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        reported_by_ids:
          deprecated: true
          description: The users that reported the work.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-init'
        tags:
          description: Tags associated with the work item.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
        target_close_date:
          description: Timestamp for when the work is expected to be complete.
          format: date-time
          type: string
        title:
          description: Title of the work object.
          type: string
        type:
          $ref: '#/components/schemas/work-type'
      required:
      - title
      - type
      title: works-create-request
      type: object
    works-create-request-custom-work:
      title: works-create-request-custom-work
      type: object
    works-create-request-issue:
      properties:
        actual_effort:
          description: The actual effort, in hours, to complete the issue.
          format: double
          type: number
        estimated_effort:
          description: The estimated effort, in hours, to complete the issue.
          format: double
          type: number
        priority:
          $ref: '#/components/schemas/issue-priority'
        sprint:
          description: The sprint that the issue belongs to.
          type: string
      title: works-create-request-issue
      type: object
    works-create-request-opportunity:
      properties:
        account:
          description: |
            The ID of the account that the opportunity is associated with.
          type: string
        amount:
          description: Total opportunity amount.
          format: double
          type: number
        contacts:
          description: Contacts involved in the opportunity.
          items:
            type: string
          type: array
        customer_budget:
          description: Budget of the customer.
          format: double
          type: number
        probability:
          description: |
            The probability of winning the deal, lies between 0.0 and 1.0.
          format: double
          type: number
      required:
      - account
      title: works-create-request-opportunity
      type: object
    works-create-request-task:
      properties:
        actual_effort:
          description: The actual effort, in hours, to complete the issue.
          format: double
          type: number
        embedded:
          description: Whether the task is embedded in the work.
          type: boolean
        estimated_effort:
          description: The estimated effort, in hours, to complete the issue.
          format: double
          type: number
        priority:
          $ref: '#/components/schemas/task-priority'
        start_date:
          description: Timestamp when the task was started.
          format: date-time
          type: string
      title: works-create-request-task
      type: object
    works-create-request-ticket:
      properties:
        group:
          description: The group that the ticket is associated with.
          type: string
        rev_org:
          description: The Rev organization that the ticket is associated with.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        rev_org_id:
          deprecated: true
          description: The Rev organization that the ticket is associated with.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
        severity:
          $ref: '#/components/schemas/ticket-severity'
      title: works-create-request-ticket
      type: object
    works-create-response:
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
      - work
      title: works-create-response
      type: object
      x-go-name: WorksCreateResponseBody
    works-delete-request:
      properties:
        id:
          description: The work's ID.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      required:
      - id
      title: works-delete-request
      type: object
    works-delete-response:
      title: works-delete-response
      type: object
      x-go-name: WorksDeleteResponseBody
    works-export-request:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_date:
          $ref: '#/components/schemas/date-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        first:
          description: |
            The number of work items to return. The default is '50', the
            maximum is '5000'.
          format: int32
          type: integer
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        sort_by:
          description: |
            Fields to sort the work items by and the direction to sort them.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
      title: works-export-request
      type: object
    works-export-response:
      properties:
        works:
          description: The resulting collection of work items.
          items:
            $ref: '#/components/schemas/work'
          type: array
      required:
      - works
      title: works-export-response
      type: object
      x-go-name: WorksExportResponseBody
    works-filter-created-by-operator-type:
      enum:
      - any
      - not_any
      type: string
    works-filter-issue:
      properties:
        applies_to_part:
          $ref: '#/components/schemas/applies-to-part-filter'
        priorities:
          deprecated: true
          description: Filters for issues with any of the provided priorities.
          items:
            $ref: '#/components/schemas/issue-priority'
          type: array
        priority:
          description: Filters for issues with any of the provided priorities.
          items:
            $ref: '#/components/schemas/issue-priority'
          type: array
        rev_orgs:
          description: |
            Filters for issues with any of the provided Rev organizations.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        rev_orgs_op:
          $ref: '#/components/schemas/works-filter-issue-rev-orgs-op-operator-type'
        sprint:
          description: Filters for issues with any of the sprint.
          items:
            type: string
          type: array
        sprint_op:
          $ref: '#/components/schemas/works-filter-issue-sprint-op-operator-type'
        subtype:
          description: Filters for issues with any of the provided subtypes.
          items:
            type: string
          type: array
      title: works-filter-issue
      type: object
    works-filter-issue-rev-orgs-op-operator-type:
      enum:
      - all
      - any
      - empty
      - not_empty
      type: string
    works-filter-issue-sprint-op-operator-type:
      enum:
      - any
      - empty
      - not_empty
      type: string
    works-filter-opportunity:
      properties:
        account:
          description: |
            Filters for opportunities belonging to any of the provided
            accounts.
          items:
            type: string
          type: array
      title: works-filter-opportunity
      type: object
    works-filter-owned-by-operator-type:
      enum:
      - any
      - not_any
      type: string
    works-filter-tag-ids-operator-type:
      enum:
      - all
      - any
      - empty
      - not_any
      - not_empty
      type: string
    works-filter-task:
      properties:
        applies_to_part:
          $ref: '#/components/schemas/applies-to-part-filter'
        embedded:
          description: |
            Filter for tasks with any of the provided embedded values.
          items:
            type: boolean
          type: array
        priorities:
          deprecated: true
          description: Filters for tasks with any of the provided priorities.
          items:
            $ref: '#/components/schemas/task-priority'
          type: array
        priority:
          description: Filters for tasks with any of the provided priorities.
          items:
            $ref: '#/components/schemas/task-priority'
          type: array
        start_after_date:
          description: |
            Filters for tasks which started after the provided timestamp.
          format: date-time
          type: string
        start_before_date:
          description: |
            Filters for tasks which started before the provided timestamp.
          format: date-time
          type: string
      title: works-filter-task
      type: object
    works-filter-ticket:
      properties:
        applies_to_part:
          $ref: '#/components/schemas/applies-to-part-filter'
        rev_org:
          description: |
            Filters for tickets that are associated with any of the provided
            Rev organizations.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        rev_org_ids:
          deprecated: true
          description: |
            Filters for tickets associated to the provided Rev organizations
            using an operator.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
        rev_org_ids_op:
          $ref: '#/components/schemas/works-filter-ticket-rev-org-i-ds-operator-type'
        severities:
          deprecated: true
          description: Filters for tickets with any of the provided severities.
          items:
            $ref: '#/components/schemas/ticket-severity'
          type: array
        severity:
          description: Filters for tickets with any of the provided severities.
          items:
            $ref: '#/components/schemas/ticket-severity'
          type: array
        sla_summary:
          $ref: '#/components/schemas/sla-summary-filter'
        subtype:
          description: Filters for tickets with any of the provided subtypes.
          items:
            type: string
          type: array
      title: works-filter-ticket
      type: object
    works-filter-ticket-rev-org-i-ds-operator-type:
      enum:
      - any
      - empty
      - not_any
      - not_empty
      type: string
    works-get-request:
      properties:
        id:
          description: The work's ID.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      required:
      - id
      title: works-get-request
      type: object
    works-get-response:
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
      - work
      title: works-get-response
      type: object
      x-go-name: WorksGetResponseBody
    works-group:
      properties:
        key:
          description: Unique key according to which the items are grouped.
          type: string
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        works:
          description: The group of works.
          items:
            $ref: '#/components/schemas/work'
          type: array
      required:
      - key
      - works
      title: works-group
      type: object
    works-group-request:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        group_by:
          description: The field to group the works by.
          type: string
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        limit:
          description: |
            The maximum number of groups to return. If not set, then the
            default is '10'.
          format: int32
          type: integer
        limit_per_group:
          description: |
            The maximum number of works to return for an individual group. If
            not set, then the default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        sort_by:
          description: Comma-separated fields to sort the works by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
      required:
      - group_by
      title: works-group-request
      type: object
    works-group-response:
      properties:
        groups:
          description: The list of groups.
          items:
            $ref: '#/components/schemas/works-group'
          type: array
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
      required:
      - groups
      title: works-group-response
      type: object
      x-go-name: WorksGroupResponseBody
    works-list-request:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_date:
          $ref: '#/components/schemas/date-filter'
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        limit:
          description: |
            The maximum number of works to return. The default is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        sort_by:
          description: |
            Fields to sort the works by and the direction to sort them.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
      title: works-list-request
      type: object
    works-list-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        works:
          description: The list of works.
          items:
            $ref: '#/components/schemas/work'
          type: array
      required:
      - works
      title: works-list-response
      type: object
      x-go-name: WorksListResponseBody
    works-suggest-request:
      properties:
        cursor:
          description: |
            The cursor to resume iteration from. If not provided, then
            iteration starts from the beginning.
          type: string
        limit:
          description: |
            The maximum number of works to return. If not set, then the default
            is '50'.
          format: int32
          type: integer
        mode:
          $ref: '#/components/schemas/list-mode'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      title: works-suggest-request
      type: object
    works-suggest-response:
      properties:
        next_cursor:
          description: |
            The cursor used to iterate subsequent results in accordance to the
            sort order. If not set, then no later elements exist.
          type: string
        prev_cursor:
          description: |
            The cursor used to iterate preceding results in accordance to the
            sort order. If not set, then no prior elements exist.
          type: string
        works:
          description: The suggested work summaries.
          items:
            $ref: '#/components/schemas/work-summary'
          type: array
      required:
      - works
      title: works-suggest-response
      type: object
      x-go-name: WorksSuggestResponseBody
    works-update-request:
      additionalProperties: true
      discriminator:
        mapping:
          custom_work: '#/components/schemas/works-update-request-custom-work'
          issue: '#/components/schemas/works-update-request-issue'
          none: '#/components/schemas/empty'
          opportunity: '#/components/schemas/works-update-request-opportunity'
          task: '#/components/schemas/works-update-request-task'
          ticket: '#/components/schemas/works-update-request-ticket'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/works-update-request-custom-work'
      - $ref: '#/components/schemas/works-update-request-issue'
      - $ref: '#/components/schemas/works-update-request-opportunity'
      - $ref: '#/components/schemas/works-update-request-task'
      - $ref: '#/components/schemas/works-update-request-ticket'
      properties:
        applies_to_part:
          description: Updates the part that the work applies to.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        applies_to_part_id:
          deprecated: true
          description: Updates the part that the work applies to.
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
        artifact_ids:
          $ref: '#/components/schemas/works-update-request-artifact-ids'
        artifacts:
          $ref: '#/components/schemas/works-update-request-artifact-ids'
        body:
          description: |
            Updated body of the work object, or unchanged if not provided.
          type: string
        custom_schema_fragments:
          description: The custom schema fragments to use.
          items:
            type: string
          type: array
        id:
          description: The work's ID.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
        owned_by:
          $ref: '#/components/schemas/works-update-request-owned-by'
        owned_by_ids:
          $ref: '#/components/schemas/works-update-request-owned-by-ids'
        reported_by:
          $ref: '#/components/schemas/works-update-request-reported-by'
        reported_by_ids:
          $ref: '#/components/schemas/works-update-request-reported-by-ids'
        stage:
          $ref: '#/components/schemas/stage-update'
        tags:
          $ref: '#/components/schemas/works-update-request-tags'
        target_close_date:
          description: |
            Updates the timestamp for when the work is expected to be complete.
          format: date-time
          type: string
        title:
          description: |
            Updated title of the work object, or unchanged if not provided.
          type: string
        type:
          $ref: '#/components/schemas/work-type'
      required:
      - id
      - type
      title: works-update-request
      type: object
    works-update-request-artifact-ids:
      properties:
        set:
          description: Sets the IDs to the provided artifact IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          items:
            type: string
          type: array
      title: works-update-request-artifact-ids
      type: object
    works-update-request-custom-work:
      title: works-update-request-custom-work
      type: object
    works-update-request-issue:
      properties:
        actual_effort:
          description: |
            Updates the actual effort, in hours, to complete the issue.
          format: double
          nullable: true
          type: number
        estimated_effort:
          description: |
            Updates the estimated effort, in hours, to complete the issue.
          format: double
          nullable: true
          type: number
        priority:
          $ref: '#/components/schemas/issue-priority'
        sprint:
          description: Updates the sprint that the issue belongs to.
          nullable: true
          type: string
      title: works-update-request-issue
      type: object
    works-update-request-opportunity:
      properties:
        account:
          description: |
            Updates the account that the opportunity is associated with.
          type: string
        amount:
          description: Updates the total opportunity amount.
          format: double
          nullable: true
          type: number
        contacts:
          $ref: '#/components/schemas/works-update-request-opportunity-contacts'
        customer_budget:
          description: Updates the customer budget.
          format: double
          nullable: true
          type: number
        probability:
          description: |
            Updates the probability of winning the deal, lies between 0.0 and
            1.0.
          format: double
          nullable: true
          type: number
      title: works-update-request-opportunity
      type: object
    works-update-request-opportunity-contacts:
      properties:
        set:
          description: Sets the contact IDs to the provided contact IDs.
          items:
            type: string
          type: array
      required:
      - set
      title: works-update-request-opportunity-contacts
      type: object
    works-update-request-owned-by:
      properties:
        set:
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: works-update-request-owned-by
      type: object
    works-update-request-owned-by-ids:
      properties:
        set:
          description: |
            Sets the owner IDs to the provided user IDs. This must not be
            empty.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: works-update-request-owned-by-ids
      type: object
    works-update-request-reported-by:
      properties:
        set:
          description: |
            Sets the users that reported the work to the provided user IDs.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: works-update-request-reported-by
      type: object
    works-update-request-reported-by-ids:
      properties:
        set:
          description: Sets the reportedBy IDs to the provided user IDs.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      title: works-update-request-reported-by-ids
      type: object
    works-update-request-tags:
      properties:
        set:
          description: Sets the provided tags on the work item.
          items:
            $ref: '#/components/schemas/set-tag-with-value'
          type: array
      title: works-update-request-tags
      type: object
    works-update-request-task:
      properties:
        actual_effort:
          description: |
            Updates the actual effort, in hours, to complete the task.
          format: double
          nullable: true
          type: number
        embedded:
          description: Whether the task is embedded in the work.
          type: boolean
        estimated_effort:
          description: |
            Updates the estimated effort, in hours, to complete the task.
          format: double
          nullable: true
          type: number
        priority:
          $ref: '#/components/schemas/task-priority'
        start_date:
          description: Timestamp when the task was started.
          format: date-time
          type: string
      title: works-update-request-task
      type: object
    works-update-request-ticket:
      properties:
        group:
          description: The group that the ticket is associated with.
          type: string
        rev_org:
          description: |
            Updates the Rev organization that the ticket is associated with.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          nullable: true
          type: string
        rev_org_id:
          deprecated: true
          description: |
            Updates the Rev organization that the ticket is associated with.
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          nullable: true
          type: string
        severity:
          $ref: '#/components/schemas/ticket-severity'
      title: works-update-request-ticket
      type: object
    works-update-response:
      properties:
        work:
          $ref: '#/components/schemas/work'
      required:
      - work
      title: works-update-response
      type: object
      x-go-name: WorksUpdateResponseBody
    works-vista-group-item:
      allOf:
      - $ref: '#/components/schemas/group-base'
      - discriminator:
          mapping:
            curated: '#/components/schemas/works-vista-group-item-curated-group'
            dynamic: '#/components/schemas/works-vista-group-item-dynamic-group'
          propertyName: type
        oneOf:
        - $ref: '#/components/schemas/works-vista-group-item-curated-group'
        - $ref: '#/components/schemas/works-vista-group-item-dynamic-group'
        properties:
          type:
            $ref: '#/components/schemas/works-vista-group-item-type'
        required:
        - type
        type: object
      description: Represents a nested works vista group object.
      title: works-vista-group-item
    works-vista-group-item-curated-group:
      properties:
        items:
          description: Static list of work items.
          items:
            $ref: '#/components/schemas/work-summary'
          type: array
      title: works-vista-group-item-curated-group
      type: object
    works-vista-group-item-dynamic-group:
      properties:
        filter:
          $ref: '#/components/schemas/works-vista-group-item-dynamic-group-filter'
      required:
      - filter
      title: works-vista-group-item-dynamic-group
      type: object
    works-vista-group-item-dynamic-group-filter:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids_v1:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          type: string
        ancestor_part_v1:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          type: string
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids_v1:
          description: Filters for work belonging to any of the provided parts.
          type: string
        applies_to_part_v1:
          description: Filters for work belonging to any of the provided parts.
          type: string
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids_v1:
          description: Filters for work created by any of these users.
          type: string
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_by_v1:
          description: Filters for work created by any of these users.
          type: string
        created_date:
          $ref: '#/components/schemas/date-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_v1:
          description: Filters for work excluding the provided work IDs.
          type: string
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids_v1:
          description: Filters for work excluding the provided work IDs.
          type: string
        group_by:
          description: The field to group the collection by.
          type: string
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids_v1:
          description: Filters for work owned by any of these users.
          type: string
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        owned_by_v1:
          description: Filters for work owned by any of these users.
          type: string
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tag_ids_v1:
          description: Filters for work with any of the provided tags.
          type: string
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tags_v1:
          description: Filters for work with any of the provided tags.
          type: string
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
        vista_v1:
          description: Filters for work belonging to the given vista.
          type: string
      title: works-vista-group-item-dynamic-group-filter
      type: object
    works-vista-group-item-type:
      description: Type of works vista group item.
      enum:
      - curated
      - dynamic
      type: string
    works-vista-group-item-update:
      discriminator:
        mapping:
          curated: '#/components/schemas/works-vista-group-item-update-curated-group'
          dynamic: '#/components/schemas/works-vista-group-item-update-dynamic-group'
        propertyName: type
      oneOf:
      - $ref: '#/components/schemas/works-vista-group-item-update-curated-group'
      - $ref: '#/components/schemas/works-vista-group-item-update-dynamic-group'
      properties:
        custom_view:
          $ref: '#/components/schemas/works-vista-group-item-update-custom-view'
        description:
          description: updated description of the group.
          type: string
        end_date:
          description: Timestamp when the vista ends.
          format: date-time
          type: string
        icon_type:
          description: updated icon associated with the group in the UI.
          type: string
        id:
          description: The ID of the vista group to update.
          type: string
        name:
          description: updated name of the group.
          type: string
        start_date:
          description: Timestamp when the vista starts.
          format: date-time
          type: string
        type:
          $ref: '#/components/schemas/works-vista-group-item-type'
      required:
      - type
      title: works-vista-group-item-update
      type: object
    works-vista-group-item-update-curated-group:
      properties:
        items:
          $ref: '#/components/schemas/works-vista-group-item-update-curated-group-items'
      title: works-vista-group-item-update-curated-group
      type: object
    works-vista-group-item-update-curated-group-items:
      properties:
        set:
          description: Sets the items to the provided items.
          items:
            $ref: '#/components/schemas/works-vista-group-item-update-curated-group-items-item-value'
          type: array
      title: works-vista-group-item-update-curated-group-items
      type: object
    works-vista-group-item-update-curated-group-items-item-value:
      properties:
        id:
          description: The ID of the item.
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      required:
      - id
      title: works-vista-group-item-update-curated-group-items-item-value
      type: object
    works-vista-group-item-update-custom-view:
      properties:
        column_properties:
          $ref: '#/components/schemas/works-vista-group-item-update-custom-view-column-properties'
        show_groups:
          description: Boolean to specify whether to show groups or not.
          type: boolean
      title: works-vista-group-item-update-custom-view
      type: object
    works-vista-group-item-update-custom-view-column-properties:
      properties:
        set:
          description: Sets the column property items to provided list.
          items:
            $ref: '#/components/schemas/works-vista-group-item-update-custom-view-column-properties-column-property'
          type: array
      title: works-vista-group-item-update-custom-view-column-properties
      type: object
    works-vista-group-item-update-custom-view-column-properties-column-property:
      properties:
        name:
          description: Name of the column.
          type: string
      required:
      - name
      title: works-vista-group-item-update-custom-view-column-properties-column-property
      type: object
    works-vista-group-item-update-dynamic-group:
      properties:
        filter:
          $ref: '#/components/schemas/works-vista-group-item-update-dynamic-group-filter'
      title: works-vista-group-item-update-dynamic-group
      type: object
    works-vista-group-item-update-dynamic-group-filter:
      properties:
        actual_close_after_date:
          deprecated: true
          description: |
            Filters for work actual_close after the timestamp provided.
          format: date-time
          type: string
        actual_close_before_date:
          deprecated: true
          description: |
            Filters for work actual_close before the timestamp provided.
          format: date-time
          type: string
        actual_close_date:
          $ref: '#/components/schemas/date-filter'
        ancestor_part:
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        ancestor_part_ids:
          deprecated: true
          description: |
            Filters for work which have one of the parts present as its
            ancestor part or primary part.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part:
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        applies_to_part_ids:
          deprecated: true
          description: Filters for work belonging to any of the provided parts.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
        created_after_date:
          deprecated: true
          description: Filters for work created after the timestamp provided.
          format: date-time
          type: string
        created_before_date:
          deprecated: true
          description: Filters for work created before the timestamp provided.
          format: date-time
          type: string
        created_by:
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_ids:
          deprecated: true
          description: Filters for work created by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        created_by_op:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
        created_date:
          $ref: '#/components/schemas/date-filter'
        custom_fields:
          description: Filters for custom fields.
          type: object
        exclude:
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        exclude_work_ids:
          deprecated: true
          description: Filters for work excluding the provided work IDs.
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
        group_by:
          description: The field to group the collection by.
          type: string
        issue:
          $ref: '#/components/schemas/works-filter-issue'
        modified_after_date:
          deprecated: true
          description: Filters for work modified after the provided timestamp.
          format: date-time
          type: string
        modified_before_date:
          deprecated: true
          description: Filters for work modified before the provided timestamp.
          format: date-time
          type: string
        modified_date:
          $ref: '#/components/schemas/date-filter'
        opportunity:
          $ref: '#/components/schemas/works-filter-opportunity'
        owned_by:
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_ids:
          deprecated: true
          description: Filters for work owned by any of these users.
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
        owned_by_op:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
        sort_by:
          description: Comma-separated fields to sort the objects by.
          items:
            type: string
          type: array
        stage:
          $ref: '#/components/schemas/stage-filter'
        stage_names:
          description: Filters for work for the provided stage names.
          items:
            type: string
          type: array
        state:
          description: Filters for work with any of the provided states.
          items:
            type: string
          type: array
        tag_ids:
          deprecated: true
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        tag_ids_op:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
        tags:
          description: Filters for work with any of the provided tags.
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
        target_close_after_date:
          deprecated: true
          description: |
            Filters for work whose target close date is after the provided
            timestamp.
          format: date-time
          type: string
        target_close_before_date:
          deprecated: true
          description: |
            Filters for work whose target close date is before the provided
            timestamp.
          format: date-time
          type: string
        target_close_date:
          $ref: '#/components/schemas/date-filter'
        task:
          $ref: '#/components/schemas/works-filter-task'
        ticket:
          $ref: '#/components/schemas/works-filter-ticket'
        type:
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        types:
          deprecated: true
          description: Filters for work of the provided types.
          items:
            $ref: '#/components/schemas/work-type'
          type: array
        vista:
          description: Filters for work belonging to the given vista.
          type: string
      title: works-vista-group-item-update-dynamic-group-filter
      type: object
  securitySchemes:
    auth-token:
      description: |-
        All the DevRev APIs require a token to authenticate the user. Provide `Authorization: <token>` as a header to every API request.
         [How do I find my token?](https://devrev.ai/docs/apis/auth)
      in: header
      name: Authorization
      type: apiKey
info:
  description: DevRev's REST API.
  title: DevRev REST API
  version: "2022-10-20"
openapi: 3.0.3
paths:
  /internal/accounts.count:
    get:
      description: |
        ### Owner: akanksha.deswal@devrev.ai
        ### Gets the count of Accounts matching given filter.
      operationId: accounts-count
      parameters:
      - description: Filters by creator.
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          Filters on custom fields. Input will be of the format
          (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
        explode: false
        in: query
        name: custom_field_filter
        schema:
          items:
            type: string
          type: array
      - description: Array of domain for Accounts to be filtered.
        explode: false
        in: query
        name: domains
        schema:
          items:
            type: string
          type: array
      - description: Array of references of Accounts to be filtered.
        explode: false
        in: query
        name: external_refs
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters by owners.
        explode: false
        in: query
        name: owned_by
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: |
          Filters on tags. Input will be of the format (tags=<tag id
          1>=<value>&tags=<tag id 2>)
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tags_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: Array of tier for Accounts to be filtered.
        explode: false
        in: query
        name: tier
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-devrev-owner: akanksha.deswal@devrev.ai
    post:
      description: Gets the count of Accounts matching given filter.
      operationId: accounts-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-count-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/accounts.create:
    post:
      description: Creates a Account.
      operationId: accounts-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/accounts.delete:
    post:
      description: Deletes the Account.
      operationId: accounts-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/accounts.delete.validate:
    post:
      description: Checks if an account can be deleted.
      operationId: accounts-delete-validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-delete-validate-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-delete-validate-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/accounts.get:
    get:
      description: |
        ### Owner: akanksha.deswal@devrev.ai
        ### Retrieves the Account's information.
      operationId: accounts-get
      parameters:
      - description: The ID of the required Account.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-devrev-owner: akanksha.deswal@devrev.ai
    post:
      description: Retrieves the Account's information.
      operationId: accounts-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/accounts.group:
    get:
      description: |
        ### Owner: akanksha.deswal@devrev.ai
        ### Lists collections of accounts by groups.
      operationId: accounts-group
      parameters:
      - description: The field to group the accounts by.
        explode: false
        in: query
        name: group_by
        required: true
        schema:
          type: string
      - description: Filters by creator.
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Filters on custom fields. Input will be of the format
          (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
        explode: false
        in: query
        name: custom_field_filter
        schema:
          items:
            type: string
          type: array
      - description: Array of domain for Accounts to be filtered.
        explode: false
        in: query
        name: domains
        schema:
          items:
            type: string
          type: array
      - description: Array of references of Accounts to be filtered.
        explode: false
        in: query
        name: external_refs
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of groups to return. If not set, then the default
          is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The maximum number of accounts to return for an individual group. If
          not set, then the default is '50'.
        explode: false
        in: query
        name: limit_per_group
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters by owners.
        explode: false
        in: query
        name: owned_by
        schema:
          items:
            type: string
          type: array
      - description: Fields to sort the accounts by.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: |
          Filters on tags. Input will be of the format (tags=<tag id
          1>=<value>&tags=<tag id 2>)
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tags_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: Array of tier for Accounts to be filtered.
        explode: false
        in: query
        name: tier
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-devrev-owner: akanksha.deswal@devrev.ai
    post:
      description: Lists collections of accounts by groups.
      operationId: accounts-group-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-group-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/accounts.list:
    get:
      description: |
        ### Owner: akanksha.deswal@devrev.ai
        ### Gets the list of Accounts' information belonging to the
        authenticated user's Dev Organization.
      operationId: accounts-list
      parameters:
      - description: Filters by creator.
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Filters on custom fields. Input will be of the format
          (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
        explode: false
        in: query
        name: custom_field_filter
        schema:
          items:
            type: string
          type: array
      - description: Array of domain for Accounts to be filtered.
        explode: false
        in: query
        name: domains
        schema:
          items:
            type: string
          type: array
      - description: Array of references of Accounts to be filtered.
        explode: false
        in: query
        name: external_refs
        schema:
          items:
            type: string
          type: array
      - description: The maximum number of Accounts to be retrieved per page.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters by owners.
        explode: false
        in: query
        name: owned_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Fields to sort the Accounts by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: |
          Filters on tags. Input will be of the format (tags=<tag id
          1>=<value>&tags=<tag id 2>)
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tags_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: Array of tier for Accounts to be filtered.
        explode: false
        in: query
        name: tier
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-devrev-owner: akanksha.deswal@devrev.ai
    post:
      description: |
        Gets the list of Accounts' information belonging to the authenticated
        user's Dev Organization.
      operationId: accounts-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/accounts.merge:
    post:
      description: Merges the Account.
      operationId: accounts-merge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-merge-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-merge-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/accounts.update:
    post:
      description: Updates the Account's information.
      operationId: accounts-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/accounts-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/accounts-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - accounts
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/addon-rules.create:
    post:
      description: Creates an addon rule
      operationId: addon-rules-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addon-rules-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addon-rules-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/addon-rules.delete:
    post:
      description: Deletes an addon rule object.
      operationId: addon-rules-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addon-rules-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/addon-rules.get:
    get:
      description: Gets an addon rule
      operationId: addon-rules-get
      parameters:
      - description: The addon rule object's DON.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addon-rules-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets an addon rule
      operationId: addon-rules-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addon-rules-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addon-rules-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/addon-rules.list:
    get:
      description: Gets the addon rule objects based on the given filters.
      operationId: addon-rules-list
      parameters:
      - description: |
          The list of addon SKU DONs for which addon rulesare to be aggregated.
        explode: false
        in: query
        name: addon_ids
        schema:
          items:
            type: string
          type: array
      - description: |
          The associativity for which the addon rules need to be aggregated
        explode: false
        in: query
        name: associativity
        schema:
          items:
            $ref: '#/components/schemas/addon-rule-associativity'
          type: array
      - description: The list of addon rule DONs which are to be aggregated.
        explode: false
        in: query
        name: ids
        schema:
          items:
            type: string
          type: array
      - description: |
          The list of product DONs for which addon rulesare to be aggregated.
        explode: false
        in: query
        name: product_ids
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          List of fields to sort the addon rules, by and how to sort them.
          Default is to sort by created_date in descending order.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: |
          The list of subscription SKU DONs for which addon rulesare to be
          aggregated.
        explode: false
        in: query
        name: subscription_sku_ids
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addon-rules-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the addon rule objects based on the given filters.
      operationId: addon-rules-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addon-rules-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addon-rules-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/addon-rules.update:
    post:
      description: Updates an addon rule
      operationId: addon-rules-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/addon-rules-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addon-rules-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/articles.bulk.create:
    post:
      description: Creates multiple articles.
      operationId: create-articles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-bulk-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-bulk-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
      x-devrev-owner: UNKNOWN
  /internal/articles.count:
    get:
      description: Get count of article matching given filter.
      operationId: articles-count
      parameters:
      - description: Filters for access level of the articles.
        explode: false
        in: query
        name: access_level
        schema:
          items:
            $ref: '#/components/schemas/access-level'
          type: array
      - description: |
          Filters for article which have one of the parts present as its
          ancestor part or primary part.
        explode: false
        in: query
        name: ancestor_part
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for article belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for articles authored by any of these users.
        explode: false
        in: query
        name: authored_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for articles created after the timestamp provided.
        explode: false
        in: query
        name: created_after_date
        schema:
          format: date-time
          type: string
      - description: |
          Filters for articles created before the timestamp provided.
        explode: false
        in: query
        name: created_before_date
        schema:
          format: date-time
          type: string
      - description: Filters for articles created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for articles owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          Filters for articles published after the timestamp provided.
        explode: false
        in: query
        name: published_after_date
        schema:
          format: date-time
          type: string
      - description: |
          Filters for articles published before the timestamp provided.
        explode: false
        in: query
        name: published_before_date
        schema:
          format: date-time
          type: string
      - description: Filters for status of the articles.
        explode: false
        in: query
        name: status
        schema:
          items:
            $ref: '#/components/schemas/article-status'
          type: array
      - description: Filters for article with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
      x-devrev-owner: UNKNOWN
    post:
      description: Get count of article matching given filter.
      operationId: articles-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-count-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
      x-devrev-owner: UNKNOWN
  /internal/articles.create:
    post:
      description: Creates an article.
      operationId: create-article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
      x-devrev-owner: UNKNOWN
  /internal/articles.delete:
    post:
      description: Deletes an article.
      operationId: delete-article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-delete-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
      x-devrev-owner: UNKNOWN
  /internal/articles.get:
    get:
      description: Gets an article.
      operationId: get-article
      parameters:
      - description: The ID of the required article.
        explode: false
        in: query
        name: article_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
      x-devrev-owner: UNKNOWN
    post:
      description: Gets an article.
      operationId: get-article-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
      x-devrev-owner: UNKNOWN
  /internal/articles.list:
    get:
      description: Lists a collection of articles.
      operationId: list-articles
      parameters:
      - description: Filters for access level of the articles.
        explode: false
        in: query
        name: access_level
        schema:
          items:
            $ref: '#/components/schemas/access-level'
          type: array
      - description: |
          Filters for article which have one of the parts present as its
          ancestor part or primary part.
        explode: false
        in: query
        name: ancestor_part
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for article belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for articles authored by any of these users.
        explode: false
        in: query
        name: authored_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for articles created after the timestamp provided.
        explode: false
        in: query
        name: created_after_date
        schema:
          format: date-time
          type: string
      - description: |
          Filters for articles created before the timestamp provided.
        explode: false
        in: query
        name: created_before_date
        schema:
          format: date-time
          type: string
      - description: Filters for articles created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of articles to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Filters for articles owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          Filters for articles published after the timestamp provided.
        explode: false
        in: query
        name: published_after_date
        schema:
          format: date-time
          type: string
      - description: |
          Filters for articles published before the timestamp provided.
        explode: false
        in: query
        name: published_before_date
        schema:
          format: date-time
          type: string
      - description: Filters for status of the articles.
        explode: false
        in: query
        name: status
        schema:
          items:
            $ref: '#/components/schemas/article-status'
          type: array
      - description: Filters for article with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
      x-devrev-owner: UNKNOWN
    post:
      description: Lists a collection of articles.
      operationId: list-articles-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
      x-devrev-owner: UNKNOWN
  /internal/articles.update:
    post:
      description: Updates an article.
      operationId: update-article
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/articles-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/articles-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - articles
      x-devrev-owner: UNKNOWN
  /internal/artifacts.get:
    get:
      description: Gets the requested artifact's information.
      operationId: artifacts-get
      parameters:
      - description: The requested artifact's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - artifacts
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the requested artifact's information.
      operationId: artifacts-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/artifacts-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - artifacts
      x-devrev-owner: UNKNOWN
  /internal/artifacts.list:
    get:
      description: List the artifacts attached to an object.
      operationId: artifacts-list
      parameters:
      - description: The ID of the object to filter artifacts.
        explode: false
        in: query
        name: parent_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - artifacts
      x-devrev-owner: UNKNOWN
    post:
      description: List the artifacts attached to an object.
      operationId: artifacts-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/artifacts-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - artifacts
      x-devrev-owner: UNKNOWN
  /internal/artifacts.locate:
    get:
      description: Gets the download URL for the artifact.
      operationId: artifacts-locate
      parameters:
      - description: The ID of the artifact to get the URL for.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:artifact/<artifact-id>
          type: string
      - description: |
          The required variant of the file. By default, it returns the original
          file.
        explode: false
        in: query
        name: variant
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-locate-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - artifacts
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the download URL for the artifact.
      operationId: artifacts-locate-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/artifacts-locate-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-locate-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - artifacts
      x-devrev-owner: UNKNOWN
  /internal/artifacts.prepare:
    post:
      description: |
        Creates an artifact and generates an upload URL for its data.
      operationId: artifacts-prepare
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/artifacts-prepare-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/artifacts-prepare-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - artifacts
      x-devrev-owner: UNKNOWN
  /internal/atoms.summary:
    get:
      description: |-
        ### Owner: dg@devrev.ai
        ### Gets the summary for an object.
      operationId: atoms-summary
      parameters:
      - description: The ID of the object to get the summary for.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atoms-summary-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      x-devrev-owner: dg@devrev.ai
    post:
      description: Gets the summary for an object.
      operationId: atoms-summary-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/atoms-summary-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/atoms-summary-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      x-devrev-owner: dg@devrev.ai
  /internal/auth-tokens.create:
    post:
      description: |
        Creates a JWT corresponding to the requested token type for the
        authenticated user.
      operationId: auth-tokens-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-tokens
      x-devrev-owner: UNKNOWN
  /internal/auth-tokens.delete:
    post:
      description: |
        Revokes the token that matches the given token ID issued under the
        given Dev organization.
      operationId: auth-tokens-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-delete-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-tokens
      x-devrev-owner: UNKNOWN
  /internal/auth-tokens.get:
    get:
      description: |
        Gets the token metadata corresponding to the given token ID under the
        given Dev organization.
      operationId: auth-tokens-get
      parameters:
      - description: |
          The unique identifier of the token under a given Dev organization.
        explode: false
        in: query
        name: token_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-tokens
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Gets the token metadata corresponding to the given token ID under the
        given Dev organization.
      operationId: auth-tokens-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-tokens
      x-devrev-owner: UNKNOWN
  /internal/auth-tokens.list:
    get:
      description: |
        Gets the token metadata for all the tokens corresponding to the given
        token type issued for a given subject.
      operationId: auth-tokens-list
      parameters:
      - description: |
          An identifier that represents the application, which requested the
          token. Only relevant for application access tokens.
        explode: false
        in: query
        name: client_id
        schema:
          type: string
      - description: |
          The type of the requested token. If no value is specified, the
          response will include tokens of all the types.
        explode: false
        in: query
        name: requested_token_type
        schema:
          $ref: '#/components/schemas/auth-token-requested-token-type'
      - description: |
          The subject associated with the token. In the absence of this
          parameter, the ID of the authenticated entity is treated as the
          subject.
        explode: false
        in: query
        name: subject
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-tokens
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Gets the token metadata for all the tokens corresponding to the given
        token type issued for a given subject.
      operationId: auth-tokens-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-tokens
      x-devrev-owner: UNKNOWN
  /internal/auth-tokens.self.delete:
    post:
      description: |
        Revokes all the tokens that matches the given token type created by the
        authenticated user.
      operationId: auth-tokens-self-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-self-delete-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-tokens
      x-devrev-owner: UNKNOWN
  /internal/auth-tokens.update:
    post:
      description: |
        Updates token metadata of a token issued under a given Dev
        organization.
      operationId: auth-tokens-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auth-tokens-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auth-tokens-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-tokens
      x-devrev-owner: UNKNOWN
  /internal/batch.apply:
    post:
      description: Performs a batch of operations.
      operationId: batch-apply
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/batch-apply-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batch-apply-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      x-devrev-owner: UNKNOWN
  /internal/commands.create:
    post:
      description: Creates a command.
      operationId: commands-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/command-create-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/command-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - command
      x-devrev-owner: UNKNOWN
  /internal/commands.delete:
    post:
      description: Deletes a command.
      operationId: commands-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/command-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - command
      x-devrev-owner: UNKNOWN
  /internal/commands.execute:
    post:
      description: Executes a command.
      operationId: commands-execute
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/command-execute-request'
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/command-execute-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - command
      x-devrev-owner: UNKNOWN
  /internal/commands.get:
    get:
      description: Gets a command.
      operationId: commands-get
      parameters:
      - description: The command's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/command-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - command
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a command.
      operationId: commands-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/command-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/command-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - command
      x-devrev-owner: UNKNOWN
  /internal/commands.list:
    get:
      description: Lists commands for a Dev organization.
      operationId: commands-list
      parameters:
      - description: The cursor to begin iteration from.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          List of fields to sort the commands items by and how to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: |
          ID of the object where command is invoked (work/part/conversation).
        explode: false
        in: query
        name: source_object_id
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commands-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - command
      x-devrev-owner: UNKNOWN
    post:
      description: Lists commands for a Dev organization.
      operationId: commands-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/commands-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/commands-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - command
      x-devrev-owner: UNKNOWN
  /internal/commands.update:
    post:
      description: Updates a command.
      operationId: commands-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/command-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/command-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - command
      x-devrev-owner: UNKNOWN
  /internal/conversations.assist:
    get:
      description: |
        Lists recommended objects, which can assist the conversation.
      operationId: conversation-assist
      parameters:
      - description: ID of the conversation for which assistance is requested.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      - description: List of requested objects.
        explode: false
        in: query
        name: requested_objects
        required: true
        schema:
          items:
            $ref: '#/components/schemas/conversation-assist-requested-object'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversation-assist-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - recommendations
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Lists recommended objects, which can assist the conversation.
      operationId: conversation-assist-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversation-assist-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversation-assist-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - recommendations
      x-devrev-owner: UNKNOWN
  /internal/conversations.count:
    get:
      description: Get count of conversations matching given filter.
      operationId: conversations-count
      parameters:
      - description: |
          Filters for conversations belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          Filters for conversations where these users are participants.
        explode: false
        in: query
        name: members
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters for conversations owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          Filters for conversations that are associated with any of the
          provided Rev organizations.
        explode: false
        in: query
        name: rev_org
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          Filters for conversations with any of the provided SLA stages.
        explode: false
        in: query
        name: sla_stage
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: Filters for records with any of the provided SLA stages.
        explode: false
        in: query
        name: sla_summary.stage
        schema:
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: |
          Filters for conversations with any of the provided source channels.
        explode: false
        in: query
        name: source_channels
        schema:
          items:
            type: string
          type: array
      - description: Filters for records in the provided stage(s).
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for conversations with any of the provided states.
        explode: false
        in: query
        name: state
        schema:
          items:
            type: string
          type: array
      - description: Filters for conversations with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: |
          Filters for conversations with any of the provided ticket IDs.
        explode: false
        in: query
        name: tickets
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-devrev-owner: UNKNOWN
    post:
      description: Get count of conversations matching given filter.
      operationId: conversations-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-count-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-devrev-owner: UNKNOWN
  /internal/conversations.create:
    post:
      description: Creates a conversation.
      operationId: conversations-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-devrev-owner: UNKNOWN
  /internal/conversations.delete:
    post:
      description: Deletes the requested conversation.
      operationId: conversations-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-devrev-owner: UNKNOWN
  /internal/conversations.export:
    get:
      description: Exports a collection of conversation items.
      operationId: conversations-export
      parameters:
      - description: |
          Filters for conversations belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The number of conversation items to return. The default is '50', the
          maximum is '5000'.
        explode: false
        in: query
        name: first
        schema:
          format: int32
          type: integer
      - description: |
          Filters for conversations where these users are participants.
        explode: false
        in: query
        name: members
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters for conversations owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          Filters for conversations that are associated with any of the
          provided Rev organizations.
        explode: false
        in: query
        name: rev_org
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          Filters for conversations with any of the provided SLA stages.
        explode: false
        in: query
        name: sla_stage
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: Filters for records with any of the provided SLA stages.
        explode: false
        in: query
        name: sla_summary.stage
        schema:
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: |
          Fields to sort the conversation items by and the direction to sort
          them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for conversations with any of the provided source channels.
        explode: false
        in: query
        name: source_channels
        schema:
          items:
            type: string
          type: array
      - description: Filters for records in the provided stage(s).
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for conversations with any of the provided states.
        explode: false
        in: query
        name: state
        schema:
          items:
            type: string
          type: array
      - description: Filters for conversations with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: |
          Filters for conversations with any of the provided ticket IDs.
        explode: false
        in: query
        name: tickets
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-devrev-owner: UNKNOWN
    post:
      description: Exports a collection of conversation items.
      operationId: conversations-export-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-export-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-devrev-owner: UNKNOWN
  /internal/conversations.get:
    get:
      description: Gets the requested conversation's information.
      operationId: conversations-get
      parameters:
      - description: The requested conversation's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the requested conversation's information.
      operationId: conversations-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-devrev-owner: UNKNOWN
  /internal/conversations.group:
    get:
      description: Lists collections of conversations by groups.
      operationId: conversations-group
      parameters:
      - description: The field to group the conversations by.
        explode: false
        in: query
        name: group_by
        required: true
        schema:
          type: string
      - description: |
          Filters for conversations belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of groups to return. If not set, then the default
          is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The maximum number of conversations to return for an individual
          group. The default is '50'.
        explode: false
        in: query
        name: limit_per_group
        schema:
          format: int32
          type: integer
      - description: |
          Filters for conversations where these users are participants.
        explode: false
        in: query
        name: members
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters for conversations owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          Filters for conversations that are associated with any of the
          provided Rev organizations.
        explode: false
        in: query
        name: rev_org
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          Filters for conversations with any of the provided SLA stages.
        explode: false
        in: query
        name: sla_stage
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: Filters for records with any of the provided SLA stages.
        explode: false
        in: query
        name: sla_summary.stage
        schema:
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: Comma-separated fields to sort the conversations by.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for conversations with any of the provided source channels.
        explode: false
        in: query
        name: source_channels
        schema:
          items:
            type: string
          type: array
      - description: Filters for records in the provided stage(s).
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for conversations with any of the provided states.
        explode: false
        in: query
        name: state
        schema:
          items:
            type: string
          type: array
      - description: Filters for conversations with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: |
          Filters for conversations with any of the provided ticket IDs.
        explode: false
        in: query
        name: tickets
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-devrev-owner: UNKNOWN
    post:
      description: Lists collections of conversations by groups.
      operationId: conversations-group-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-group-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-devrev-owner: UNKNOWN
  /internal/conversations.list:
    get:
      description: Lists the available conversations.
      operationId: conversations-list
      parameters:
      - description: |
          Filters for conversations belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of conversations to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          Filters for conversations where these users are participants.
        explode: false
        in: query
        name: members
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters for conversations owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          Filters for conversations that are associated with any of the
          provided Rev organizations.
        explode: false
        in: query
        name: rev_org
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          Filters for conversations with any of the provided SLA stages.
        explode: false
        in: query
        name: sla_stage
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: Filters for records with any of the provided SLA stages.
        explode: false
        in: query
        name: sla_summary.stage
        schema:
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: |
          Fields to sort the conversations by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for conversations with any of the provided source channels.
        explode: false
        in: query
        name: source_channels
        schema:
          items:
            type: string
          type: array
      - description: Filters for records in the provided stage(s).
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for conversations with any of the provided states.
        explode: false
        in: query
        name: state
        schema:
          items:
            type: string
          type: array
      - description: Filters for conversations with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: |
          Filters for conversations with any of the provided ticket IDs.
        explode: false
        in: query
        name: tickets
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the available conversations.
      operationId: conversations-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-devrev-owner: UNKNOWN
  /internal/conversations.update:
    post:
      description: Updates the requested conversation.
      operationId: conversations-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/conversations-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversations-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - conversations
      x-devrev-owner: UNKNOWN
  /internal/credit-coupons.apply:
    post:
      description: Applies a credit coupon object.
      operationId: credit-coupons-apply
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credit-coupons-apply-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credit-coupons-apply-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/credit-coupons.create:
    post:
      description: Creates a credit coupon object.
      operationId: credit-coupons-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credit-coupons-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credit-coupons-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/credit-coupons.delete:
    post:
      description: Deletes a credit coupon object.
      operationId: credit-coupons-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credit-coupons-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/credit-coupons.get:
    get:
      description: Gets a credit coupon object.
      operationId: credit-coupons-get
      parameters:
      - description: The coupon's code.
        explode: false
        in: query
        name: coupon_code
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credit-coupons-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a credit coupon object.
      operationId: credit-coupons-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credit-coupons-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credit-coupons-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/credit-coupons.update:
    post:
      description: Updates a credit coupon object.
      operationId: credit-coupons-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credit-coupons-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credit-coupons-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/credit-coupons.validate:
    post:
      description: Validates a credit coupon object.
      operationId: credit-coupons-validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credit-coupons-validate-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credit-coupons-validate-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/credits.create:
    post:
      description: Creates a credit object.
      operationId: credits-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credits-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credits-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/credits.delete:
    post:
      description: Deletes a credit object.
      operationId: credits-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credits-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/credits.get:
    get:
      description: Gets a credit object.
      operationId: credits-get
      parameters:
      - description: The credit object's DON
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credits-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a credit object.
      operationId: credits-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credits-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credits-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/credits.list:
    get:
      description: Gets the credit objects based on the given filters.
      operationId: credits-list
      parameters:
      - description: |
          Filter items which have expiry date after the timestamp provided.
        explode: false
        in: query
        name: after_expiry_date
        schema:
          format: date-time
          type: string
      - description: |
          Filter items which have expiry date before the timestamp provided.
        explode: false
        in: query
        name: before_expiry_date
        schema:
          format: date-time
          type: string
      - description: The list of credit object DONs which are to be aggregated.
        explode: false
        in: query
        name: ids
        schema:
          items:
            type: string
          type: array
      - description: The list of rev org DONs which are to be aggregated.
        explode: false
        in: query
        name: rev_org_ids
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          List of fields to sort the credit objects, by and how to sort them.
          Default is to sort by created_date in descending order.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: The list of status values which are to be aggregated.
        explode: false
        in: query
        name: statuses
        schema:
          items:
            $ref: '#/components/schemas/credit-status'
          type: array
      - description: The list of type values which are to be aggregated.
        explode: false
        in: query
        name: types
        schema:
          items:
            $ref: '#/components/schemas/credit-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credits-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the credit objects based on the given filters.
      operationId: credits-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credits-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credits-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/credits.update:
    post:
      description: Updates a credit object.
      operationId: credits-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/credits-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/credits-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/dataset.get:
    get:
      description: Gets dataset for a query.
      operationId: dataset-get
      parameters:
      - description: Query ID to get the dataset for.
        explode: false
        in: query
        name: query_id
        required: true
        schema:
          type: string
      - description: End date at which to end the dataset.
        explode: false
        in: query
        name: end_date
        schema:
          format: date-time
          type: string
      - description: |
          Name of the parameter as specified in the query. Required if any
          params.* fields are provided.
        explode: false
        in: query
        name: params.name
        schema:
          type: string
      - description: |
          Value corresponding to the parameter name. Required if any params.*
          fields are provided.
        explode: false
        in: query
        name: params.value
        schema:
          type: string
      - description: Start date from which to start the dataset.
        explode: false
        in: query
        name: start_date
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataset-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - analytics
      x-devrev-owner: UNKNOWN
    post:
      description: Gets dataset for a query.
      operationId: dataset-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataset-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataset-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - analytics
      x-devrev-owner: UNKNOWN
  /internal/dev-orgs.auth-connections.create:
    post:
      description: |
        Creates a new enterprise authentication connection for a Dev
        organization. This authentication connection will not be enabled by
        default for the organization and the user will need to explicitly
        enable this. Keep in mind that at a time, only one authentication
        connection can be enabled for a Dev organization. At present, only 5
        enterprise connections can be created by an organization.
      operationId: dev-org-auth-connections-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-connection
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.auth-connections.delete:
    post:
      description: |
        Deletes an authentication connection. Only enterprise connections which
        are explicitly set up for a Dev organization can be deleted. Default
        connections can not be deleted using this method.
      operationId: dev-org-auth-connections-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-delete-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-connection
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.auth-connections.get:
    get:
      description: |
        ### Owner: sambhav.jain@devrev.ai
        ### Retrieves the details for an authentication connection.
      operationId: dev-org-auth-connections-get
      parameters:
      - description: ID of the authentication connection.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-connection
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
    post:
      description: Retrieves the details for an authentication connection.
      operationId: dev-org-auth-connections-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-connection
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.auth-connections.list:
    get:
      description: |
        ### Owner: sambhav.jain@devrev.ai
        ### Lists all the authentication connections available for a Dev
        organization. This list will include both social and enterprise
        connections which are either available by default or are explicitly
        created by the user.
      operationId: dev-org-auth-connections-list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-connection
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
    post:
      description: |
        Lists all the authentication connections available for a Dev
        organization. This list will include both social and enterprise
        connections which are either available by default or are explicitly
        created by the user.
      operationId: dev-org-auth-connections-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/empty'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-connection
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.auth-connections.toggle:
    post:
      description: |
        Enable or disable an authentication connection for a Dev organization.
        Currently, only 1 authentication connection can be enabled at a time.
        When a new authentication connection is enabled, the connection which
        is currently enabled for the Dev organization is automatically
        disabled.
      operationId: dev-org-auth-connections-toggle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-toggle-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-connection
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.auth-connections.update:
    post:
      description: Updates an authentication connection.
      operationId: dev-org-auth-connections-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-auth-connections-update-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-auth-connections-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - auth-connection
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.create:
    post:
      description: Creates a Dev organization for the authenticated user.
      operationId: dev-orgs-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-orgs-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/dev-orgs.delete:
    post:
      description: Delete the Dev organization of the authenticated user.
      operationId: dev-orgs-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-orgs-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.get:
    get:
      description: |
        ### Owner: sambhav.jain@devrev.ai
        ### Gets the Dev organization's information of the authenticated user.
      operationId: dev-orgs-get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
    post:
      description: |
        Gets the Dev organization's information of the authenticated user.
      operationId: dev-orgs-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-orgs-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.invites.create:
    post:
      description: Create an invitation to a user.
      operationId: dev-orgs-invites-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-orgs-invites-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-invites-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.invites.list:
    get:
      description: |
        ### Owner: sambhav.jain@devrev.ai
        ### Gets the list of Dev user invitations in the user's Dev
        organization.
      operationId: dev-orgs-invites-list
      parameters:
      - description: |
          Filters invitations to those created by the specified users.
        explode: false
        in: query
        name: created_by_ids
        schema:
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The maximum number of invited users to be retrieved.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Fields to sort the invites by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Array of state values to be filtered.
        explode: false
        in: query
        name: state
        schema:
          items:
            $ref: '#/components/schemas/devu-invite-state'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-invites-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
    post:
      description: |
        Gets the list of Dev user invitations in the user's Dev organization.
      operationId: dev-orgs-invites-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-orgs-invites-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-invites-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.join:
    get:
      description: |
        ### Owner: sambhav.jain@devrev.ai
        ### Gets a short-lived invitation url to join the organisation on the
        basis of email domain.
      operationId: dev-orgs-join
      parameters:
      - description: The globally unique ID of the DevRev organization.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-join-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
    post:
      description: |
        Gets a short-lived invitation url to join the organisation on the basis
        of email domain.
      operationId: dev-orgs-join-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-orgs-join-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-join-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.list:
    get:
      description: |
        ### Owner: sambhav.jain@devrev.ai
        ### Gets the list of Dev organizations for the authenticated Dev user.
      operationId: dev-orgs-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Whether to list the Dev organizations available to join without
          invitation.
        explode: false
        in: query
        name: is_available
        schema:
          type: boolean
      - description: The number of Dev organizations to be retrieved.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Fields to sort the Dev organizations by and the direction to sort
          them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
    post:
      description: |
        Gets the list of Dev organizations for the authenticated Dev user.
      operationId: dev-orgs-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-orgs-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.public-info.get:
    get:
      description: |
        ### Owner: sambhav.jain@devrev.ai
        ### Gets public information of a Dev organization from Slug.
      operationId: dev-org-public-info
      parameters:
      - description: Slug of the Dev organization.
        explode: false
        in: query
        name: slug
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-public-info-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      security: []
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
    post:
      description: Gets public information of a Dev organization from Slug.
      operationId: dev-org-public-info-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-org-public-info-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-org-public-info-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.self:
    get:
      description: |
        ### Owner: sambhav.jain@devrev.ai
        ### Gets the authenticated user's Dev organization information.
      operationId: dev-orgs-self
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-self-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
    post:
      description: Gets the authenticated user's Dev organization information.
      operationId: dev-orgs-self-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-orgs-self-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-self-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.self.get:
    get:
      description: |
        ### Owner: sambhav.jain@devrev.ai
        ### Gets the authenticated user's Dev organization information.
      operationId: dev-orgs-self-get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-self-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
    post:
      description: Gets the authenticated user's Dev organization information.
      operationId: dev-orgs-self-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-orgs-self-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-self-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-orgs.update:
    post:
      description: |
        Updates the Dev organization's information of the authenticated user.
      operationId: dev-orgs-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-orgs-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-orgs-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: sambhav.jain@devrev.ai
  /internal/dev-users.deactivate:
    post:
      description: Deactivates the requested user.
      operationId: dev-users-deactivate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-deactivate-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-deactivate-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.delete:
    post:
      description: Deletes the requested user.
      operationId: dev-users-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.display-handles.is-available:
    get:
      description: |
        Checks if a display handle is available for the authenticated user or
        not.
      operationId: dev-users-is-display-handle-available
      parameters:
      - description: Display handle to be checked for availability.
        explode: false
        in: query
        name: display_handle
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-is-display-handle-available-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Checks if a display handle is available for the authenticated user or
        not.
      operationId: dev-users-is-display-handle-available-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-is-display-handle-available-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-is-display-handle-available-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.display-picture:
    post:
      description: Updates the display picture of a Dev User
      operationId: dev-user-update-display-picture
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-user-update-display-picture-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-user-update-display-picture-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.get:
    get:
      description: Gets the requested user's information.
      operationId: dev-users-get
      parameters:
      - description: User ID of the requested Dev user.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the requested user's information.
      operationId: dev-users-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.identities.link:
    post:
      description: Links an external/secondary identity to the Dev user.
      operationId: dev-users-identities-link
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-identities-link-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-identities-link-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.identities.unlink:
    post:
      description: Unlinks an external/secondary identity from the Dev user.
      operationId: dev-users-identities-unlink
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-identities-unlink-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-identities-unlink-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.list:
    get:
      description: Lists users within your organization.
      operationId: dev-users-list
      parameters:
      - description: |
          Filters list of Dev users which are created by specified list of Dev
          user IDs.
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Filters Dev users based on email addresses.
        explode: false
        in: query
        name: email
        schema:
          items:
            type: string
          type: array
      - description: Filters Dev users based on job titles.
        explode: false
        in: query
        name: job_title
        schema:
          items:
            $ref: '#/components/schemas/dev-user-job-title'
          type: array
      - description: |
          The maximum number of Dev users to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Fields to sort the Dev users by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters Dev users based on state.
        explode: false
        in: query
        name: state
        schema:
          items:
            $ref: '#/components/schemas/user-state'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
    post:
      description: Lists users within your organization.
      operationId: dev-users-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.logout:
    post:
      description: Logout from a Dev organization.
      operationId: dev-users-logout
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-logout-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.merge:
    post:
      description: |
        Merges the identity of a secondary Dev user with the primary Dev
        user.The account of the secondary Dev user will be deactivated and will
        no longer be able to log into DevRev. All objects - issues, tickets,
        parts etc. owned by the secondary Dev user will be transferred to the
        primary Dev user.
      operationId: dev-users-merge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-merge-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-merge-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.phonenumbers.check-code:
    post:
      description: |
        Updates the user's phone number if the verification code entered by the
        user is valid.
      operationId: dev-users-check-phone-number-code
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-check-phone-number-code-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-check-phone-number-code-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.phonenumbers.send-code:
    post:
      description: Sends a verification code to the user's phone number.
      operationId: dev-users-send-phone-number-code
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-send-phone-number-code-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-send-phone-number-code-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.post-login:
    post:
      description: |
        Request made by UI to perform first set of operations when Dev user
        logs into a Dev organization.
      operationId: dev-users-post-login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-post-login-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-post-login-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.self:
    get:
      description: Gets the authenticated user's information.
      operationId: dev-users-self
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-self-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the authenticated user's information.
      operationId: dev-users-self-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-self-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-self-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.self.delete:
    post:
      description: Deletes the authenticated user.
      operationId: dev-users-self-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-self-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-self-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.self.update:
    post:
      description: Updates the authenticated user.
      operationId: dev-users-self-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-self-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/dev-users.update:
    post:
      description: Updates the user corresponding to the input Id.
      operationId: dev-users-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dev-users-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dev-users-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/discovery.data-collection.schedule:
    post:
      description: Schedule data collection for discovery.
      operationId: schedule-data-collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/schedule-data-collection-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schedule-data-collection-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.data-collection.start:
    post:
      description: Start data collection for discovery.
      operationId: start-data-collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/start-data-collection-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/start-data-collection-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.data-collection.unschedule:
    post:
      description: Unschedule data collection for discovery.
      operationId: unschedule-data-collection
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/unschedule-data-collection-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unschedule-data-collection-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.profiles.create:
    post:
      description: Create discovery profile.
      operationId: create-discovery-profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-discovery-profile-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create-discovery-profile-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.profiles.delete:
    post:
      description: Delete discovery profile.
      operationId: delete-discovery-profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/delete-discovery-profile-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete-discovery-profile-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.profiles.get:
    post:
      description: Get discovery profile.
      operationId: get-discovery-profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/get-discovery-profile-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-discovery-profile-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.profiles.list:
    post:
      description: List discovery profiles.
      operationId: list-discovery-profiles
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/list-discovery-profiles-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list-discovery-profiles-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.profiles.update:
    post:
      description: Update discovery profile.
      operationId: update-discovery-profile
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-discovery-profile-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/update-discovery-profile-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.run:
    post:
      description: Run discovery using profile.
      operationId: run-discovery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/run-discovery-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/run-discovery-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.run.status:
    get:
      description: Get discovery run status.
      operationId: get-discovery-run
      parameters:
      - description: Discovery run unique ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-discovery-run-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
    post:
      description: Get discovery run status.
      operationId: get-discovery-run-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/get-discovery-run-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-discovery-run-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.schedule:
    post:
      description: Schedule discovery run.
      operationId: schedule-discovery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/schedule-discovery-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schedule-discovery-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.settings.create:
    post:
      description: Create discovery Settings.
      operationId: create-discovery-settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-discovery-settings-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create-discovery-settings-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.settings.delete:
    post:
      description: Delete discovery Settings.
      operationId: delete-discovery-settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/delete-discovery-settings-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/delete-discovery-settings-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.settings.get:
    get:
      description: Get discovery Settings.
      operationId: get-discovery-settings
      parameters:
      - description: |
          Optional Dev organization ID. This allows running on another Dev
          organization, as long as the logged in user has access to it.
        explode: false
        in: query
        name: other_dev_org
        schema:
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-discovery-settings-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
    post:
      description: Get discovery Settings.
      operationId: get-discovery-settings-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/get-discovery-settings-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-discovery-settings-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.settings.update:
    post:
      description: Update discovery Settings.
      operationId: update-discovery-settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update-discovery-settings-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/update-discovery-settings-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.sources.list:
    get:
      description: List discovery sources.
      operationId: list-discovery-sources
      parameters:
      - description: |
          Optional Dev organization ID. This allows running on another Dev
          organization, as long as the logged in user has access to it.
        explode: false
        in: query
        name: other_dev_org
        schema:
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list-discovery-sources-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
    post:
      description: List discovery sources.
      operationId: list-discovery-sources-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/list-discovery-sources-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list-discovery-sources-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/discovery.unschedule:
    post:
      description: Unschedule discovery run.
      operationId: unschedule-discovery
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/unschedule-discovery-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unschedule-discovery-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - discovery
      x-devrev-owner: UNKNOWN
  /internal/domain-identities.create:
    post:
      description: Creates domain identity for the supplied domain
      operationId: domain-identities-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain-identities-create-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain-identities-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - domain-identity
      x-devrev-owner: UNKNOWN
  /internal/domain-identities.sync:
    post:
      description: Syncs the domain identity verification status
      operationId: domain-identities-sync
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/domain-identities-sync-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/domain-identities-sync-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - domain-identity
      x-devrev-owner: UNKNOWN
  /internal/efficap.get-parts-user-is-working-on:
    get:
      description: |
        ### Owner: shlomi.vaknin@devrev.ai
        ### Gets all the parts a given user is working given a time-frame.
        Results are not rolled up from child-parts.
      operationId: efficap-parts-user-working-on-get
      parameters:
      - description: |
          Timestamp truncated to a day of the end of the time-frame. Defaults
          to the current day.
        explode: false
        in: query
        name: day_end
        schema:
          format: date
          type: string
      - description: |
          Timestamp truncated to a day of the beginning of the time-frame.
          Defaults to 7 days before end-time.
        explode: false
        in: query
        name: day_start
        schema:
          format: date
          type: string
      - description: |
          Specifies the threshold percentage of contribution made by a person,
          which is considered a "primary contributor" if it goes above the
          specified threshold. If the user's contribution falls below this
          threshold they are considered a "shallow contributor". The default
          value is 10%.
        explode: false
        in: query
        name: shallow_contributor_threshold
        schema:
          format: float
          maximum: 100
          minimum: 0
          type: number
      - description: Timezone offset in seconds east of UTC. Defaults to 0.
        explode: false
        in: query
        name: timezone_offset
        schema:
          format: int32
          maximum: 86400
          minimum: 0
          type: integer
      - description: |
          Get all parts this given user has been working on within the given
          time-frame. Defaults to authenticated user.
        explode: false
        in: query
        name: user
        schema:
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/efficap-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - efficap
      x-devrev-owner: shlomi.vaknin@devrev.ai
    post:
      description: |
        Gets all the parts a given user is working given a time-frame. Results
        are not rolled up from child-parts.
      operationId: efficap-parts-user-working-on-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/efficap-parts-user-working-on-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/efficap-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - efficap
      x-devrev-owner: shlomi.vaknin@devrev.ai
  /internal/efficap.get-parts-user-is-working-on.roll-up:
    get:
      description: |
        ### Owner: shlomi.vaknin@devrev.ai
        ### Gets all the parts a given user is working given a time-frame.
        Results are rolled up from child-parts.
      operationId: efficap-parts-user-worked-on-get-roll-up
      parameters:
      - description: |
          Timestamp truncated to a day of the end of the time-frame. Defaults
          to the current day.
        explode: false
        in: query
        name: day_end
        schema:
          format: date
          type: string
      - description: |
          Timestamp truncated to a day of the beginning of the time-frame.
          Defaults to 7 days before end-time.
        explode: false
        in: query
        name: day_start
        schema:
          format: date
          type: string
      - description: |
          Specifies the threshold percentage of contribution made by a person,
          which is considered a "primary contributor" if it goes above the
          specified threshold. If the user's contribution falls below this
          threshold they are considered a "shallow contributor". The default
          value is 10%.
        explode: false
        in: query
        name: shallow_contributor_threshold
        schema:
          format: float
          maximum: 100
          minimum: 0
          type: number
      - description: Timezone offset in seconds east of UTC. Defaults to 0.
        explode: false
        in: query
        name: timezone_offset
        schema:
          format: int32
          maximum: 86400
          minimum: 0
          type: integer
      - description: |
          Get all parts this given user has been working on within the given
          time-frame. Defaults to authenticated user.
        explode: false
        in: query
        name: user
        schema:
          example: don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/efficap-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - efficap
      x-devrev-owner: shlomi.vaknin@devrev.ai
    post:
      description: |
        Gets all the parts a given user is working given a time-frame. Results
        are rolled up from child-parts.
      operationId: efficap-parts-user-worked-on-get-roll-up-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/efficap-parts-user-working-on-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/efficap-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - efficap
      x-devrev-owner: shlomi.vaknin@devrev.ai
  /internal/efficap.get-users-working-on-part:
    get:
      description: |
        ### Owner: shlomi.vaknin@devrev.ai
        ### Gets all users that are working on a given part in the given
        time-frame. Results are not rolled up from child-parts.
      operationId: efficap-users-working-on-part-request-get
      parameters:
      - description: |
          Get all users that have been working on this part within the given
          time-frame.
        explode: false
        in: query
        name: part
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      - description: |
          Timestamp truncated to a day of the end of the time-frame. Defaults
          to the current day.
        explode: false
        in: query
        name: day_end
        schema:
          format: date
          type: string
      - description: |
          Timestamp truncated to a day of the beginning of the time-frame.
          Defaults to 7 days before end-time.
        explode: false
        in: query
        name: day_start
        schema:
          format: date
          type: string
      - description: |
          Specifies the threshold percentage of contribution made by a person,
          which is considered a "primary contributor" if it goes above the
          specified threshold. If the user's contribution falls below this
          threshold they are considered a "shallow contributor". The default
          value is 10%.
        explode: false
        in: query
        name: shallow_contributor_threshold
        schema:
          format: float
          maximum: 100
          minimum: 0
          type: number
      - description: Timezone offset in seconds east of UTC. Defaults to 0.
        explode: false
        in: query
        name: timezone_offset
        schema:
          format: int32
          maximum: 86400
          minimum: 0
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/efficap-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - efficap
      x-devrev-owner: shlomi.vaknin@devrev.ai
    post:
      description: |
        Gets all users that are working on a given part in the given
        time-frame. Results are not rolled up from child-parts.
      operationId: efficap-users-working-on-part-request-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/efficap-users-working-on-part-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/efficap-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - efficap
      x-devrev-owner: shlomi.vaknin@devrev.ai
  /internal/efficap.get-users-working-on-part.roll-up:
    get:
      description: |
        ### Owner: shlomi.vaknin@devrev.ai
        ### Gets all users that are working on a given part in the given
        time-frame. Results are rolled up from child-parts.
      operationId: efficap-users-working-on-part-request-get-roll-up
      parameters:
      - description: |
          Get all users that have been working on this part within the given
          time-frame.
        explode: false
        in: query
        name: part
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      - description: |
          Timestamp truncated to a day of the end of the time-frame. Defaults
          to the current day.
        explode: false
        in: query
        name: day_end
        schema:
          format: date
          type: string
      - description: |
          Timestamp truncated to a day of the beginning of the time-frame.
          Defaults to 7 days before end-time.
        explode: false
        in: query
        name: day_start
        schema:
          format: date
          type: string
      - description: |
          Specifies the threshold percentage of contribution made by a person,
          which is considered a "primary contributor" if it goes above the
          specified threshold. If the user's contribution falls below this
          threshold they are considered a "shallow contributor". The default
          value is 10%.
        explode: false
        in: query
        name: shallow_contributor_threshold
        schema:
          format: float
          maximum: 100
          minimum: 0
          type: number
      - description: Timezone offset in seconds east of UTC. Defaults to 0.
        explode: false
        in: query
        name: timezone_offset
        schema:
          format: int32
          maximum: 86400
          minimum: 0
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/efficap-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - efficap
      x-devrev-owner: shlomi.vaknin@devrev.ai
    post:
      description: |
        Gets all users that are working on a given part in the given
        time-frame. Results are rolled up from child-parts.
      operationId: efficap-users-working-on-part-request-get-roll-up-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/efficap-users-working-on-part-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/efficap-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - efficap
      x-devrev-owner: shlomi.vaknin@devrev.ai
  /internal/engagements.count:
    get:
      description: |
        ### Owner: rahul.jain@devrev.ai
        ### Counts the engagement records.
      operationId: engagements-count
      parameters:
      - description: Filters for engagements with the provided parent.
        explode: false
        in: query
        name: parent
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
      x-devrev-owner: rahul.jain@devrev.ai
    post:
      description: Counts the engagement records.
      operationId: engagements-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engagements-count-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/engagements.create:
    post:
      description: Creates a new engagement record.
      operationId: engagements-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engagements-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/engagements.delete:
    post:
      description: Deletes the engagement record.
      operationId: engagements-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engagements-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/engagements.get:
    get:
      description: |
        ### Owner: rahul.jain@devrev.ai
        ### Gets the engagement record.
      operationId: engagements-get
      parameters:
      - description: The engagement's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
      x-devrev-owner: rahul.jain@devrev.ai
    post:
      description: Gets the engagement record.
      operationId: engagements-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engagements-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/engagements.list:
    get:
      description: |
        ### Owner: rahul.jain@devrev.ai
        ### Lists the engagement records.
      operationId: engagements-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The maximum number of engagements to return.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Filters for engagements with the provided parent.
        explode: false
        in: query
        name: parent
        schema:
          items:
            type: string
          type: array
      - description: |
          Fields to sort the engagements by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
      x-devrev-owner: rahul.jain@devrev.ai
    post:
      description: Lists the engagement records.
      operationId: engagements-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engagements-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/engagements.update:
    post:
      description: Updates the engagement record.
      operationId: engagements-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/engagements-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/engagements-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - engagements
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/event-sources.create:
    post:
      description: Creates an event source.
      operationId: event-sources-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-source-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-source-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
      x-devrev-owner: UNKNOWN
  /internal/event-sources.delete:
    post:
      description: Deletes an event source.
      operationId: event-source-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-source-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
      x-devrev-owner: UNKNOWN
  /internal/event-sources.event.schedule:
    post:
      description: Schedules/publishes an event to the specified event source.
      operationId: event-sources-schedule-event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-sources-schedule-event-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-sources-schedule-event-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
      x-devrev-owner: UNKNOWN
  /internal/event-sources.event.unschedule:
    post:
      description: |
        Deletes a scheduled event scheduled for the specified event source.
      operationId: event-sources-delete-scheduled-event
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-sources-delete-scheduled-event-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
      x-devrev-owner: UNKNOWN
  /internal/event-sources.get:
    get:
      description: Gets an event source.
      operationId: event-sources-get
      parameters:
      - description: The event source's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-source-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
      x-devrev-owner: UNKNOWN
    post:
      description: Gets an event source.
      operationId: event-sources-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-source-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-source-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
      x-devrev-owner: UNKNOWN
  /internal/event-sources.list:
    get:
      description: Lists event sources for a Dev organization.
      operationId: event-sources-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Fields to sort the event sources by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: |
          type describes which event source is being instantiated from list of
          event sources we support. It would contain values like
          pd/github/new-or-updated-pull-request, etc.
        explode: false
        in: query
        name: type
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-sources-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
      x-devrev-owner: UNKNOWN
    post:
      description: Lists event sources for a Dev organization.
      operationId: event-sources-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-sources-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-sources-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
      x-devrev-owner: UNKNOWN
  /internal/event-sources.update:
    post:
      description: Updates an event source.
      operationId: event-source-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/event-source-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/event-source-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
      x-devrev-owner: UNKNOWN
  /internal/experience.flags.get:
    get:
      description: |
        ### Owner: brian.byrne@devrev.ai
        ### Gets the flags for a user.
      operationId: experience-flags-get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/experience-flags-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      security: []
      tags:
      - experience
      x-devrev-owner: brian.byrne@devrev.ai
    post:
      description: Gets the flags for a user.
      operationId: experience-flags-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/experience-flags-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/experience-flags-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - experience
      x-devrev-owner: brian.byrne@devrev.ai
  /internal/flows.delete:
    post:
      description: Deletes a flow.
      operationId: flow-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/flow-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - flows
      x-devrev-owner: UNKNOWN
  /internal/flows.get:
    get:
      description: Gets a Flow.
      operationId: flow-get
      parameters:
      - description: The flow's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flow-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - flows
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a Flow.
      operationId: flow-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/flow-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flow-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - flows
      x-devrev-owner: UNKNOWN
  /internal/flows.github.create:
    post:
      description: Creates GitHub flow with the given parameters.
      operationId: flows-github-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/flows-github-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flows-github-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - flows
      x-devrev-owner: UNKNOWN
  /internal/flows.list:
    get:
      description: Lists flows for a Dev organization.
      operationId: flows-list
      parameters:
      - description: The cursor to begin iteration from.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: ID of Marketplace Item which installed this flow.
        explode: false
        in: query
        name: marketplace_item
        schema:
          items:
            type: string
          type: array
      - description: |
          Parameter to indicate if the response must omit the raw_template.
        explode: false
        in: query
        name: omit_raw_template
        schema:
          type: boolean
      - description: |
          Fields to sort the flows by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Deployment status of the flow.
        explode: false
        in: query
        name: status
        schema:
          items:
            $ref: '#/components/schemas/flow-status'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flows-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - flows
      x-devrev-owner: UNKNOWN
    post:
      description: Lists flows for a Dev organization.
      operationId: flows-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/flows-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flows-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - flows
      x-devrev-owner: UNKNOWN
  /internal/flows.update:
    post:
      description: Updates a Flow.
      operationId: flow-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/flow-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/flow-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - flows
      x-devrev-owner: UNKNOWN
  /internal/flows.validate.template:
    post:
      description: Validates the flow template and version update
      operationId: validate-flow-template
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/validate-flow-template-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/validate-flow-template-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - flows
      x-devrev-owner: UNKNOWN
  /internal/functions.create:
    post:
      description: Creates a function definition in a devOrg.
      operationId: function-definitions-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/function-definitions-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/function-definitions-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/functions.delete:
    post:
      description: Deletes a function definition in a devOrg.
      operationId: function-definitions-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/function-definitions-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/functions.get:
    get:
      description: Gets a function definition in a devOrg.
      operationId: function-definitions-get
      parameters:
      - description: The function definition's DON.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/function-definitions-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a function definition in a devOrg.
      operationId: function-definitions-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/function-definitions-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/function-definitions-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/functions.list:
    get:
      description: Lists functions used in microflows for a Dev organization.
      operationId: function-definitions-list
      parameters:
      - description: Page number for paginated function definition items.
        explode: false
        in: query
        name: page
        schema:
          format: int32
          type: integer
      - description: |
          Number of function definition items to return per page. Default is
          50.
        explode: false
        in: query
        name: per_page
        schema:
          format: int32
          type: integer
      - description: |
          List of fields to sort the function definition items by and how to
          sort them. Default is to sort by created_date in descending order.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/function-definitions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
    post:
      description: Lists functions used in microflows for a Dev organization.
      operationId: function-definitions-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/function-definitions-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/function-definitions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/functions.update:
    post:
      description: Updates a function definition in a devOrg.
      operationId: function-definitions-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/function-definitions-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/function-definitions-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/graphql.execute:
    post:
      description: Executes a GraphQL request.
      operationId: graphql
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/graphql-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/graphql-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      x-devrev-owner: UNKNOWN
  /internal/groups.create:
    post:
      description: Creates a new group.
      operationId: groups-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
      x-devrev-owner: UNKNOWN
  /internal/groups.delete:
    post:
      description: Deletes the requested group.
      operationId: groups-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
      x-devrev-owner: UNKNOWN
  /internal/groups.list:
    get:
      description: Lists the available groups.
      operationId: groups-list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the available groups.
      operationId: groups-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
      x-devrev-owner: UNKNOWN
  /internal/groups.update:
    post:
      description: Updates the requested group.
      operationId: groups-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/groups-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/groups-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - groups
      x-devrev-owner: UNKNOWN
  /internal/insights.get:
    get:
      description: Gets an Insight.
      operationId: insights-get
      parameters:
      - description: The insights's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/insights-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - insights
      x-devrev-owner: UNKNOWN
    post:
      description: Gets an Insight.
      operationId: insights-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/insights-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/insights-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - insights
      x-devrev-owner: UNKNOWN
  /internal/insights.list:
    get:
      description: Lists insights.
      operationId: insights-list
      parameters:
      - description: |
          The cursor to begin iteration from, otherwise if not provided, then
          iteration starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of insights to return. If not set, then the
          default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/insights-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - insights
      x-devrev-owner: UNKNOWN
    post:
      description: Lists insights.
      operationId: insights-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/insights-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/insights-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - insights
      x-devrev-owner: UNKNOWN
  /internal/insights.values.list:
    get:
      description: Lists insight values.
      operationId: insights-values-list
      parameters:
      - description: |
          The cursor to begin iteration from, otherwise if not provided, then
          iteration starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Filter based on for_object_id.
        explode: false
        in: query
        name: for_object_ids
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filter based on insight ids.
        explode: false
        in: query
        name: insight_ids
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of insights to return. If not set, then the
          default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/insights-values-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - insights
      x-devrev-owner: UNKNOWN
    post:
      description: Lists insight values.
      operationId: insights-values-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/insights-values-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/insights-values-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - insights
      x-devrev-owner: UNKNOWN
  /internal/invoices.get:
    get:
      description: Returns the invoice.
      operationId: invoices-get
      parameters:
      - description: The invoice object's DON.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoices-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Returns the invoice.
      operationId: invoices-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoices-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoices-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/invoices.list:
    get:
      description: List invoices for a customer.
      operationId: invoices-list
      parameters:
      - description: |
          Filter items which have billing date after the timestamp provided.
        explode: false
        in: query
        name: after_billing_date
        schema:
          format: date-time
          type: string
      - description: |
          Filter items which have due date after the timestamp provided.
        explode: false
        in: query
        name: after_due_date
        schema:
          format: date-time
          type: string
      - description: |
          Filter items which have billing date before the timestamp provided.
        explode: false
        in: query
        name: before_billing_date
        schema:
          format: date-time
          type: string
      - description: |
          Filter items which have due date before the timestamp provided.
        explode: false
        in: query
        name: before_due_date
        schema:
          format: date-time
          type: string
      - description: |
          Filter items by doing queries on invoice collection method.
        explode: false
        in: query
        name: collection_method
        schema:
          $ref: '#/components/schemas/invoices-collection-method'
      - description: |
          Filter items by doing queries on revs. To allow devs filter invoices
          for specific revs.
        explode: false
        in: query
        name: rev_org_ids
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: Filter items by doing queries on service plan.
        explode: false
        in: query
        name: service_plan_id
        schema:
          type: string
      - description: Filter items by doing queries on invoice status.
        explode: false
        in: query
        name: statuses
        schema:
          items:
            $ref: '#/components/schemas/invoice-status'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoices-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: List invoices for a customer.
      operationId: invoices-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/invoices-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/invoices-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/keyrings.authorize:
    get:
      description: OAuth2 authorization callback.
      operationId: keyrings-create-callback
      parameters:
      - description: Request for user sign-in authentication
        explode: false
        in: query
        name: authuser
        schema:
          type: string
      - description: Code to exchange for an access token
        explode: false
        in: query
        name: code
        schema:
          type: string
      - description: OAuth2 short error
        explode: false
        in: query
        name: error
        schema:
          type: string
      - description: OAuth2 error description
        explode: false
        in: query
        name: error_description
        schema:
          type: string
      - description: |
          Server ID where the application is authorized [for discord]
        explode: false
        in: query
        name: guild_id
        schema:
          type: string
      - description: The hosted domain of the user account
        explode: false
        in: query
        name: hd
        schema:
          type: string
      - description: Github installation ID
        explode: false
        in: query
        name: installation_id
        schema:
          type: string
      - description: OAuth2 permissions for an application
        explode: false
        in: query
        name: permissions
        schema:
          type: string
      - description: User consent dialog
        explode: false
        in: query
        name: prompt
        schema:
          type: string
      - description: OAuth2 scope
        explode: false
        in: query
        name: scope
        schema:
          type: string
      - description: Github action information
        explode: false
        in: query
        name: setup_action
        schema:
          type: string
      - description: State value given to the authorization request
        explode: false
        in: query
        name: state
        schema:
          type: string
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      security: []
      tags:
      - keyring
      x-devrev-owner: UNKNOWN
    post:
      description: OAuth2 authorization callback.
      operationId: keyrings-create-callback-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/keyrings-create-callback-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - keyring
      x-devrev-owner: UNKNOWN
  /internal/keyrings.capability.list:
    get:
      description: Lists capabilities.
      operationId: capabilities-list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/capabilities-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - keyring
      x-devrev-owner: UNKNOWN
    post:
      description: Lists capabilities.
      operationId: capabilities-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/capabilities-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/capabilities-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - keyring
      x-devrev-owner: UNKNOWN
  /internal/keyrings.create:
    post:
      description: Creates a keyring.
      operationId: keyrings-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/keyrings-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keyrings-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - keyring
      x-devrev-owner: UNKNOWN
  /internal/keyrings.delete:
    post:
      description: Deletes a keyring.
      operationId: keyrings-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/keyrings-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - keyring
      x-devrev-owner: UNKNOWN
  /internal/keyrings.external_org.list:
    get:
      description: Lists external organiztaions linked to a keyring.
      operationId: external-orgs-list
      parameters:
      - description: The keyring's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external-orgs-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - keyring
      x-devrev-owner: UNKNOWN
    post:
      description: Lists external organiztaions linked to a keyring.
      operationId: external-orgs-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/external-orgs-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/external-orgs-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - keyring
      x-devrev-owner: UNKNOWN
  /internal/keyrings.get:
    get:
      description: Gets a keyring.
      operationId: keyrings-get
      parameters:
      - description: The keyring's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keyrings-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - keyring
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a keyring.
      operationId: keyrings-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/keyrings-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keyrings-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - keyring
      x-devrev-owner: UNKNOWN
  /internal/keyrings.list:
    get:
      description: Lists keyrings for a Dev organization.
      operationId: keyrings-list
      parameters:
      - description: Filters keyrings with associated categories.
        explode: false
        in: query
        name: categories
        schema:
          items:
            type: string
          type: array
      - description: The cursor to begin iteration from
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Comma separated fields to sort the items by and how to sort them
          (field_name1:[asc/desc],field_name2:[asc/desc]).
        explode: false
        in: query
        name: sort_by
        schema:
          type: string
      - description: Filters for keyring of the provided types.
        explode: false
        in: query
        name: types
        schema:
          items:
            $ref: '#/components/schemas/keyring-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keyrings-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - keyring
      x-devrev-owner: UNKNOWN
    post:
      description: Lists keyrings for a Dev organization.
      operationId: keyrings-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/keyrings-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keyrings-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - keyring
      x-devrev-owner: UNKNOWN
  /internal/keyrings.update:
    post:
      description: Updates a keyring.
      operationId: keyrings-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/keyrings-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/keyrings-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - keyring
      x-devrev-owner: UNKNOWN
  /internal/knowledge:
    get:
      description: Lists all the vertices and edges in knowledge graph
      operationId: knowledge-v2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge-v2-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
    post:
      description: Lists all the vertices and edges in knowledge graph
      operationId: knowledge-v2-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/knowledge-v2-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/knowledge-v2-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/links.create:
    post:
      description: |
        Creates a link between two objects to indicate a relationship.
      operationId: links-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
      x-devrev-owner: UNKNOWN
  /internal/links.delete:
    post:
      description: Deletes a link.
      operationId: links-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
      x-devrev-owner: UNKNOWN
  /internal/links.get:
    get:
      description: Gets the requested link's information.
      operationId: links-get
      parameters:
      - description: The requested link's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the requested link's information.
      operationId: links-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
      x-devrev-owner: UNKNOWN
  /internal/links.group:
    get:
      description: Lists collections of links by groups.
      operationId: links-group
      parameters:
      - description: The field to group the links by.
        explode: false
        in: query
        name: group_by
        required: true
        schema:
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The direction of the links to list, otherwise if not present, then
          links in both directions (source and target) are included.
        explode: false
        in: query
        name: direction
        schema:
          $ref: '#/components/schemas/links-direction'
      - description: |
          The maximum number of groups to return. If not set, then the default
          is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The maximum number of links to return for an individual group. If not
          set, then the default is '50'.
        explode: false
        in: query
        name: limit_per_group
        schema:
          format: int32
          type: integer
      - description: |
          The link type(s) to filter for, otherwise if not present, all link
          types are included.
        explode: false
        in: query
        name: link_type
        schema:
          items:
            $ref: '#/components/schemas/link-type'
          type: array
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: The ID of the object to list the link groups for.
        explode: false
        in: query
        name: object
        schema:
          type: string
      - description: The ID of the object to list the link groups for.
        explode: false
        in: query
        name: object_id
        schema:
          deprecated: true
          type: string
      - description: |
          The link types to filter for, otherwise if not present, all link
          types are included.
        explode: false
        in: query
        name: types
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/link-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
      x-devrev-owner: UNKNOWN
    post:
      description: Lists collections of links by groups.
      operationId: links-group-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-group-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
      x-devrev-owner: UNKNOWN
  /internal/links.list:
    get:
      description: Lists the available links.
      operationId: links-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The direction of the links to list, otherwise if not present, then
          links in both directions (source and target) are included.
        explode: false
        in: query
        name: direction
        schema:
          $ref: '#/components/schemas/links-direction'
      - description: |
          The maximum number of links to return. If not set, then the default
          is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The link type(s) to filter for, otherwise if not present, all link
          types are included.
        explode: false
        in: query
        name: link_type
        schema:
          items:
            $ref: '#/components/schemas/link-type'
          type: array
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: The ID of the object to list the links for.
        explode: false
        in: query
        name: object
        schema:
          type: string
      - description: The ID of the object to list the links for.
        explode: false
        in: query
        name: object_id
        schema:
          deprecated: true
          type: string
      - description: |
          The link types to filter for, otherwise if not present, all link
          types are included.
        explode: false
        in: query
        name: types
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/link-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the available links.
      operationId: links-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
      x-devrev-owner: UNKNOWN
  /internal/links.replace:
    post:
      description: Replaces a link.
      operationId: links-replace
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/links-replace-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/links-replace-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - links
      x-devrev-owner: UNKNOWN
  /internal/lobbies.list:
    get:
      description: Lists the available lobbies.
      operationId: lobbies-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of lobbies to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lobbies-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - lobbies
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the available lobbies.
      operationId: lobbies-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/lobbies-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/lobbies-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - lobbies
      x-devrev-owner: UNKNOWN
  /internal/marketplace-categories.get:
    get:
      description: |
        ### Owner: luka.kosenina@devrev.ai
        ### Gets a marketplace category.
      operationId: marketplace-categories-get
      parameters:
      - description: The marketplace category ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-categories-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
    post:
      description: Gets a marketplace category.
      operationId: marketplace-categories-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplace-categories-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-categories-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
  /internal/marketplace-categories.list:
    get:
      description: |
        ### Owner: luka.kosenina@devrev.ai
        ### Gets the categories for a marketplace.
      operationId: marketplace-categories-list
      parameters:
      - description: The marketplace ID.
        explode: false
        in: query
        name: marketplace_id
        required: true
        schema:
          type: string
      - description: Whether to exclude empty categories.
        explode: false
        in: query
        name: exclude_empty_categories
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-categories-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
    post:
      description: Gets the categories for a marketplace.
      operationId: marketplace-categories-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplace-categories-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-categories-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
  /internal/marketplace-items.create:
    post:
      description: Creates a marketplace item.
      operationId: marketplace-items-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplace-items-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-items-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
  /internal/marketplace-items.delete:
    post:
      description: Deletes a marketplace item.
      operationId: marketplace-items-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplace-items-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: UNKNOWN
  /internal/marketplace-items.get:
    get:
      description: |
        ### Owner: luka.kosenina@devrev.ai
        ### Gets a marketplace item.
      operationId: marketplace-items-get
      parameters:
      - description: The marketplace item's ID.
        explode: false
        in: query
        name: id
        schema:
          type: string
      - description: Markteplace ID where to search a marketplace item by slug.
        explode: false
        in: query
        name: marketplace_id
        schema:
          type: string
      - description: The marketplace item's slug.
        explode: false
        in: query
        name: slug
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-items-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
    post:
      description: Gets a marketplace item.
      operationId: marketplace-items-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplace-items-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-items-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
  /internal/marketplace-items.install:
    post:
      description: Installs a flow or vista for the marketplace item.
      operationId: marketplace-items-install
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplace-items-install-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-items-install-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: UNKNOWN
  /internal/marketplace-items.list:
    get:
      description: Gets the marketplace items.
      operationId: marketplace-items-list
      parameters:
      - description: Filters marketplace items relevant for these categories.
        explode: false
        in: query
        name: categories
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for marketplace items created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on created_by.
        explode: false
        in: query
        name: created_by_op
        schema:
          $ref: '#/components/schemas/list-marketplace-items-filter-created-by-operator-type'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          To start listing marketplace items cursor field should not be
          provided. Set cursor to value returned by the previous call to list
          items in the next page.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Limit for how many items to be retrieved per page. Default is 50.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: Markteplace ID where to list marketplace items.
        explode: false
        in: query
        name: marketplace_id
        schema:
          type: string
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters for marketplace items owned by some organization.
        explode: false
        in: query
        name: owned_by
        schema:
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      - description: |
          List of fields to sort the marketplace item object, by and how to
          sort them. Default is to sort by created_date in descending order.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters on state for marketplace items.
        explode: false
        in: query
        name: state
        schema:
          items:
            $ref: '#/components/schemas/marketplace-item-state'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-items-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the marketplace items.
      operationId: marketplace-items-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplace-items-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-items-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: UNKNOWN
  /internal/marketplace-items.transition:
    post:
      description: Puts a marketplace item in desired state.
      operationId: marketplace-items-transition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplace-items-transition-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-items-transition-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
  /internal/marketplace-items.update:
    post:
      description: Updates a marketplace item.
      operationId: marketplace-items-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplace-items-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-items-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
  /internal/marketplace-submissions.create:
    post:
      description: Creates a marketplace submission.
      operationId: marketplace-submissions-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplace-submissions-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-submissions-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
  /internal/marketplace-submissions.get:
    get:
      description: |
        ### Owner: luka.kosenina@devrev.ai
        ### Gets a marketplace submission.
      operationId: marketplace-submissions-get
      parameters:
      - description: The marketplace submissions's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-submissions-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
    post:
      description: Gets a marketplace submission.
      operationId: marketplace-submissions-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplace-submissions-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-submissions-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
  /internal/marketplace-submissions.transition:
    post:
      description: Puts a marketplace submission in desired state.
      operationId: marketplace-submissions-transition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplace-submissions-transition-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplace-submissions-transition-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
  /internal/marketplaces.get:
    get:
      description: |-
        ### Owner: luka.kosenina@devrev.ai
        ### Gets a marketplace.
      operationId: marketplaces-get
      parameters:
      - description: The marketplace DON.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplaces-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
    post:
      description: Gets a marketplace.
      operationId: marketplaces-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplaces-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplaces-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
  /internal/marketplaces.list:
    get:
      description: |
        ### Owner: luka.kosenina@devrev.ai
        ### Gets the marketplaces.
      operationId: marketplaces-list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplaces-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
    post:
      description: Gets the marketplaces.
      operationId: marketplaces-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/marketplaces-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/marketplaces-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - marketplace
      x-devrev-owner: luka.kosenina@devrev.ai
  /internal/meetings.count:
    get:
      description: |
        ### Owner: rahul.jain@devrev.ai
        ### Counts the meeting records.
      operationId: meetings-count
      parameters:
      - description: Filters for meetings with the provided parent.
        explode: false
        in: query
        name: parent
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - meetings
      x-devrev-owner: rahul.jain@devrev.ai
    post:
      description: Counts the meeting records.
      operationId: meetings-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meetings-count-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - meetings
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/meetings.create:
    post:
      description: Creates a new meeting record.
      operationId: meetings-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meetings-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - meetings
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/meetings.delete:
    post:
      description: Deletes the meeting record.
      operationId: meetings-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meetings-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - meetings
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/meetings.get:
    get:
      description: |-
        ### Owner: rahul.jain@devrev.ai
        ### Gets the meeting record.
      operationId: meetings-get
      parameters:
      - description: The meeting's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - meetings
      x-devrev-owner: rahul.jain@devrev.ai
    post:
      description: Gets the meeting record.
      operationId: meetings-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meetings-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - meetings
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/meetings.list:
    get:
      description: |
        ### Owner: rahul.jain@devrev.ai
        ### Lists the meeting records.
      operationId: meetings-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The maximum number of meetings to return.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Filters for meetings with the provided parent.
        explode: false
        in: query
        name: parent
        schema:
          items:
            type: string
          type: array
      - description: |
          Fields to sort the meetings by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - meetings
      x-devrev-owner: rahul.jain@devrev.ai
    post:
      description: Lists the meeting records.
      operationId: meetings-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meetings-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - meetings
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/meetings.update:
    post:
      description: Updates the meeting record.
      operationId: meetings-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/meetings-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/meetings-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - meetings
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/metric-definitions.list:
    get:
      description: |
        ### Owner: lorinc.body@devrev.ai
        ### Lists metric definitions matching a filter.
      operationId: metric-definitions-list
      parameters:
      - description: The type of objects the metric definition applies to.
        explode: false
        in: query
        name: applies_to_type
        schema:
          items:
            $ref: '#/components/schemas/metric-definition-applies-to'
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of records to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Fields to sort the records by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: The type of metric definitions sought.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/metric-definition-metric-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-definitions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
      x-devrev-owner: lorinc.body@devrev.ai
    post:
      description: Lists metric definitions matching a filter.
      operationId: metric-definitions-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metric-definitions-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/metric-definitions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/metrics.devrev.ingest:
    post:
      description: Ingest endpoint for DevRev metrics data from clients.
      operationId: metrics-devrev-ingest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/metrics-data-ingest-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - telemetry
      x-devrev-owner: UNKNOWN
  /internal/metrics.otlp.write:
    post:
      description: Write endpoint for OTLP metrics data from clients.
      operationId: metrics-otlp-write
      requestBody:
        content:
          application/x-protobuf: {}
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - telemetry
      x-devrev-owner: UNKNOWN
  /internal/metrics.prometheus.write:
    post:
      description: Write endpoint for Prometheus metrics data from clients.
      operationId: metrics-prometheus-write
      requestBody:
        content:
          application/x-protobuf: {}
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - telemetry
      x-devrev-owner: UNKNOWN
  /internal/mfz-defaults.seed:
    post:
      description: |
        Seeds default configuration of groups, conditional roles and group
        members for the dev organization.
      operationId: mfz-defaults-seed
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/mfz-defaults-seed-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/mfz-defaults-seed-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/microflows.create:
    post:
      description: Creates a microflow.
      operationId: microflow-definitions-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflow-definitions-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflow-definitions-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.delete:
    post:
      description: Deletes a microflow.
      operationId: microflow-definitions-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflow-definitions-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.draft.create:
    post:
      description: |
        Creates a draft microflow corresponding to a published microflow.
      operationId: microflow-definitions-create-draft
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflow-definitions-create-draft-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflow-definitions-create-draft-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.draft.get:
    get:
      description: |
        Gets a draft microflow associated with a published microflow.
      operationId: microflow-definitions-get-draft
      parameters:
      - description: The published microflow's DON
        explode: false
        in: query
        name: published_microflow_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflow-definitions-get-draft-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Gets a draft microflow associated with a published microflow.
      operationId: microflow-definitions-get-draft-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflow-definitions-get-draft-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflow-definitions-get-draft-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.draft.getorcreate:
    post:
      description: |
        Gets a draft microflow associated with a published microflow or creates
        one if does not exist.
      operationId: microflow-definitions-get-or-create-draft
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflow-definitions-get-or-create-draft-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflow-definitions-get-or-create-draft-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.get:
    get:
      description: Gets a microflow.
      operationId: microflow-definitions-get
      parameters:
      - description: The microflow definition's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflow-definitions-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a microflow.
      operationId: microflow-definitions-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflow-definitions-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflow-definitions-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.list:
    get:
      description: Lists microflows for a Dev organization.
      operationId: microflow-definitions-list
      parameters:
      - description: Page number for paginated microflow definition items.
        explode: false
        in: query
        name: page
        schema:
          format: int32
          type: integer
      - description: |
          Number of microflow definition items to return per page. Default is
          50.
        explode: false
        in: query
        name: per_page
        schema:
          format: int32
          type: integer
      - description: |
          List of fields to sort the microflow definition items by and how to
          sort them. Default is to sort by created_date in descending order.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflow-definitions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
    post:
      description: Lists microflows for a Dev organization.
      operationId: microflow-definitions-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflow-definitions-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflow-definitions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.publish:
    post:
      description: Publishes a microflow.
      operationId: microflow-definitions-publish
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflow-definitions-publish-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.states.create:
    post:
      description: Creates state within a microflow.
      operationId: microflows-target-object-states-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflows-target-object-states-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflows-target-object-states-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.states.delete:
    post:
      description: Deletes a state within a microflow.
      operationId: microflows-target-object-states-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflows-target-object-states-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.states.update:
    post:
      description: Updates a state within a microflow.
      operationId: microflows-target-object-states-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflows-target-object-states-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflows-target-object-states-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.transitions.create:
    post:
      description: Creates a transition within a microflow.
      operationId: microflows-target-object-transitions-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflows-target-object-transitions-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflows-target-object-transitions-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.transitions.delete:
    post:
      description: Deletes a transition within a microflow.
      operationId: microflows-target-object-transitions-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflows-target-object-transitions-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.transitions.update:
    post:
      description: Updates a transition within a microflow.
      operationId: microflows-target-object-transitions-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflows-target-object-transitions-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflows-target-object-transitions-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/microflows.update:
    post:
      description: Updates a microflow.
      operationId: microflow-definitions-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/microflow-definitions-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/microflow-definitions-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - microflows
      x-devrev-owner: UNKNOWN
  /internal/news.create:
    post:
      description: Creates a news item.
      operationId: news-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/news-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/news-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - news
      x-devrev-owner: UNKNOWN
  /internal/news.delete:
    post:
      description: Deletes a news item.
      operationId: news-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/news-delete-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - news
      x-devrev-owner: UNKNOWN
  /internal/news.get:
    get:
      description: Gets a news item.
      operationId: news-get
      parameters:
      - description: The ID of the requested news item.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/news-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - news
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a news item.
      operationId: news-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/news-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/news-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - news
      x-devrev-owner: UNKNOWN
  /internal/news.list:
    get:
      description: Lists news items.
      operationId: news-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of news items to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/news-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - news
      x-devrev-owner: UNKNOWN
    post:
      description: Lists news items.
      operationId: news-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/news-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/news-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - news
      x-devrev-owner: UNKNOWN
  /internal/notifications.channels:
    get:
      description: Lists the notifications channels for Android.
      operationId: notifications-channels
      parameters:
      - description: The type of mobile device.
        explode: false
        in: query
        name: device_type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications-channels-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - notifications
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the notifications channels for Android.
      operationId: notifications-channels-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notifications-channels-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications-channels-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - notifications
      x-devrev-owner: UNKNOWN
  /internal/notifications.group:
    get:
      description: Lists the notifications by groups.
      operationId: notifications-group
      parameters:
      - description: The field to group the notifications by.
        explode: false
        in: query
        name: group_by
        required: true
        schema:
          type: string
      - description: Actor user IDs by which to filter the response.
        explode: false
        in: query
        name: actor_ids
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          The cursor from where to begin iteration. Start from beginning if not
          provided.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Notification IDs by which to filter the response.
        explode: false
        in: query
        name: ids
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of groups to return. If not set, then the default
          is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The maximum number of notifications to return for an individual
          group. Default is '50'.
        explode: false
        in: query
        name: limit_per_group
        schema:
          format: int32
          type: integer
      - description: Parent IDs by which to filter the response.
        explode: false
        in: query
        name: parent_ids
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Parent object types by which to filter the response.
        explode: false
        in: query
        name: parent_types
        schema:
          items:
            $ref: '#/components/schemas/notification-parent-type'
          type: array
      - description: Comma-separated fields to sort the notifications by.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Notification states by which to filter the response.
        explode: false
        in: query
        name: states
        schema:
          items:
            $ref: '#/components/schemas/notification-state'
          type: array
      - description: Notification types by which to filter the response.
        explode: false
        in: query
        name: types
        schema:
          items:
            $ref: '#/components/schemas/notification-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - notifications
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the notifications by groups.
      operationId: notifications-group-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notifications-group-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - notifications
      x-devrev-owner: UNKNOWN
  /internal/notifications.list:
    get:
      description: Lists the notifications.
      operationId: notifications-list
      parameters:
      - description: Actor user IDs by which to filter the response.
        explode: false
        in: query
        name: actor_ids
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          The cursor from where to begin iteration. Start from beginning if not
          provided.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Notification IDs by which to filter the response.
        explode: false
        in: query
        name: ids
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of notifications to return. Default is 50.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: Parent IDs by which to filter the response.
        explode: false
        in: query
        name: parent_ids
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Parent object types by which to filter the response.
        explode: false
        in: query
        name: parent_types
        schema:
          items:
            $ref: '#/components/schemas/notification-parent-type'
          type: array
      - description: Comma-separated fields to sort the notifications by.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Notification states by which to filter the response.
        explode: false
        in: query
        name: states
        schema:
          items:
            $ref: '#/components/schemas/notification-state'
          type: array
      - description: Notification types by which to filter the response.
        explode: false
        in: query
        name: types
        schema:
          items:
            $ref: '#/components/schemas/notification-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - notifications
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the notifications.
      operationId: notifications-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notifications-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - notifications
      x-devrev-owner: UNKNOWN
  /internal/notifications.mark:
    post:
      description: Updates the state of the notifications.
      operationId: notifications-mark
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notifications-mark-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - notifications
      x-devrev-owner: UNKNOWN
  /internal/notifications.send:
    post:
      description: Generate a notification.
      operationId: notifications-send
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/notifications-send-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/notifications-send-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - notifications
      x-devrev-owner: UNKNOWN
  /internal/oasis.data.create:
    post:
      description: Creates the Oasis data for the metric.
      operationId: oasis-data-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oasis-data-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oasis-data-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - oasis
      x-devrev-owner: bhavani.hari@devrev.ai
  /internal/oasis.data.fetch:
    post:
      description: Returns the Oasis data paths for the metric.
      operationId: oasis-data-fetch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oasis-data-fetch-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oasis-data-fetch-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - oasis
      x-devrev-owner: bhavani.hari@devrev.ai
  /internal/oasis.data.query:
    post:
      description: Returns the Oasis data after executing the query.
      operationId: oasis-data-query
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/oasis-data-query-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/oasis-data-query-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - oasis
      x-devrev-owner: bhavani.hari@devrev.ai
  /internal/object-members.count:
    get:
      description: |
        Returns the total count of the object members satisfying the request
        parameters.
      operationId: count-object-member
      parameters:
      - description: |
          The ID of the users or groups that must be a member of one of the
          specified objects. If empty, then the result sums the total number of
          members for each object.
        explode: false
        in: query
        name: member_ids
        schema:
          items:
            type: string
          type: array
      - description: |
          The ID of the objects to count the members for. If empty, then the
          result sums the total number of objects that each member is a part
          of.
        explode: false
        in: query
        name: object_ids
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/count-object-member-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - object-members
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Returns the total count of the object members satisfying the request
        parameters.
      operationId: count-object-member-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/count-object-member-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/count-object-member-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - object-members
      x-devrev-owner: UNKNOWN
  /internal/object-members.create:
    post:
      description: Creates an object member.
      operationId: create-object-member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create-object-member-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create-object-member-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - object-members
      x-devrev-owner: UNKNOWN
  /internal/object-members.get:
    get:
      description: Gets an object member.
      operationId: get-object-member
      parameters:
      - description: |
          Globally unique DevRev Object Name (DON) for the Object Member.
        explode: false
        in: query
        name: object_member_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-object-member-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - object-members
      x-devrev-owner: UNKNOWN
    post:
      description: Gets an object member.
      operationId: get-object-member-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/get-object-member-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-object-member-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - object-members
      x-devrev-owner: UNKNOWN
  /internal/object-members.list:
    get:
      description: Lists object members satisfying the request parameters.
      operationId: list-object-member
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of object members to return. If not set, then the
          default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: ID of the user or group.
        explode: false
        in: query
        name: member_ids
        schema:
          items:
            type: string
          type: array
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Globally unique DevRev Object Name (DON) for the object where the
          member is being added.
        explode: false
        in: query
        name: object_ids
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list-object-member-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - object-members
      x-devrev-owner: UNKNOWN
    post:
      description: Lists object members satisfying the request parameters.
      operationId: list-object-member-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/list-object-member-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list-object-member-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - object-members
      x-devrev-owner: UNKNOWN
  /internal/object-members.remove:
    post:
      description: Removes an object member.
      operationId: remove-object-member
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/remove-object-member-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/remove-object-member-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - object-members
      x-devrev-owner: UNKNOWN
  /internal/onboarding-tasks.apply:
    post:
      description: |
        Updates and returns the available tasks for the authenticated user.
      operationId: onboarding-tasks-apply
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/onboarding-tasks-apply-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/onboarding-tasks-apply-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - onboarding
      x-devrev-owner: brian.byrne@devrev.ai
  /internal/one-time-line-items.list:
    get:
      description: |
        Gets the one time line item objects based on the given filters.
      operationId: one-time-items-list
      parameters:
      - description: |
          The list of one time line item DONs which are to be aggregated.
        explode: false
        in: query
        name: ids
        schema:
          items:
            type: string
          type: array
      - description: Filter, invoiced vs un-invoiced service plan objects.
        explode: false
        in: query
        name: is_invoiced
        schema:
          type: boolean
      - description: The list of rev org DONs which are to be aggregated.
        explode: false
        in: query
        name: rev_org_ids
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: The list of service plan DONs which are to be aggregated.
        explode: false
        in: query
        name: service_plan_ids
        schema:
          items:
            type: string
          type: array
      - description: |
          List of fields to sort the one time line item object, by and how to
          sort them. Default is to sort by created_date in descending order.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/one-time-items-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Gets the one time line item objects based on the given filters.
      operationId: one-time-items-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/one-time-items-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/one-time-items-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/org-schedule-fragments.create:
    post:
      description: Creates an organization schedule fragment
      operationId: org-schedule-fragments-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedule-fragments-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedule-fragments-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/org-schedule-fragments.get:
    get:
      description: |
        ### Owner: lorinc.body@devrev.ai
        ### Gets an organization schedule fragment
      operationId: org-schedule-fragments-get
      parameters:
      - description: organization schedule Fragment ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedule-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
      x-devrev-owner: lorinc.body@devrev.ai
    post:
      description: Gets an organization schedule fragment
      operationId: org-schedule-fragments-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedule-fragments-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedule-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/org-schedule-fragments.transition:
    post:
      description: Changes stage of an organization schedule fragment
      operationId: org-schedule-fragments-transition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedule-fragments-transition-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedule-fragments-transition-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/org-schedules.create:
    post:
      description: |
        Creates an organization schedule with a default weekly organization
        schedule and a list of organization schedule fragments
      operationId: org-schedules-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/org-schedules.get:
    get:
      description: |
        ### Owner: lorinc.body@devrev.ai
        ### Gets an organization schedule
      operationId: org-schedules-get
      parameters:
      - description: organization schedule ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
      x-devrev-owner: lorinc.body@devrev.ai
    post:
      description: Gets an organization schedule
      operationId: org-schedules-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/org-schedules.set-future:
    post:
      description: |
        Sets next organization schedule fragment which must begin the day the
        last existing fragment ends
      operationId: org-schedules-set-future
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-set-future-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-set-future-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/org-schedules.transition:
    post:
      description: Publishes or archives an organization schedule
      operationId: org-schedules-transition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/org-schedules-transition-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/org-schedules-transition-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - schedules
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/parts.contributors.list:
    get:
      description: Lists top contributors of a part.
      operationId: parts-contributors-list
      parameters:
      - description: The part's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      - description: |
          The maximum number of contributors to return. If not set, then the
          default is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-contributors-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
    post:
      description: Lists top contributors of a part.
      operationId: parts-contributors-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-contributors-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-contributors-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.count:
    get:
      description: Get count of parts matching given filter.
      operationId: parts-count
      parameters:
      - description: Filters for parts of the provided categories.
        explode: false
        in: query
        name: categories
        schema:
          items:
            $ref: '#/components/schemas/part-category'
          type: array
      - description: Filters for parts created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on created_by.
        explode: false
        in: query
        name: created_by_op
        schema:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: enhancement.target_close_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: enhancement.target_close_date.before
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters for parts of the provided name(s).
        explode: false
        in: query
        name: name
        schema:
          items:
            type: string
          type: array
      - description: Filters for parts owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for parts owned by any of the provided users.
        explode: false
        in: query
        name: owned_by_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on owned_by.
        explode: false
        in: query
        name: owned_by_op
        schema:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
      - description: Filters for records in the provided stage(s).
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for part with any of the provided states.
        explode: false
        in: query
        name: state
        schema:
          items:
            type: string
          type: array
      - description: Filters for parts with any of the provided tags.
        explode: false
        in: query
        name: tag_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: Filters for part with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tags_op
        schema:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
      - description: Filters for parts of the provided type(s).
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      - description: Filters for parts of the provided type(s).
        explode: false
        in: query
        name: types
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
    post:
      description: Get count of parts matching given filter.
      operationId: parts-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-count-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.create:
    post:
      description: Creates new [part](https://devrev.ai/docs/product/parts).
      operationId: parts-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.customers.list:
    get:
      description: Lists top customers of a part.
      operationId: parts-customers-list
      parameters:
      - description: The part's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      - description: |
          The maximum number of customers to return. If not set, then the
          default is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-customers-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
    post:
      description: Lists top customers of a part.
      operationId: parts-customers-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-customers-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-customers-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.delete:
    post:
      description: Deletes a [part](https://devrev.ai/docs/product/parts).
      operationId: parts-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.descendant-links.traverse:
    get:
      description: Get links for part hierarchy
      operationId: parts-descendant-links-traverse
      parameters:
      - description: |
          ID of the part tree root to traverse links to descendant nodes from.
        explode: false
        in: query
        name: root
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      - description: |
          Cursor to begin iteration from. If empty, iteration will begin from
          the beginning of the result set
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Maximum number of link items to return. Default is 50.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          If > 0, the maximum depth of the tree to traverse links from the
          root.
        explode: false
        in: query
        name: max_depth
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-descendant-links-traverse-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
    post:
      description: Get links for part hierarchy
      operationId: parts-descendant-links-traverse-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-descendant-links-traverse-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-descendant-links-traverse-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.features.api-endpoints.delete:
    post:
      description: Deletes API endpoints from a feature.
      operationId: parts-features-api-endpoints-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-features-api-endpoints-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-features-api-endpoints-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.features.api-endpoints.merge:
    post:
      description: Merges API endpoints across two features.
      operationId: parts-features-api-endpoints-merge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-features-api-endpoints-merge-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-features-api-endpoints-merge-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.features.api-operations.delete:
    post:
      description: Deletes API operations from a feature.
      operationId: parts-features-api-operations-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-features-api-operations-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-features-api-operations-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.features.api-operations.merge:
    post:
      description: Merges API operations across two features.
      operationId: parts-features-api-operations-merge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-features-api-operations-merge-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-features-api-operations-merge-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.get:
    get:
      description: |
        Gets a [part's](https://devrev.ai/docs/product/parts) information.
      operationId: parts-get
      parameters:
      - description: The ID of the part to retrieve.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Gets a [part's](https://devrev.ai/docs/product/parts) information.
      operationId: parts-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.group:
    get:
      description: Lists collections of parts by groups.
      operationId: parts-group
      parameters:
      - description: The field to group the parts by.
        explode: false
        in: query
        name: group_by
        required: true
        schema:
          type: string
      - description: Filters for parts of the provided categories.
        explode: false
        in: query
        name: categories
        schema:
          items:
            $ref: '#/components/schemas/part-category'
          type: array
      - description: Filters for parts created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on created_by.
        explode: false
        in: query
        name: created_by_op
        schema:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: enhancement.target_close_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: enhancement.target_close_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The maximum number of groups to return. If not set, then the default
          is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The maximum number of parts to return for an individual group. If not
          set, then the default is '50'.
        explode: false
        in: query
        name: limit_per_group
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters for parts of the provided name(s).
        explode: false
        in: query
        name: name
        schema:
          items:
            type: string
          type: array
      - description: Filters for parts owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for parts owned by any of the provided users.
        explode: false
        in: query
        name: owned_by_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on owned_by.
        explode: false
        in: query
        name: owned_by_op
        schema:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
      - description: Comma-separated fields to sort the parts by.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters for records in the provided stage(s).
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for part with any of the provided states.
        explode: false
        in: query
        name: state
        schema:
          items:
            type: string
          type: array
      - description: Filters for parts with any of the provided tags.
        explode: false
        in: query
        name: tag_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: Filters for part with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tags_op
        schema:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
      - description: Filters for parts of the provided type(s).
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      - description: Filters for parts of the provided type(s).
        explode: false
        in: query
        name: types
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
    post:
      description: Lists collections of parts by groups.
      operationId: parts-group-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-group-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.list:
    get:
      description: |
        Lists a collection of [parts](https://devrev.ai/docs/product/parts).
      operationId: parts-list
      parameters:
      - description: Filters for parts of the provided categories.
        explode: false
        in: query
        name: categories
        schema:
          items:
            $ref: '#/components/schemas/part-category'
          type: array
      - description: Filters for parts created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on created_by.
        explode: false
        in: query
        name: created_by_op
        schema:
          $ref: '#/components/schemas/parts-filter-created-by-op-operator-type'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: enhancement.target_close_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: enhancement.target_close_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The maximum number of parts to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters for parts of the provided name(s).
        explode: false
        in: query
        name: name
        schema:
          items:
            type: string
          type: array
      - description: Filters for parts owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for parts owned by any of the provided users.
        explode: false
        in: query
        name: owned_by_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on owned_by.
        explode: false
        in: query
        name: owned_by_op
        schema:
          $ref: '#/components/schemas/parts-filter-owned-by-op-operator-type'
      - description: |
          Fields to sort the parts by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters for records in the provided stage(s).
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for part with any of the provided states.
        explode: false
        in: query
        name: state
        schema:
          items:
            type: string
          type: array
      - description: Filters for parts with any of the provided tags.
        explode: false
        in: query
        name: tag_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: Filters for part with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tags_op
        schema:
          $ref: '#/components/schemas/parts-filter-tags-op-operator-type'
      - description: Filters for parts of the provided type(s).
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      - description: Filters for parts of the provided type(s).
        explode: false
        in: query
        name: types
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/part-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Lists a collection of [parts](https://devrev.ai/docs/product/parts).
      operationId: parts-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.mutate:
    get:
      description: Mutate a part to either promote or merge it.
      operationId: parts-mutate
      parameters:
      - description: ID of the part to be mutated.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-mutate-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
    post:
      description: Mutate a part to either promote or merge it.
      operationId: parts-mutate-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-mutate-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-mutate-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.supporters.list:
    get:
      description: Lists top supporters of a part.
      operationId: parts-supporters-list
      parameters:
      - description: The part's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      - description: |
          The maximum number of supporters to return. If not set, then the
          default is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-supporters-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
    post:
      description: Lists top supporters of a part.
      operationId: parts-supporters-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-supporters-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-supporters-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/parts.update:
    post:
      description: |
        Updates a [part's](https://devrev.ai/docs/product/parts) information.
      operationId: parts-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - parts
      x-devrev-owner: UNKNOWN
  /internal/payment-intents.update:
    post:
      description: Update payment intent object.
      operationId: payment-intents-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payment-intents-update-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/payment-methods.delete:
    post:
      description: Deletes the payment method from the customer configuration.
      operationId: payment-methods-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payment-methods-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/payment-methods.get:
    get:
      description: Returns the payment method.
      operationId: payment-methods-get
      parameters:
      - description: The payment method's DON
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment-methods-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Returns the payment method.
      operationId: payment-methods-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payment-methods-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment-methods-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/payment-methods.list:
    get:
      description: List payment methods for a customer.
      operationId: payment-methods-list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment-methods-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: List payment methods for a customer.
      operationId: payment-methods-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/empty'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment-methods-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/payment-methods.set-default:
    post:
      description: |
        Sets the payment method as default in the customer configuration.
      operationId: payment-methods-set-default
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payment-methods-set-default-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/payment-methods.setup-intent.create:
    post:
      description: |
        Setup intent initiates the process of saving a payment method details
        in the customer's configuration. The API returns a client key which is
        to be used on the front end side to call Stripe to verify and save the
        user entered payment method details for the customer on Stripe.
      operationId: payment-methods-setup-intent-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/payment-methods-setup-intent-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payment-methods-setup-intent-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/plug-settings.create:
    post:
      description: Create a plug setting object.
      operationId: plug-settings-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plug-settings-create-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plug-settings-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - plug-settings
      x-devrev-owner: madhav.sikka@devrev.ai
  /internal/plug-settings.default.create:
    post:
      description: Create a default plug setting object.
      operationId: plug-settings-default-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plug-settings-default-create-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plug-settings-default-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - plug-settings
      x-devrev-owner: madhav.sikka@devrev.ai
  /internal/plug-settings.delete:
    post:
      description: Deletes a plug setting object.
      operationId: plug-settings-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plug-settings-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plug-settings-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - plug-settings
      x-devrev-owner: madhav.sikka@devrev.ai
  /internal/plug-settings.get:
    get:
      description: |
        ### Owner: madhav.sikka@devrev.ai
        ### Get plug setting object.
      operationId: plug-settings-get
      parameters:
      - description: The plug settings object ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plug-settings-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - plug-settings
      x-devrev-owner: madhav.sikka@devrev.ai
    post:
      description: Get plug setting object.
      operationId: plug-settings-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plug-settings-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plug-settings-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - plug-settings
      x-devrev-owner: madhav.sikka@devrev.ai
  /internal/plug-settings.list:
    get:
      description: |
        ### Owner: madhav.sikka@devrev.ai
        ### Lists plug setting objects.
      operationId: plug-settings-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of plug setting objects to return. The default is
          '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Fields to sort the plug settings object by and the direction to sort
          them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plug-settings-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - plug-settings
      x-devrev-owner: madhav.sikka@devrev.ai
    post:
      description: Lists plug setting objects.
      operationId: plug-settings-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plug-settings-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plug-settings-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - plug-settings
      x-devrev-owner: madhav.sikka@devrev.ai
  /internal/plug-settings.update:
    post:
      description: Update plug setting object.
      operationId: plug-settings-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/plug-settings-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/plug-settings-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - plug-settings
      x-devrev-owner: madhav.sikka@devrev.ai
  /internal/preferences.get:
    get:
      description: Get the preferences object.
      operationId: preferences-get
      parameters:
      - description: The ID of the preferences object to be fetched.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - preferences
      x-devrev-owner: UNKNOWN
    post:
      description: Get the preferences object.
      operationId: preferences-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/preferences-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - preferences
      x-devrev-owner: UNKNOWN
  /internal/preferences.list:
    get:
      description: Lists the preferences defined for a particular object.
      operationId: preferences-list
      parameters:
      - description: |
          The ID of the object for which the preferences are to be listed.
        explode: false
        in: query
        name: object
        required: true
        schema:
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - preferences
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the preferences defined for a particular object.
      operationId: preferences-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/preferences-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - preferences
      x-devrev-owner: UNKNOWN
  /internal/preferences.snap-kit.list:
    get:
      description: Lists the preferences snap kit JSON for a particular object.
      operationId: preferences-snap-kit-list
      parameters:
      - description: |
          The ID of the object for which the preferences snap kit is to be
          fetched.
        explode: false
        in: query
        name: object
        required: true
        schema:
          example: don:<partition>:identity:devo/<dev-org-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences-snap-kit-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - preferences
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the preferences snap kit JSON for a particular object.
      operationId: preferences-snap-kit-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/preferences-snap-kit-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences-snap-kit-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - preferences
      x-devrev-owner: UNKNOWN
  /internal/preferences.update:
    post:
      description: Updates the preference for a particular object.
      operationId: preferences-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/preferences-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/preferences-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - preferences
      x-devrev-owner: UNKNOWN
  /internal/pricings.create:
    post:
      description: Creates a pricing object.
      operationId: pricings-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pricings-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pricings-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/pricings.delete:
    post:
      description: Deletes a pricing object.
      operationId: pricings-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pricings-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/pricings.get:
    get:
      description: Gets a pricing object.
      operationId: pricings-get
      parameters:
      - description: The pricing object's DON.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pricings-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a pricing object.
      operationId: pricings-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pricings-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pricings-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/pricings.list:
    get:
      description: Gets the pricing objects based on the given filters.
      operationId: pricings-list
      parameters:
      - description: The list of pricing DONs which are to be aggregated.
        explode: false
        in: query
        name: ids
        schema:
          items:
            type: string
          type: array
      - description: Filter, active vs inactive pricing objects.
        explode: false
        in: query
        name: is_active
        schema:
          type: boolean
      - description: The list of rev org DONs which are to be aggregated.
        explode: false
        in: query
        name: rev_org_ids
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: The list of sku DONs which are to be aggregated.
        explode: false
        in: query
        name: sku_ids
        schema:
          items:
            type: string
          type: array
      - description: |
          List of fields to sort the pricing object, by and how to sort them.
          Default is to sort by created_date in descending order.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pricings-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the pricing objects based on the given filters.
      operationId: pricings-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pricings-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pricings-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/pricings.update:
    post:
      description: Updates a pricing object.
      operationId: pricings-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/pricings-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/pricings-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/profiles.create:
    post:
      description: |
        DevRev Profile is a user's personal profile to promote themselves and
        connect with other professionals. This method returns a successful
        response if a profile is created with a unique email and display
        handle. If another login option with same email is used, the existing
        profile is updated. Otherwise, the method returns conflict response due
        to already existing profile. Also, the method requires authorization
        token obtained from DevRev platform through the login workflow.
      operationId: profiles-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profiles-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profiles-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "409":
          $ref: '#/components/responses/conflict'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - profiles
      x-devrev-owner: UNKNOWN
  /internal/profiles.get-by-handle:
    get:
      description: |
        Gets the profile's public information of a user on the DevRev platform
        using display-handle. The method returns not-found response if the
        profile's visibility is private or if it does not exist. Also note that
        display-handle can also be changed by the user.
      operationId: profiles-get-by-handle
      parameters:
      - description: The display handle of the profile to get.
        explode: false
        in: query
        name: display_handle
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profiles-get-by-handle-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      security: []
      tags:
      - profiles
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Gets the profile's public information of a user on the DevRev platform
        using display-handle. The method returns not-found response if the
        profile's visibility is private or if it does not exist. Also note that
        display-handle can also be changed by the user.
      operationId: profiles-get-by-handle-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profiles-get-by-handle-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profiles-get-by-handle-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - profiles
      x-devrev-owner: UNKNOWN
  /internal/profiles.is-display-handle-available:
    get:
      description: |
        Checks to ensure that the desired display handle is not already in use.
        This does not secure the handle, so it is possible that the check would
        be successful and a subsequent call to create a profile with the
        checked display handle might fail due to a race condition.
      operationId: profiles-is-display-handle-available
      parameters:
      - description: Display handles are used to uniquely identify the users.
        explode: false
        in: query
        name: display_handle
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profiles-is-display-handle-available-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - profiles
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Checks to ensure that the desired display handle is not already in use.
        This does not secure the handle, so it is possible that the check would
        be successful and a subsequent call to create a profile with the
        checked display handle might fail due to a race condition.
      operationId: profiles-is-display-handle-available-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profiles-is-display-handle-available-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profiles-is-display-handle-available-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - profiles
      x-devrev-owner: UNKNOWN
  /internal/profiles.self:
    get:
      description: Gets the currently logged in user's profile information.
      operationId: profiles-self
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profiles-self-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - profiles
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the currently logged in user's profile information.
      operationId: profiles-self-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profiles-self-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profiles-self-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - profiles
      x-devrev-owner: UNKNOWN
  /internal/profiles.self.delete:
    post:
      description: |
        Deletes the currently logged in user profile from the DevRev platform.
      operationId: profiles-self-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profiles-self-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profiles-self-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - profiles
      x-devrev-owner: UNKNOWN
  /internal/profiles.self.update:
    post:
      description: |
        Updates the currently logged-in user's profile information. Beware, the
        links to your profile page will return a not-found error on changing
        your display-handle. Also, your old display-handle becomes available
        for anyone else to claim.
      operationId: profiles-self-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/profiles-self-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/profiles-self-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - profiles
      x-devrev-owner: UNKNOWN
  /internal/push-devices.register:
    post:
      description: Registers a push device.
      operationId: push-devices-register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/push-devices-register-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/push-devices-register-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - notifications
      x-devrev-owner: UNKNOWN
  /internal/push-devices.unregister:
    post:
      description: Unregisters a push device.
      operationId: push-devices-unregister
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/push-devices-unregister-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - notifications
      x-devrev-owner: UNKNOWN
  /internal/push-devices.update:
    post:
      description: Updates the timestamp on a device.
      operationId: push-devices-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/push-devices-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/push-devices-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - notifications
      x-devrev-owner: UNKNOWN
  /internal/question-answers.create:
    post:
      description: Creates a question-answer.
      operationId: create-question-answer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question-answers-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question-answers-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
      x-devrev-owner: dd@devrev.ai
  /internal/question-answers.delete:
    post:
      description: Deletes a question-answer.
      operationId: delete-question-answer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question-answers-delete-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
      x-devrev-owner: dd@devrev.ai
  /internal/question-answers.get:
    get:
      description: |-
        ### Owner: dd@devrev.ai
        ### Gets a question-answer.
      operationId: get-question-answer
      parameters:
      - description: The ID of the required question-answer.
        explode: false
        in: query
        name: question_answer_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question-answers-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
      x-devrev-owner: dd@devrev.ai
    post:
      description: Gets a question-answer.
      operationId: get-question-answer-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question-answers-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question-answers-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
      x-devrev-owner: dd@devrev.ai
  /internal/question-answers.list:
    get:
      description: |
        ### Owner: dd@devrev.ai
        ### Lists a collection of question-answers.
      operationId: list-question-answers
      parameters:
      - description: |
          Filters for question-answer belonging to any of the provided
          articles.
        explode: false
        in: query
        name: applies_to_articles
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for question-answer belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for question-answers created after the timestamp provided.
        explode: false
        in: query
        name: created_after_date
        schema:
          format: date-time
          type: string
      - description: |
          Filters for question-answers created before the timestamp provided.
        explode: false
        in: query
        name: created_before_date
        schema:
          format: date-time
          type: string
      - description: |
          Filters for question-answers created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of question-answers to return. The default is
          '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Filters for question-answers owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for question-answer with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question-answers-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
      x-devrev-owner: dd@devrev.ai
    post:
      description: Lists a collection of question-answers.
      operationId: list-question-answers-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question-answers-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question-answers-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
      x-devrev-owner: dd@devrev.ai
  /internal/question-answers.update:
    post:
      description: Updates a question-answer.
      operationId: update-question-answer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/question-answers-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/question-answers-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - question-answers
      x-devrev-owner: dd@devrev.ai
  /internal/reactions.list:
    get:
      description: List the reactors for an object.
      operationId: reactions-list
      parameters:
      - description: The name of the emoji to list reactions for.
        explode: false
        in: query
        name: emoji
        required: true
        schema:
          type: string
      - description: The ID of the object to list reactions to.
        explode: false
        in: query
        name: object
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      - description: |
          The cursor to resume iteration from, otherwise if not provided, then
          iteration starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The maximum number of reactors to return.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      - works
      x-devrev-owner: UNKNOWN
    post:
      description: List the reactors for an object.
      operationId: reactions-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reactions-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      - works
      x-devrev-owner: UNKNOWN
  /internal/reactions.update:
    post:
      description: Updates a reaction to an object.
      operationId: reactions-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reactions-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reactions-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      - works
      x-devrev-owner: UNKNOWN
  /internal/recommendations.autosuggest:
    post:
      description: Lists suggestions for given input fields.
      operationId: auto-suggest
      parameters:
      - in: header
        name: x-devrev-client-frame
        schema:
          format: byte
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/auto-suggest-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/auto-suggest-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - recommendations
      x-devrev-owner: UNKNOWN
  /internal/recommendations.chat.complete:
    post:
      description: Returns a completion for the chat messages.
      operationId: chat-complete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/chat-complete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/chat-complete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - recommendations
      x-devrev-owner: UNKNOWN
  /internal/recommendations.generate-reply:
    post:
      description: Generates a reply for the conversation.
      operationId: generate-reply
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/generate-reply-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/generate-reply-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - recommendations
      x-devrev-owner: UNKNOWN
  /internal/recommendations.link.target:
    post:
      description: Lists link target recommendations.
      operationId: link-target
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/link-target-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/link-target-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - recommendations
      x-devrev-owner: UNKNOWN
  /internal/recommendations.parts.suggest:
    post:
      description: Suggest parts that can be attributed to a given object.
      operationId: parts-suggest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/parts-suggest-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/parts-suggest-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - recommendations
      x-devrev-owner: UNKNOWN
  /internal/recommendations.personalized.list:
    post:
      description: Lists personalized work items for a user.
      operationId: personalized-list
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/personalized-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/personalized-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - recommendations
      x-devrev-owner: UNKNOWN
  /internal/recommendations.typeahead:
    post:
      description: Typeahead recommendation.
      operationId: type-ahead
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/type-ahead-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/type-ahead-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - recommendations
      x-devrev-owner: UNKNOWN
  /internal/recommendations.works.deflect:
    post:
      description: Lists similar work items.
      operationId: work-deflect
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/work-deflect-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/work-deflect-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - recommendations
      x-devrev-owner: UNKNOWN
  /internal/rev-orgs.commerce-details.get:
    get:
      description: Gets a Rev org's commerce details.
      operationId: rev-orgs-commerce-details-get
      parameters:
      - description: The rev org's DON.
        explode: false
        in: query
        name: id
        schema:
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-commerce-details-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a Rev org's commerce details.
      operationId: rev-orgs-commerce-details-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-commerce-details-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-commerce-details-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/rev-orgs.commerce-details.update:
    post:
      description: Updates a Rev org's commerce details.
      operationId: rev-orgs-commerce-details-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-commerce-details-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-commerce-details-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/rev-orgs.count:
    get:
      description: |
        ### Owner: akanksha.deswal@devrev.ai
        ### Gets the count of Rev organizations matching given filter.
      operationId: rev-orgs-count
      parameters:
      - description: Filters by account.
        explode: false
        in: query
        name: account
        schema:
          items:
            type: string
          type: array
      - description: Filters by creator.
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          Filters on custom fields. Input will be of the format
          (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
        explode: false
        in: query
        name: custom_field_filter
        schema:
          items:
            type: string
          type: array
      - description: Array of domain for Rev organizations to be filtered.
        explode: false
        in: query
        name: domain
        schema:
          items:
            type: string
          type: array
      - description: Environment values to be filtered.
        explode: false
        in: query
        name: environment
        schema:
          items:
            $ref: '#/components/schemas/org-environment'
          type: array
      - description: List of external refs to filter Rev organizations for.
        explode: false
        in: query
        name: external_ref
        schema:
          items:
            type: string
          type: array
      - description: |
          Array of external ref issuers for Rev organizations to be filtered.
        explode: false
        in: query
        name: external_ref_issuer
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters by owners.
        explode: false
        in: query
        name: owned_by
        schema:
          items:
            type: string
          type: array
      - description: Filters by owners.
        explode: false
        in: query
        name: owned_by_ids
        schema:
          deprecated: true
          items:
            type: string
          type: array
      - description: State values to be filtered.
        explode: false
        in: query
        name: state
        schema:
          items:
            $ref: '#/components/schemas/org-state'
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: |
          Filters on tags. Input will be of the format (tags=<tag id
          1>=<value>&tags=<tag id 2>)
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tags_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: Array of tier for Rev organizations to be filtered.
        explode: false
        in: query
        name: tier
        schema:
          items:
            type: string
          type: array
      - description: Types of Rev organizations to be filtered.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/rev-org-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
    post:
      description: Gets the count of Rev organizations matching given filter.
      operationId: rev-orgs-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-count-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/rev-orgs.create:
    post:
      description: |
        Creates a Rev organization in the authenticated user's Dev
        organization.
      operationId: rev-orgs-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/rev-orgs.create.bulk.csv:
    post:
      description: |
        Creates bulk Rev organizations for the authenticated user's Dev
        organization.
      operationId: rev-orgs-bulk-create
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/rev-orgs-bulk-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-bulk-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/rev-orgs.delete:
    post:
      description: Deletes the Rev organization.
      operationId: rev-orgs-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/rev-orgs.delete.validate:
    post:
      description: Checks if a Rev organization can be deleted.
      operationId: rev-orgs-delete-validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-delete-validate-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-delete-validate-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/rev-orgs.export:
    post:
      description: Exports a list of revorgs.
      operationId: rev-orgs-export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-export-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: UNKNOWN
  /internal/rev-orgs.get:
    get:
      description: |
        ### Owner: akanksha.deswal@devrev.ai
        ### Retrieves the Rev organization's information.
      operationId: rev-orgs-get
      parameters:
      - description: The ID of the required Rev organization.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
    post:
      description: Retrieves the Rev organization's information.
      operationId: rev-orgs-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/rev-orgs.group:
    get:
      description: |
        ### Owner: akanksha.deswal@devrev.ai
        ### Lists collections of Rev organizations by groups.
      operationId: rev-orgs-group
      parameters:
      - description: The field to group the rev orgs by.
        explode: false
        in: query
        name: group_by
        required: true
        schema:
          type: string
      - description: Filters by account.
        explode: false
        in: query
        name: account
        schema:
          items:
            type: string
          type: array
      - description: Filters by creator.
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Filters on custom fields. Input will be of the format
          (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
        explode: false
        in: query
        name: custom_field_filter
        schema:
          items:
            type: string
          type: array
      - description: Array of domain for Rev organizations to be filtered.
        explode: false
        in: query
        name: domain
        schema:
          items:
            type: string
          type: array
      - description: Environment values to be filtered.
        explode: false
        in: query
        name: environment
        schema:
          items:
            $ref: '#/components/schemas/org-environment'
          type: array
      - description: List of external refs to filter Rev organizations for.
        explode: false
        in: query
        name: external_ref
        schema:
          items:
            type: string
          type: array
      - description: |
          Array of external ref issuers for Rev organizations to be filtered.
        explode: false
        in: query
        name: external_ref_issuer
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of groups to return. If not set, then the default
          is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The maximum number of rev orgs to return for an individual group. If
          not set, then the default is '50'.
        explode: false
        in: query
        name: limit_per_group
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters by owners.
        explode: false
        in: query
        name: owned_by
        schema:
          items:
            type: string
          type: array
      - description: Filters by owners.
        explode: false
        in: query
        name: owned_by_ids
        schema:
          deprecated: true
          items:
            type: string
          type: array
      - description: Fields to sort the rev orgs by.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: State values to be filtered.
        explode: false
        in: query
        name: state
        schema:
          items:
            $ref: '#/components/schemas/org-state'
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: |
          Filters on tags. Input will be of the format (tags=<tag id
          1>=<value>&tags=<tag id 2>)
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tags_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: Array of tier for Rev organizations to be filtered.
        explode: false
        in: query
        name: tier
        schema:
          items:
            type: string
          type: array
      - description: Types of Rev organizations to be filtered.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/rev-org-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
    post:
      description: Lists collections of Rev organizations by groups.
      operationId: rev-orgs-group-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-group-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/rev-orgs.list:
    get:
      description: |
        ### Owner: akanksha.deswal@devrev.ai
        ### Gets the list of Rev organizations' information belonging to the
        authenticated user's Dev Organization which the user is also authorized
        to access.
      operationId: rev-orgs-list
      parameters:
      - description: Filters by account.
        explode: false
        in: query
        name: account
        schema:
          items:
            type: string
          type: array
      - description: Filters by creator.
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Filters on custom fields. Input will be of the format
          (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2).
        explode: false
        in: query
        name: custom_field_filter
        schema:
          items:
            type: string
          type: array
      - description: Array of domain for Rev organizations to be filtered.
        explode: false
        in: query
        name: domain
        schema:
          items:
            type: string
          type: array
      - description: Environment values to be filtered.
        explode: false
        in: query
        name: environment
        schema:
          items:
            $ref: '#/components/schemas/org-environment'
          type: array
      - description: List of external refs to filter Rev organizations for.
        explode: false
        in: query
        name: external_ref
        schema:
          items:
            type: string
          type: array
      - description: |
          Array of external ref issuers for Rev organizations to be filtered.
        explode: false
        in: query
        name: external_ref_issuer
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of Rev organizations to be retrieved per page.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Filters by owners.
        explode: false
        in: query
        name: owned_by
        schema:
          items:
            type: string
          type: array
      - description: Filters by owners.
        explode: false
        in: query
        name: owned_by_ids
        schema:
          deprecated: true
          items:
            type: string
          type: array
      - description: |
          Fields to sort the Rev organizations by and the direction to sort
          them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: State values to be filtered.
        explode: false
        in: query
        name: state
        schema:
          items:
            $ref: '#/components/schemas/org-state'
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: |
          Filters on tags. Input will be of the format (tags=<tag id
          1>=<value>&tags=<tag id 2>)
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tags_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: Array of tier for Rev organizations to be filtered.
        explode: false
        in: query
        name: tier
        schema:
          items:
            type: string
          type: array
      - description: Types of Rev organizations to be filtered.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/rev-org-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
    post:
      description: |
        Gets the list of Rev organizations' information belonging to the
        authenticated user's Dev Organization which the user is also authorized
        to access.
      operationId: rev-orgs-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/rev-orgs.sample-csv.get:
    get:
      description: |
        ### Owner: akanksha.deswal@devrev.ai
        ### Fetches sample csv for bulk import.
      operationId: get-rev-org-sample-csv
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-rev-org-sample-csv-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
    post:
      description: Fetches sample csv for bulk import.
      operationId: get-rev-org-sample-csv-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/get-rev-org-sample-csv-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-rev-org-sample-csv-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/rev-orgs.update:
    post:
      description: Updates the Rev organization's information.
      operationId: rev-orgs-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-orgs-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-orgs-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-orgs
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/rev-users.all.list:
    get:
      description: |
        Gets the list of Rev users' information across all Rev organizations in
        user's Dev organization.
      operationId: rev-users-list-all
      parameters:
      - description: |
          Filters for Rev users that were created by the specified user(s).
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Filters on custom fields. Input will be of the format
          (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
        explode: false
        in: query
        name: custom_field_filter
        schema:
          items:
            type: string
          type: array
      - description: List of emails of Rev users to be filtered.
        explode: false
        in: query
        name: email
        schema:
          items:
            type: string
          type: array
      - description: List of external refs to filter Rev users for.
        explode: false
        in: query
        name: external_ref
        schema:
          items:
            type: string
          type: array
      - description: List of external ref issuers for Rev users to be filtered.
        explode: false
        in: query
        name: external_ref_issuer
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of Rev users to return per page. The default is
          '50', the maximum is '100'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Array of display id's of Rev orgs to be filtered.
        explode: false
        in: query
        name: rev_oid
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: List of IDs of Rev organizations to be filtered.
        explode: false
        in: query
        name: rev_org
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          Fields to sort the Rev users by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: List of state of Rev users to be filtered.
        explode: false
        in: query
        name: state
        schema:
          items:
            $ref: '#/components/schemas/user-state'
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: |
          List of tags to be filtered. Input will be of the format (tags=<tag
          id 1>=<value>&tags=<tag id 2>).
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tags_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-list-all-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Gets the list of Rev users' information across all Rev organizations in
        user's Dev organization.
      operationId: rev-users-list-all-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-list-all-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-list-all-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.count:
    get:
      description: |
        ### Owner: akanksha.deswal@devrev.ai
        ### Gets the count of Rev users matching given filter.
      operationId: rev-users-count
      parameters:
      - description: |
          Filters for Rev users that were created by the specified user(s).
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          Filters on custom fields. Input will be of the format
          (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
        explode: false
        in: query
        name: custom_field_filter
        schema:
          items:
            type: string
          type: array
      - description: List of emails of Rev users to be filtered.
        explode: false
        in: query
        name: email
        schema:
          items:
            type: string
          type: array
      - description: List of external refs to filter Rev users for.
        explode: false
        in: query
        name: external_ref
        schema:
          items:
            type: string
          type: array
      - description: List of external ref issuers for Rev users to be filtered.
        explode: false
        in: query
        name: external_ref_issuer
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: List of IDs of Rev organizations to be filtered.
        explode: false
        in: query
        name: rev_org
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: List of state of Rev users to be filtered.
        explode: false
        in: query
        name: state
        schema:
          items:
            $ref: '#/components/schemas/user-state'
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: |
          List of tags to be filtered. Input will be of the format (tags=<tag
          id 1>=<value>&tags=<tag id 2>).
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tags_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: akanksha.deswal@devrev.ai
    post:
      description: Gets the count of Rev users matching given filter.
      operationId: rev-users-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-count-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/rev-users.create:
    post:
      description: |
        Creates a Rev user for a Rev organization. Rev user can be a customer
        or a lead of an organization.
      operationId: rev-users-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.create.bulk.csv:
    post:
      description: Creates bulk Rev users.
      operationId: rev-users-bulk-create
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/rev-users-bulk-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-bulk-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.delete:
    post:
      description: Deletes a Rev user.
      operationId: rev-users-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.export:
    post:
      description: Exports a list of rev-users.
      operationId: rev-users-export
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-export-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.get:
    get:
      description: Returns the Rev user of a Rev organization by its ID.
      operationId: rev-users-get
      parameters:
      - description: The ID of Rev user to be retrieved.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
    post:
      description: Returns the Rev user of a Rev organization by its ID.
      operationId: rev-users-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.group:
    get:
      description: Lists collections of Rev users by groups.
      operationId: rev-users-group
      parameters:
      - description: The field to group the rev users by.
        explode: false
        in: query
        name: group_by
        required: true
        schema:
          type: string
      - description: |
          Filters for Rev users that were created by the specified user(s).
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Filters on custom fields. Input will be of the format
          (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
        explode: false
        in: query
        name: custom_field_filter
        schema:
          items:
            type: string
          type: array
      - description: List of emails of Rev users to be filtered.
        explode: false
        in: query
        name: email
        schema:
          items:
            type: string
          type: array
      - description: List of external refs to filter Rev users for.
        explode: false
        in: query
        name: external_ref
        schema:
          items:
            type: string
          type: array
      - description: List of external ref issuers for Rev users to be filtered.
        explode: false
        in: query
        name: external_ref_issuer
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of groups to return. If not set, then the default
          is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The maximum number of rev users to return for an individual group. If
          not set, then the default is '50'.
        explode: false
        in: query
        name: limit_per_group
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: Array of display id's of Rev organizations to be filtered.
        explode: false
        in: query
        name: rev_oid
        schema:
          items:
            type: string
          type: array
      - description: List of IDs of Rev organizations to be filtered.
        explode: false
        in: query
        name: rev_org
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: Fields to sort the Rev users by.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: List of state of Rev users to be filtered.
        explode: false
        in: query
        name: state
        schema:
          items:
            $ref: '#/components/schemas/user-state'
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: |
          List of tags to be filtered. Input will be of the format (tags=<tag
          id 1>=<value>&tags=<tag id 2>).
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tags_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
    post:
      description: Lists collections of Rev users by groups.
      operationId: rev-users-group-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-group-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.identify:
    post:
      description: Returns a Rev session token for leads.
      operationId: rev-users-identify
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-identify-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-identify-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.link:
    post:
      description: Links a rev user to a rev org.
      operationId: link-rev-user-to-rev-org
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/link-rev-user-to-rev-org-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/link-rev-user-to-rev-org-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.list:
    get:
      description: |
        Returns a list of all Rev Users belonging to the authenticated user's
        Dev Organization.
      operationId: rev-users-list
      parameters:
      - description: |
          Filters for Rev users that were created by the specified user(s).
        explode: false
        in: query
        name: created_by
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Filters on custom fields. Input will be of the format
          (custom_field_filter=field_name1:val1,val2,val3&custom_field_filter=field_name2:val1,val2)
        explode: false
        in: query
        name: custom_field_filter
        schema:
          items:
            type: string
          type: array
      - description: List of emails of Rev users to be filtered.
        explode: false
        in: query
        name: email
        schema:
          items:
            type: string
          type: array
      - description: List of external refs to filter Rev users for.
        explode: false
        in: query
        name: external_ref
        schema:
          items:
            type: string
          type: array
      - description: List of external ref issuers for Rev users to be filtered.
        explode: false
        in: query
        name: external_ref_issuer
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of Rev users to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: The ID of Rev organization to list all Rev users of.
        explode: false
        in: query
        name: org_id
        schema:
          deprecated: true
          example: don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          type: string
      - description: List of IDs of Rev organizations to be filtered.
        explode: false
        in: query
        name: rev_org
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          Fields to sort the Rev users by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: List of state of Rev users to be filtered.
        explode: false
        in: query
        name: state
        schema:
          items:
            $ref: '#/components/schemas/user-state'
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      - description: |
          List of tags to be filtered. Input will be of the format (tags=<tag
          id 1>=<value>&tags=<tag id 2>).
        explode: false
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on tags.
        explode: false
        in: query
        name: tags_op
        schema:
          $ref: '#/components/schemas/rev-object-tags-operator-type'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Returns a list of all Rev Users belonging to the authenticated user's
        Dev Organization.
      operationId: rev-users-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.merge:
    post:
      description: |
        Merges the identity of a secondary Rev user with the primary Rev
        user.The account of the secondary Rev user will be deleted.All objects
        - issues, tickets, conversations etc. referencing the secondary Rev
        user will be transferred to the primary Rev user.
      operationId: rev-users-merge
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-merge-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-merge-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.sample-csv.get:
    get:
      description: |
        ### Owner: akanksha.deswal@devrev.ai
        ### Fetches sample csv for bulk import.
      operationId: get-rev-user-sample-csv
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-rev-user-sample-csv-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: akanksha.deswal@devrev.ai
    post:
      description: Fetches sample csv for bulk import.
      operationId: get-rev-user-sample-csv-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/get-rev-user-sample-csv-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/get-rev-user-sample-csv-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/rev-users.self.get:
    get:
      description: Gets the authenticated Rev user's information.
      operationId: rev-users-self-get
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-self-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the authenticated Rev user's information.
      operationId: rev-users-self-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-self-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-self-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.self.update:
    post:
      description: Updates the authenticated Rev user.
      operationId: rev-users-self-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-self-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-self-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.unlink:
    post:
      description: Unlinks a rev user from a rev org.
      operationId: unlink-rev-user-from-rev-org
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/unlink-rev-user-from-rev-org-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/unlink-rev-user-from-rev-org-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/rev-users.update:
    post:
      description: Updates a Rev user.
      operationId: rev-users-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rev-users-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rev-users-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rev-users
      x-devrev-owner: UNKNOWN
  /internal/reward.transactions.list:
    get:
      description: Gets the reward transactions based on the given filters.
      operationId: reward-transactions-list
      parameters:
      - description: |
          The transaction date from which to aggregate reward transaction
          objects.
        explode: false
        in: query
        name: from_transaction_date
        schema:
          format: date-time
          type: string
      - description: |
          List of fields to sort the reward transaction object, by and how to
          sort them. Default is to sort by created_date in descending order.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: |
          The transaction date till which to aggregate reward transaction
          objects.
        explode: false
        in: query
        name: to_transaction_date
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reward-transactions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the reward transactions based on the given filters.
      operationId: reward-transactions-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/reward-transactions-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/reward-transactions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/rewards.create:
    post:
      description: Creates a reward.
      operationId: rewards-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rewards-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rewards-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/rewards.get:
    get:
      description: Gets a reward.
      operationId: rewards-get
      parameters:
      - description: The reward object's DON.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rewards-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a reward.
      operationId: rewards-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rewards-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rewards-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/rewards.list:
    get:
      description: Gets the rewards based on the given filters.
      operationId: rewards-list
      parameters:
      - description: The expiry date from which to aggregate reward objects.
        explode: false
        in: query
        name: from_expiry_date
        schema:
          format: date-time
          type: string
      - description: |
          List of fields to sort the reward object, by and how to sort them.
          Default is to sort by created_date in descending order.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: The expiry date till which to aggregate reward objects.
        explode: false
        in: query
        name: to_expiry_date
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rewards-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the rewards based on the given filters.
      operationId: rewards-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rewards-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rewards-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/rewards.transfer:
    post:
      description: |
        Transfers rewards from a rev user to its own rev org or to a rev user
        of the same rev org.
      operationId: rewards-transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rewards-transfer-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rewards-transfer-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/rewards.transfer-to-credits:
    post:
      description: Converts rewards to credits for a rev org.
      operationId: rewards-transfer-to-credits
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rewards-transfer-to-credits-request'
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rewards-transfer-to-credits-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/roles.apply:
    post:
      description: Assigns or revokes roles of a principal.
      operationId: roles-apply
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roles-apply-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles-apply-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - roles
      x-devrev-owner: UNKNOWN
  /internal/roles.create:
    post:
      description: Creates a new role.
      operationId: roles-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roles-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - roles
      x-devrev-owner: UNKNOWN
  /internal/roles.delete:
    post:
      description: Deletes a role.
      operationId: roles-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roles-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - roles
      x-devrev-owner: UNKNOWN
  /internal/roles.get:
    get:
      description: Gets the requested role's information.
      operationId: roles-get
      parameters:
      - description: ID for the role.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - roles
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the requested role's information.
      operationId: roles-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roles-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - roles
      x-devrev-owner: UNKNOWN
  /internal/roles.list:
    get:
      description: Lists the available roles.
      operationId: roles-list
      parameters:
      - description: Whether to fetch default or custom roles.
        explode: false
        in: query
        name: is_default
        schema:
          type: boolean
      - description: Filters roles by principal.
        explode: false
        in: query
        name: principal
        schema:
          type: string
      - description: Filter roles by target object type(s).
        explode: false
        in: query
        name: target
        schema:
          items:
            $ref: '#/components/schemas/role-target'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - roles
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the available roles.
      operationId: roles-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roles-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - roles
      x-devrev-owner: UNKNOWN
  /internal/roles.update:
    post:
      description: Updates an existing role.
      operationId: roles-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/roles-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/roles-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - roles
      x-devrev-owner: UNKNOWN
  /internal/rooms.create:
    post:
      description: Creates a room and returns the room details.
      operationId: rooms-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rooms-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rooms-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rooms
      x-devrev-owner: UNKNOWN
  /internal/rooms.inform:
    post:
      description: Informs a room of a user update.
      operationId: rooms-inform
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rooms-inform-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rooms-inform-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rooms
      x-devrev-owner: UNKNOWN
  /internal/rules.create:
    post:
      description: Creates a rule for the specified inputs.
      operationId: rules-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rules-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rules-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rules
      x-devrev-owner: UNKNOWN
  /internal/rules.delete:
    post:
      description: Delete the specified rule.
      operationId: rules-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rules-delete-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rules
      x-devrev-owner: UNKNOWN
  /internal/rules.get:
    get:
      description: Gets the specified rule.
      operationId: rules-get
      parameters:
      - description: The ID of the requested rule.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rules-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rules
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the specified rule.
      operationId: rules-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rules-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rules-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rules
      x-devrev-owner: UNKNOWN
  /internal/rules.list:
    get:
      description: Lists rules matching the request.
      operationId: rules-list
      parameters:
      - description: State of the rule.
        explode: false
        in: query
        name: state
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rules-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rules
      x-devrev-owner: UNKNOWN
    post:
      description: Lists rules matching the request.
      operationId: rules-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rules-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rules-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rules
      x-devrev-owner: UNKNOWN
  /internal/rules.update:
    post:
      description: Updates the specified rule.
      operationId: rules-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rules-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rules-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - rules
      x-devrev-owner: UNKNOWN
  /internal/schemas.aggregated.get:
    get:
      description: Gets the aggregated schema.
      operationId: aggregated-schema-get
      parameters:
      - description: |
          The list of custom schema fragment DONs which are to be aggregated.
        explode: false
        in: query
        name: custom_schema_fragment_ids
        required: true
        schema:
          items:
            type: string
          type: array
      - description: The stock schema fragment which is to be aggregated.
        explode: false
        in: query
        name: stock_schema_fragment_id
        required: true
        schema:
          type: string
      - description: The default value for this field.
        explode: false
        in: query
        name: per_object_schema.default_value
        schema:
          type: object
      - description: Description of the field.
        explode: false
        in: query
        name: per_object_schema.description
        schema:
          type: string
      - description: Composite type.
        explode: false
        in: query
        name: per_object_schema.devrev_composite_type
        schema:
          type: string
      - description: Allowed values for a string or []string type.
        explode: false
        in: query
        name: per_object_schema.devrev_enum
        schema:
          items:
            type: string
          type: array
      - description: DevRev field type.
        explode: false
        in: query
        name: per_object_schema.devrev_field_type
        schema:
          type: string
      - description: Object ID types.
        explode: false
        in: query
        name: per_object_schema.devrev_id_type
        schema:
          items:
            type: string
          type: array
      - description: Gateway api name of the field.
        explode: false
        in: query
        name: per_object_schema.gateway.api_name
        schema:
          type: string
      - description: Whether this field is filterable, groupable and sortable.
        explode: false
        in: query
        name: per_object_schema.is_filterable
        schema:
          type: boolean
      - description: Whether this field can hold PII.
        explode: false
        in: query
        name: per_object_schema.is_pii
        schema:
          type: boolean
      - description: Whether this field is required or not.
        explode: false
        in: query
        name: per_object_schema.is_required
        schema:
          type: boolean
      - description: Whether this field is a system field or not.
        explode: false
        in: query
        name: per_object_schema.is_system
        schema:
          type: boolean
      - description: Name of the field.
        explode: false
        in: query
        name: per_object_schema.name
        schema:
          type: string
      - description: Field origin type.
        explode: false
        in: query
        name: per_object_schema.origin
        schema:
          type: string
      - description: Allowed values of the field.
        explode: false
        in: query
        name: per_object_schema.ui.allowed_values
        schema:
          items:
            type: string
          type: array
      - description: Whether field is hidden in UI.
        explode: false
        in: query
        name: per_object_schema.ui.create_view.is_hidden
        schema:
          type: boolean
      - description: Fields on which this field depends on.
        explode: false
        in: query
        name: per_object_schema.ui.dependent_fields
        schema:
          items:
            type: string
          type: array
      - description: Whether field is hidden in UI.
        explode: false
        in: query
        name: per_object_schema.ui.detail_view.is_hidden
        schema:
          type: boolean
      - description: enum group key.
        explode: false
        in: query
        name: per_object_schema.ui.devrev_enum_groups.group_key
        schema:
          type: string
      - description: true if header is visible.
        explode: false
        in: query
        name: per_object_schema.ui.devrev_enum_groups.is_header_visible
        schema:
          type: boolean
      - description: label of the field.
        explode: false
        in: query
        name: per_object_schema.ui.devrev_enum_groups.label
        schema:
          type: string
      - description: display name of the field.
        explode: false
        in: query
        name: per_object_schema.ui.display_name
        schema:
          type: string
      - description: Whether field is hidden in UI.
        explode: false
        in: query
        name: per_object_schema.ui.filter_view.is_hidden
        schema:
          type: boolean
      - description: Whether field is active in detail view.
        explode: false
        in: query
        name: per_object_schema.ui.is_active_in_detail_view
        schema:
          type: boolean
      - description: Whether stock field is rendered at top.
        explode: false
        in: query
        name: per_object_schema.ui.is_base_field
        schema:
          type: boolean
      - description: Whether field supports bulk action.
        explode: false
        in: query
        name: per_object_schema.ui.is_bulk_action_enabled
        schema:
          type: boolean
      - description: Indicates if the field holds a currency value in USD.
        explode: false
        in: query
        name: per_object_schema.ui.is_currency_field
        schema:
          type: boolean
      - description: Whether field is groupable.
        explode: false
        in: query
        name: per_object_schema.ui.is_groupable
        schema:
          type: boolean
      - description: Whether field is hidden in UI.
        explode: false
        in: query
        name: per_object_schema.ui.is_hidden
        schema:
          type: boolean
      - description: Whether field is hidden in UI during creation.
        explode: false
        in: query
        name: per_object_schema.ui.is_hidden_during_create
        schema:
          type: boolean
      - description: Whether field is read-only in UI.
        explode: false
        in: query
        name: per_object_schema.ui.is_read_only
        schema:
          type: boolean
      - description: Whether field is shown in summary.
        explode: false
        in: query
        name: per_object_schema.ui.is_shown_in_summary
        schema:
          type: boolean
      - description: Whether field is sortable.
        explode: false
        in: query
        name: per_object_schema.ui.is_sortable
        schema:
          type: boolean
      - description: Whether field is hidden in UI.
        explode: false
        in: query
        name: per_object_schema.ui.list_view.is_hidden
        schema:
          type: boolean
      - description: Order in which field is shown.
        explode: false
        in: query
        name: per_object_schema.ui.order
        schema:
          format: int32
          type: integer
      - description: Placeholder for the field.
        explode: false
        in: query
        name: per_object_schema.ui.placeholder
        schema:
          type: string
      - description: Whether field is hidden in UI.
        explode: false
        in: query
        name: per_object_schema.ui.summary_view.is_hidden
        schema:
          type: boolean
      - description: Tooltip for field.
        explode: false
        in: query
        name: per_object_schema.ui.tooltip
        schema:
          type: string
      - description: Unit of measurment.
        explode: false
        in: query
        name: per_object_schema.ui.unit
        schema:
          type: string
      - description: string contains.
        explode: false
        in: query
        name: per_object_schema.validation.contains
        schema:
          type: string
      - description: disables validations for this field.
        explode: false
        in: query
        name: per_object_schema.validation.disabled
        schema:
          type: boolean
      - description: exact array length.
        explode: false
        in: query
        name: per_object_schema.validation.eq_items
        schema:
          format: int32
          type: integer
      - description: exact string length.
        explode: false
        in: query
        name: per_object_schema.validation.eq_len
        schema:
          format: int32
          type: integer
      - description: int must be greater than this.
        explode: false
        in: query
        name: per_object_schema.validation.gt
        schema:
          format: int32
          type: integer
      - description: int must be greater or equal than this.
        explode: false
        in: query
        name: per_object_schema.validation.gte
        schema:
          format: int32
          type: integer
      - description: int must be less than this.
        explode: false
        in: query
        name: per_object_schema.validation.lt
        schema:
          format: int32
          type: integer
      - description: int must be less or equal than this.
        explode: false
        in: query
        name: per_object_schema.validation.lte
        schema:
          format: int32
          type: integer
      - description: maximum array length.
        explode: false
        in: query
        name: per_object_schema.validation.max_items
        schema:
          format: int32
          type: integer
      - description: maximum string length.
        explode: false
        in: query
        name: per_object_schema.validation.max_len
        schema:
          format: int32
          type: integer
      - description: minimum array length.
        explode: false
        in: query
        name: per_object_schema.validation.min_items
        schema:
          format: int32
          type: integer
      - description: minimum string length.
        explode: false
        in: query
        name: per_object_schema.validation.min_len
        schema:
          format: int32
          type: integer
      - description: string pattern (re).
        explode: false
        in: query
        name: per_object_schema.validation.pattern
        schema:
          type: string
      - description: string prefix.
        explode: false
        in: query
        name: per_object_schema.validation.prefix
        schema:
          type: string
      - description: string suffix.
        explode: false
        in: query
        name: per_object_schema.validation.suffix
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aggregated-schema-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the aggregated schema.
      operationId: aggregated-schema-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/aggregated-schema-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aggregated-schema-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/schemas.aggregated.get.private:
    get:
      description: Gets the aggregated schema.
      operationId: aggregated-schema-get-private
      parameters:
      - description: |
          The list of custom schema fragment DONs which are to be aggregated.
        explode: false
        in: query
        name: custom_schema_fragment_ids
        required: true
        schema:
          items:
            type: string
          type: array
      - description: The stock schema fragment which is to be aggregated.
        explode: false
        in: query
        name: stock_schema_fragment_id
        required: true
        schema:
          type: string
      - description: The default value for this field.
        explode: false
        in: query
        name: per_object_schema.default_value
        schema:
          type: object
      - description: Description of the field.
        explode: false
        in: query
        name: per_object_schema.description
        schema:
          type: string
      - description: Composite type.
        explode: false
        in: query
        name: per_object_schema.devrev_composite_type
        schema:
          type: string
      - description: Allowed values for a string or []string type.
        explode: false
        in: query
        name: per_object_schema.devrev_enum
        schema:
          items:
            type: string
          type: array
      - description: DevRev field type.
        explode: false
        in: query
        name: per_object_schema.devrev_field_type
        schema:
          type: string
      - description: Object ID types.
        explode: false
        in: query
        name: per_object_schema.devrev_id_type
        schema:
          items:
            type: string
          type: array
      - description: Gateway api name of the field.
        explode: false
        in: query
        name: per_object_schema.gateway.api_name
        schema:
          type: string
      - description: Whether this field is filterable, groupable and sortable.
        explode: false
        in: query
        name: per_object_schema.is_filterable
        schema:
          type: boolean
      - description: Whether this field can hold PII.
        explode: false
        in: query
        name: per_object_schema.is_pii
        schema:
          type: boolean
      - description: Whether this field is required or not.
        explode: false
        in: query
        name: per_object_schema.is_required
        schema:
          type: boolean
      - description: Whether this field is a system field or not.
        explode: false
        in: query
        name: per_object_schema.is_system
        schema:
          type: boolean
      - description: Name of the field.
        explode: false
        in: query
        name: per_object_schema.name
        schema:
          type: string
      - description: Field origin type.
        explode: false
        in: query
        name: per_object_schema.origin
        schema:
          type: string
      - description: Allowed values of the field.
        explode: false
        in: query
        name: per_object_schema.ui.allowed_values
        schema:
          items:
            type: string
          type: array
      - description: Whether field is hidden in UI.
        explode: false
        in: query
        name: per_object_schema.ui.create_view.is_hidden
        schema:
          type: boolean
      - description: Fields on which this field depends on.
        explode: false
        in: query
        name: per_object_schema.ui.dependent_fields
        schema:
          items:
            type: string
          type: array
      - description: Whether field is hidden in UI.
        explode: false
        in: query
        name: per_object_schema.ui.detail_view.is_hidden
        schema:
          type: boolean
      - description: enum group key.
        explode: false
        in: query
        name: per_object_schema.ui.devrev_enum_groups.group_key
        schema:
          type: string
      - description: true if header is visible.
        explode: false
        in: query
        name: per_object_schema.ui.devrev_enum_groups.is_header_visible
        schema:
          type: boolean
      - description: label of the field.
        explode: false
        in: query
        name: per_object_schema.ui.devrev_enum_groups.label
        schema:
          type: string
      - description: display name of the field.
        explode: false
        in: query
        name: per_object_schema.ui.display_name
        schema:
          type: string
      - description: Whether field is hidden in UI.
        explode: false
        in: query
        name: per_object_schema.ui.filter_view.is_hidden
        schema:
          type: boolean
      - description: Whether field is active in detail view.
        explode: false
        in: query
        name: per_object_schema.ui.is_active_in_detail_view
        schema:
          type: boolean
      - description: Whether stock field is rendered at top.
        explode: false
        in: query
        name: per_object_schema.ui.is_base_field
        schema:
          type: boolean
      - description: Whether field supports bulk action.
        explode: false
        in: query
        name: per_object_schema.ui.is_bulk_action_enabled
        schema:
          type: boolean
      - description: Indicates if the field holds a currency value in USD.
        explode: false
        in: query
        name: per_object_schema.ui.is_currency_field
        schema:
          type: boolean
      - description: Whether field is groupable.
        explode: false
        in: query
        name: per_object_schema.ui.is_groupable
        schema:
          type: boolean
      - description: Whether field is hidden in UI.
        explode: false
        in: query
        name: per_object_schema.ui.is_hidden
        schema:
          type: boolean
      - description: Whether field is hidden in UI during creation.
        explode: false
        in: query
        name: per_object_schema.ui.is_hidden_during_create
        schema:
          type: boolean
      - description: Whether field is read-only in UI.
        explode: false
        in: query
        name: per_object_schema.ui.is_read_only
        schema:
          type: boolean
      - description: Whether field is shown in summary.
        explode: false
        in: query
        name: per_object_schema.ui.is_shown_in_summary
        schema:
          type: boolean
      - description: Whether field is sortable.
        explode: false
        in: query
        name: per_object_schema.ui.is_sortable
        schema:
          type: boolean
      - description: Whether field is hidden in UI.
        explode: false
        in: query
        name: per_object_schema.ui.list_view.is_hidden
        schema:
          type: boolean
      - description: Order in which field is shown.
        explode: false
        in: query
        name: per_object_schema.ui.order
        schema:
          format: int32
          type: integer
      - description: Placeholder for the field.
        explode: false
        in: query
        name: per_object_schema.ui.placeholder
        schema:
          type: string
      - description: Whether field is hidden in UI.
        explode: false
        in: query
        name: per_object_schema.ui.summary_view.is_hidden
        schema:
          type: boolean
      - description: Tooltip for field.
        explode: false
        in: query
        name: per_object_schema.ui.tooltip
        schema:
          type: string
      - description: Unit of measurment.
        explode: false
        in: query
        name: per_object_schema.ui.unit
        schema:
          type: string
      - description: string contains.
        explode: false
        in: query
        name: per_object_schema.validation.contains
        schema:
          type: string
      - description: disables validations for this field.
        explode: false
        in: query
        name: per_object_schema.validation.disabled
        schema:
          type: boolean
      - description: exact array length.
        explode: false
        in: query
        name: per_object_schema.validation.eq_items
        schema:
          format: int32
          type: integer
      - description: exact string length.
        explode: false
        in: query
        name: per_object_schema.validation.eq_len
        schema:
          format: int32
          type: integer
      - description: int must be greater than this.
        explode: false
        in: query
        name: per_object_schema.validation.gt
        schema:
          format: int32
          type: integer
      - description: int must be greater or equal than this.
        explode: false
        in: query
        name: per_object_schema.validation.gte
        schema:
          format: int32
          type: integer
      - description: int must be less than this.
        explode: false
        in: query
        name: per_object_schema.validation.lt
        schema:
          format: int32
          type: integer
      - description: int must be less or equal than this.
        explode: false
        in: query
        name: per_object_schema.validation.lte
        schema:
          format: int32
          type: integer
      - description: maximum array length.
        explode: false
        in: query
        name: per_object_schema.validation.max_items
        schema:
          format: int32
          type: integer
      - description: maximum string length.
        explode: false
        in: query
        name: per_object_schema.validation.max_len
        schema:
          format: int32
          type: integer
      - description: minimum array length.
        explode: false
        in: query
        name: per_object_schema.validation.min_items
        schema:
          format: int32
          type: integer
      - description: minimum string length.
        explode: false
        in: query
        name: per_object_schema.validation.min_len
        schema:
          format: int32
          type: integer
      - description: string pattern (re).
        explode: false
        in: query
        name: per_object_schema.validation.pattern
        schema:
          type: string
      - description: string prefix.
        explode: false
        in: query
        name: per_object_schema.validation.prefix
        schema:
          type: string
      - description: string suffix.
        explode: false
        in: query
        name: per_object_schema.validation.suffix
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aggregated-schema-get-response-private'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the aggregated schema.
      operationId: aggregated-schema-get-private-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/aggregated-schema-get-request-private'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/aggregated-schema-get-response-private'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/schemas.custom.get:
    get:
      description: Gets a custom schema fragment.
      operationId: custom-schema-fragments-get
      parameters:
      - description: The ID of the custom schema fragment.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a custom schema fragment.
      operationId: custom-schema-fragments-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-schema-fragments-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/schemas.custom.get.private:
    get:
      description: Gets a custom schema fragment.
      operationId: custom-schema-fragments-get-private
      parameters:
      - description: The ID of the custom schema fragment.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-get-response-private'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a custom schema fragment.
      operationId: custom-schema-fragments-get-private-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-schema-fragments-get-request-private'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-get-response-private'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/schemas.custom.list:
    get:
      description: Lists custom schema fragments.
      operationId: custom-schema-fragments-list
      parameters:
      - description: The list of app names.
        explode: false
        in: query
        name: app
        schema:
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from, otherwise if not provided, then
          iteration starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The list of leaf types.
        explode: false
        in: query
        name: leaf_type
        schema:
          items:
            type: string
          type: array
      - description: The maximum number of items.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The list of fields to sort the items by and how to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: The list of subtypes.
        explode: false
        in: query
        name: subtype
        schema:
          items:
            type: string
          type: array
      - description: Filters for custom schema fragment of the provided types.
        explode: false
        in: query
        name: types
        schema:
          items:
            $ref: '#/components/schemas/custom-schema-fragment-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Lists custom schema fragments.
      operationId: custom-schema-fragments-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-schema-fragments-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/schemas.custom.list.private:
    get:
      description: Lists custom schema fragments.
      operationId: custom-schema-fragments-list-private
      parameters:
      - description: The list of app names.
        explode: false
        in: query
        name: app
        schema:
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from, otherwise if not provided, then
          iteration starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The list of leaf types.
        explode: false
        in: query
        name: leaf_type
        schema:
          items:
            type: string
          type: array
      - description: The maximum number of items.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The list of fields to sort the items by and how to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: The list of subtypes.
        explode: false
        in: query
        name: subtype
        schema:
          items:
            type: string
          type: array
      - description: Filters for custom schema fragment of the provided types.
        explode: false
        in: query
        name: types
        schema:
          items:
            $ref: '#/components/schemas/custom-schema-fragment-private-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-list-response-private'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Lists custom schema fragments.
      operationId: custom-schema-fragments-list-private-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-schema-fragments-list-request-private'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-list-response-private'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/schemas.custom.set:
    post:
      description: Creates or updates a custom schema fragment.
      operationId: custom-schema-fragments-set
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-schema-fragments-set-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-set-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/schemas.custom.set.private:
    post:
      description: Creates or updates a custom schema fragment.
      operationId: custom-schema-fragments-set-private
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-schema-fragments-set-request-private'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-schema-fragments-set-response-private'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/schemas.stock.get:
    get:
      description: Gets a stock schema fragment.
      operationId: stock-schema-fragments-get
      parameters:
      - description: The ID of the stock schema fragment.
        explode: false
        in: query
        name: id
        schema:
          type: string
      - description: The leaf type this fragment applies to.
        explode: false
        in: query
        name: leaf_type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a stock schema fragment.
      operationId: stock-schema-fragments-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stock-schema-fragments-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/schemas.stock.get.private:
    get:
      description: Gets a stock schema fragment.
      operationId: stock-schema-fragments-get-private
      parameters:
      - description: The ID of the stock schema fragment.
        explode: false
        in: query
        name: id
        schema:
          type: string
      - description: The leaf type this fragment applies to.
        explode: false
        in: query
        name: leaf_type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-get-response-private'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a stock schema fragment.
      operationId: stock-schema-fragments-get-private-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stock-schema-fragments-get-request-private'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-get-response-private'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/schemas.stock.list:
    get:
      description: Lists stock schema fragments.
      operationId: stock-schema-fragments-list
      parameters:
      - description: |
          The cursor to resume iteration from, otherwise if not provided, then
          iteration starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The list of leaf types.
        explode: false
        in: query
        name: leaf_type
        schema:
          items:
            type: string
          type: array
      - description: The maximum number of items.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The list of fields to sort the items by and how to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Lists stock schema fragments.
      operationId: stock-schema-fragments-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stock-schema-fragments-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/schemas.stock.list.private:
    get:
      description: Lists stock schema fragments.
      operationId: stock-schema-fragments-list-private
      parameters:
      - description: |
          The cursor to resume iteration from, otherwise if not provided, then
          iteration starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The list of leaf types.
        explode: false
        in: query
        name: leaf_type
        schema:
          items:
            type: string
          type: array
      - description: The maximum number of items.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The list of fields to sort the items by and how to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-list-response-private'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Lists stock schema fragments.
      operationId: stock-schema-fragments-list-private-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stock-schema-fragments-list-request-private'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stock-schema-fragments-list-response-private'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/schemas.subtypes.list:
    get:
      description: Lists subtypes.
      operationId: subtypes-list
      parameters:
      - description: Leaf type for which subtypes are required.
        explode: false
        in: query
        name: leaf_type
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subtypes-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Lists subtypes.
      operationId: subtypes-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/subtypes-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subtypes-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/search.articles:
    get:
      description: Searches for KB articles for the provided query.
      operationId: search-articles
      parameters:
      - description: The query string.
        explode: false
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: |
          Whether to include an answer along with the search results.
        explode: false
        in: query
        name: include_answer
        schema:
          type: boolean
      - description: |
          The maximum number of search results to return. The default is '5'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search-articles-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - search
      x-devrev-owner: UNKNOWN
    post:
      description: Searches for KB articles for the provided query.
      operationId: search-articles-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/search-articles-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search-articles-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - search
      x-devrev-owner: UNKNOWN
  /internal/search.core:
    get:
      description: Searches for records based on a given query.
      operationId: search-core
      parameters:
      - description: The query string.
        explode: false
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: |
          The cursor from where to begin iteration. Start from beginning if not
          provided.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of items to return in a page. The default is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: The namespaces to search in.
        explode: false
        in: query
        name: namespaces
        schema:
          items:
            type: string
          type: array
      - description: |
          Filters for items that are associated with any of the provided Rev
          organizations.
        explode: false
        in: query
        name: rev_orgs
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          The order in which to sort the search results. The default is
          RELEVANCE.
        explode: false
        in: query
        name: sort_by
        schema:
          $ref: '#/components/schemas/search-sort-by-param'
      - description: Sorting order.
        explode: false
        in: query
        name: sort_order
        schema:
          $ref: '#/components/schemas/search-sort-order-param'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search-core-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - search
      x-devrev-owner: UNKNOWN
    post:
      description: Searches for records based on a given query.
      operationId: search-core-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/search-core-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search-core-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - search
      x-devrev-owner: UNKNOWN
  /internal/search.typeahead:
    get:
      description: Typeahead search.
      operationId: search-typeahead
      parameters:
      - description: The fields to search on.
        explode: false
        in: query
        name: fields
        required: true
        schema:
          items:
            type: string
          type: array
      - description: The namespaces to search in.
        explode: false
        in: query
        name: namespaces
        required: true
        schema:
          items:
            $ref: '#/components/schemas/search-namespace'
          type: array
      - description: The query string.
        explode: false
        in: query
        name: query
        required: true
        schema:
          type: string
      - description: |
          The cursor from where to begin iteration. Start from beginning if not
          provided.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of items to return in a page. The default is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          Filters for items that are associated with any of the provided Rev
          organizations.
        explode: false
        in: query
        name: rev_orgs
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          The order in which to sort the search results. The default is
          RELEVANCE.
        explode: false
        in: query
        name: sort_by
        schema:
          $ref: '#/components/schemas/search-sort-by-param'
      - description: Sorting order.
        explode: false
        in: query
        name: sort_order
        schema:
          $ref: '#/components/schemas/search-sort-order-param'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search-typeahead-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - search
      x-devrev-owner: UNKNOWN
    post:
      description: Typeahead search.
      operationId: search-typeahead-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/search-typeahead-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/search-typeahead-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - search
      x-devrev-owner: UNKNOWN
  /internal/service-accounts.create:
    post:
      description: Creates a service account.
      operationId: service-accounts-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-accounts-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
      x-devrev-owner: prabath.siriwardena@devrev.ai
  /internal/service-accounts.delete:
    post:
      description: Deletes a service account.
      operationId: service-accounts-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-accounts-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
      x-devrev-owner: prabath.siriwardena@devrev.ai
  /internal/service-accounts.get:
    get:
      description: |
        ### Owner: prabath.siriwardena@devrev.ai
        ### Gets a service account.
      operationId: service-accounts-get
      parameters:
      - description: The ID of the requested service account.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
      x-devrev-owner: prabath.siriwardena@devrev.ai
    post:
      description: Gets a service account.
      operationId: service-accounts-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-accounts-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
      x-devrev-owner: prabath.siriwardena@devrev.ai
  /internal/service-accounts.keyrings.create:
    post:
      description: Creates a keyring under the corresponding service account.
      operationId: service-accounts-keyrings-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-accounts-keyrings-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-keyrings-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
      x-devrev-owner: prabath.siriwardena@devrev.ai
  /internal/service-accounts.keyrings.delete:
    post:
      description: Deletes a keyring under the corresponding service account.
      operationId: service-accounts-keyrings-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-accounts-keyrings-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-keyrings-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
      x-devrev-owner: prabath.siriwardena@devrev.ai
  /internal/service-accounts.keyrings.get:
    get:
      description: |
        ### Owner: prabath.siriwardena@devrev.ai
        ### Gets a keyring under the corresponding service account.
      operationId: service-accounts-keyrings-get
      parameters:
      - description: The ID of the keyring.
        explode: false
        in: query
        name: key_id
        required: true
        schema:
          type: string
      - description: The ID corresponding to the requested keyring.
        explode: false
        in: query
        name: service_account_id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-keyrings-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
      x-devrev-owner: prabath.siriwardena@devrev.ai
    post:
      description: Gets a keyring under the corresponding service account.
      operationId: service-accounts-keyrings-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-accounts-keyrings-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-keyrings-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
      x-devrev-owner: prabath.siriwardena@devrev.ai
  /internal/service-accounts.keyrings.update:
    post:
      description: Updates a keyring under the corresponding service account.
      operationId: service-accounts-keyrings-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-accounts-keyrings-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-keyrings-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
      x-devrev-owner: prabath.siriwardena@devrev.ai
  /internal/service-accounts.list:
    get:
      description: |
        ### Owner: prabath.siriwardena@devrev.ai
        ### Lists the service accounts.
      operationId: service-accounts-list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
      x-devrev-owner: prabath.siriwardena@devrev.ai
    post:
      description: Lists the service accounts.
      operationId: service-accounts-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-accounts-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
      x-devrev-owner: prabath.siriwardena@devrev.ai
  /internal/service-accounts.update:
    post:
      description: Updates a service account.
      operationId: service-accounts-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-accounts-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-accounts-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - service-accounts
      x-devrev-owner: prabath.siriwardena@devrev.ai
  /internal/service-plans.cancel:
    post:
      description: Cancels a service plan.
      operationId: service-plans-cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-plans-cancel-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/service-plans.create:
    post:
      description: Creates a service plan object.
      operationId: service-plans-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-plans-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-plans-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/service-plans.get:
    get:
      description: Gets a service plan object.
      operationId: service-plans-get
      parameters:
      - description: The service plan's DON.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-plans-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a service plan object.
      operationId: service-plans-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-plans-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-plans-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/service-plans.get-compatible-skus:
    get:
      description: |
        Gets compatible skus that can be purchased with the current
        configuration of the service plan.
      operationId: service-plans-get-compatible-skus
      parameters:
      - description: The service plan's DON.
        explode: false
        in: query
        name: id
        schema:
          type: string
      - description: The product ID for which to get the compatible SKUs.
        explode: false
        in: query
        name: product_id
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-plans-get-compatible-skus-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Gets compatible skus that can be purchased with the current
        configuration of the service plan.
      operationId: service-plans-get-compatible-skus-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-plans-get-compatible-skus-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-plans-get-compatible-skus-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/service-plans.list:
    get:
      description: Gets the service plan objects based on the given filters.
      operationId: service-plans-list
      parameters:
      - description: The list of service plan DONs which are to be aggregated.
        explode: false
        in: query
        name: ids
        schema:
          items:
            type: string
          type: array
      - description: The list of rev org DONs which are to be aggregated.
        explode: false
        in: query
        name: rev_org_ids
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          List of fields to sort the service plan object, by and how to sort
          them. Default is to sort by created_date in descending order.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: The list of states which are to be aggregated.
        explode: false
        in: query
        name: states
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-plans-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the service plan objects based on the given filters.
      operationId: service-plans-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-plans-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-plans-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/service-plans.pending-update.cancel:
    post:
      description: Deletes pending update for a service plan object.
      operationId: service-plans-pending-update-cancel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-plans-pending-update-cancel-request'
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-plans-pending-update-cancel-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/service-plans.update:
    post:
      description: Updates a service plan object.
      operationId: service-plans-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/service-plans-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/service-plans-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/skurules.create:
    post:
      description: Creates a sku rule.
      operationId: sku-rules-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sku-rules-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sku-rules-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/skurules.delete:
    post:
      description: Deletes a sku rule.
      operationId: sku-rules-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sku-rules-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/skurules.get:
    get:
      description: Gets a sku rule.
      operationId: sku-rules-get
      parameters:
      - description: The sku rule's DON
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sku-rules-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a sku rule.
      operationId: sku-rules-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sku-rules-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sku-rules-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/skurules.list:
    get:
      description: Gets the sku rules based on the given filters.
      operationId: sku-rules-list
      parameters:
      - description: The list of allowed sku names which are to be aggregated.
        explode: false
        in: query
        name: allowed_sku_names
        schema:
          items:
            type: string
          type: array
      - description: The list of sku rule DONs which are to be aggregated.
        explode: false
        in: query
        name: ids
        schema:
          items:
            type: string
          type: array
      - description: The list of product DONs which are to be aggregated.
        explode: false
        in: query
        name: product_ids
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          List of fields to sort the sku rules, by and how to sort them.
          Default is to sort by created_date in descending order.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sku-rules-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the sku rules based on the given filters.
      operationId: sku-rules-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sku-rules-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sku-rules-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/skurules.update:
    post:
      description: Updates a sku rule.
      operationId: sku-rules-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sku-rules-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sku-rules-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/skus.create:
    post:
      description: Creates a SKU.
      operationId: skus-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/skus-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/skus-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/skus.delete:
    post:
      description: Deletes a SKU.
      operationId: skus-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/skus-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/skus.get:
    get:
      description: Gets a SKU.
      operationId: skus-get
      parameters:
      - description: The SKU object's DON.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/skus-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a SKU.
      operationId: skus-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/skus-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/skus-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/skus.list:
    get:
      description: Gets the SKUs based on the given filters.
      operationId: skus-list
      parameters:
      - description: The list of SKU DONs which are to be aggregated.
        explode: false
        in: query
        name: ids
        schema:
          items:
            type: string
          type: array
      - description: The list of SKU names which are to be aggregated.
        explode: false
        in: query
        name: names
        schema:
          items:
            type: string
          type: array
      - description: The list of product DONs which are to be aggregated.
        explode: false
        in: query
        name: product_ids
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: The list of rev org DONs which are to be aggregated.
        explode: false
        in: query
        name: rev_org_ids
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: The list of SKU types which are to be aggregated.
        explode: false
        in: query
        name: sku_types
        schema:
          items:
            $ref: '#/components/schemas/sku-type'
          type: array
      - description: The list of SKU versions which are to be aggregated.
        explode: false
        in: query
        name: sku_versions
        schema:
          items:
            format: int32
            type: integer
          type: array
      - description: |
          List of fields to sort the SKU object, by and how to sort them.
          Default is to sort by created_date in descending order.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: The list of SKU states which are to be aggregated.
        explode: false
        in: query
        name: states
        schema:
          items:
            $ref: '#/components/schemas/sku-state'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/skus-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the SKUs based on the given filters.
      operationId: skus-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/skus-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/skus-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/skus.update:
    post:
      description: Updates a SKU.
      operationId: skus-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/skus-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/skus-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/skus.version:
    post:
      description: Versions a SKU.
      operationId: skus-version
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/skus-version-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/skus-version-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/slas.assign:
    post:
      description: ' Assigns the SLA to a set of Rev organizations.'
      operationId: slas-assign
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-assign-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-assign-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/slas.create:
    post:
      description: Creates an SLA in draft status.
      operationId: slas-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/slas.get:
    get:
      description: |-
        ### Owner: lorinc.body@devrev.ai
        ### Gets an SLA.
      operationId: slas-get
      parameters:
      - description: The ID of the SLA to get.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
      x-devrev-owner: lorinc.body@devrev.ai
    post:
      description: Gets an SLA.
      operationId: slas-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/slas.list:
    get:
      description: |
        ### Owner: lorinc.body@devrev.ai
        ### Lists SLAs matching a filter.
      operationId: slas-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The maximum number of SLAs to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Fields to sort the SLAs by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: The SLA statuses the filter matches.
        explode: false
        in: query
        name: status
        schema:
          items:
            $ref: '#/components/schemas/sla-status'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
      x-devrev-owner: lorinc.body@devrev.ai
    post:
      description: Lists SLAs matching a filter.
      operationId: slas-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/slas.transition:
    post:
      description: Changes the status of an SLA.
      operationId: slas-transition
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-transition-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-transition-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/slas.update:
    post:
      description: Updates a draft SLA.
      operationId: slas-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/slas-update-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/slas-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - slas
      x-devrev-owner: lorinc.body@devrev.ai
  /internal/snap-components.list:
    post:
      description: List snap components.
      operationId: list-snap-components
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/list-snap-components-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list-snap-components-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-components
      x-devrev-owner: srividya.tata@devrev.ai
  /internal/snap-in-packages.create:
    post:
      description: Creates a snap-in package.
      operationId: snap-in-packages-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-in-packages-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-in-packages-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-packages
      x-devrev-owner: peter.marinsek@devrev.ai
  /internal/snap-in-packages.delete:
    post:
      description: Deletes a snap-in package.
      operationId: snap-in-packages-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-in-packages-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-packages
      x-devrev-owner: peter.marinsek@devrev.ai
  /internal/snap-in-packages.get:
    get:
      description: |
        ### Owner: peter.marinsek@devrev.ai
        ### Gets a snap-in package.
      operationId: snap-in-packages-get
      parameters:
      - description: The ID of the snap-in package to get.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-in-packages-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-packages
      x-devrev-owner: peter.marinsek@devrev.ai
    post:
      description: Gets a snap-in package.
      operationId: snap-in-packages-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-in-packages-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-in-packages-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-packages
      x-devrev-owner: peter.marinsek@devrev.ai
  /internal/snap-in-packages.list:
    get:
      description: |
        ### Owner: peter.marinsek@devrev.ai
        ### Lists snap-in packages for a Dev organization.
      operationId: snap-in-packages-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of snap-in packages to return. The default is
          '50', the maximum is '100'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Fields to sort the snap-in packages by and the direction to sort
          them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-in-packages-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-packages
      x-devrev-owner: peter.marinsek@devrev.ai
    post:
      description: Lists snap-in packages for a Dev organization.
      operationId: snap-in-packages-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-in-packages-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-in-packages-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-packages
      x-devrev-owner: peter.marinsek@devrev.ai
  /internal/snap-in-packages.logs.fetch:
    get:
      description: |
        ### Owner: umang.malik@devrev.ai
        ### Fetches the logs for the snap-in-package based on the filters
        specified.
      operationId: snap-in-packages-logs-fetch
      parameters:
      - description: Cursor for set of logs.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          Exclude the specified values instead of (default behaviour) including
          them.
        explode: false
        in: query
        name: filters.dev_org.exclude
        schema:
          type: boolean
      - description: |
          The values to filter on. If empty, filter is ignored. "" is a valid
          value meaning field is not set. Required if any filters.dev_org.*
          fields are provided.
        explode: false
        in: query
        name: filters.dev_org.values
        schema:
          items:
            type: string
          type: array
      - description: |
          Exclude the specified values instead of (default behaviour) including
          them.
        explode: false
        in: query
        name: filters.event_id.exclude
        schema:
          type: boolean
      - description: |
          The values to filter on. If empty, filter is ignored. "" is a valid
          value meaning field is not set. Required if any filters.event_id.*
          fields are provided.
        explode: false
        in: query
        name: filters.event_id.values
        schema:
          items:
            type: string
          type: array
      - description: |
          Exclude the specified values instead of (default behaviour) including
          them.
        explode: false
        in: query
        name: filters.event_type.exclude
        schema:
          type: boolean
      - description: |
          The values to filter on. If empty, filter is ignored. "" is a valid
          value meaning field is not set. Required if any filters.event_type.*
          fields are provided.
        explode: false
        in: query
        name: filters.event_type.values
        schema:
          items:
            type: string
          type: array
      - description: |
          Exclude the specified values instead of (default behaviour) including
          them.
        explode: false
        in: query
        name: filters.level.exclude
        schema:
          type: boolean
      - description: |
          List of values to include/exclude. Required if any filters.level.*
          fields are provided.
        explode: false
        in: query
        name: filters.level.values
        schema:
          items:
            $ref: '#/components/schemas/snap-in-packages-log-level-filter-log-level-enum'
          type: array
      - description: |
          Exclude the specified values instead of (default behaviour) including
          them.
        explode: false
        in: query
        name: filters.process.exclude
        schema:
          type: boolean
      - description: |
          List of values to include/exclude. Required if any filters.process.*
          fields are provided.
        explode: false
        in: query
        name: filters.process.values
        schema:
          items:
            $ref: '#/components/schemas/snap-in-packages-log-process-filter-log-process-enum'
          type: array
      - description: |
          Exclude the specified values instead of (default behaviour) including
          them.
        explode: false
        in: query
        name: filters.snap_in_package.exclude
        schema:
          type: boolean
      - description: |
          The values to filter on. If empty, filter is ignored. "" is a valid
          value meaning field is not set. Required if any
          filters.snap_in_package.* fields are provided.
        explode: false
        in: query
        name: filters.snap_in_package.values
        schema:
          items:
            type: string
          type: array
      - description: |
          Exclude the specified values instead of (default behaviour) including
          them.
        explode: false
        in: query
        name: filters.snap_in_version.exclude
        schema:
          type: boolean
      - description: |
          The values to filter on. If empty, filter is ignored. "" is a valid
          value meaning field is not set. Required if any
          filters.snap_in_version.* fields are provided.
        explode: false
        in: query
        name: filters.snap_in_version.values
        schema:
          items:
            type: string
          type: array
      - description: |
          Exclude the specified values instead of (default behaviour) including
          them.
        explode: false
        in: query
        name: filters.source_name.exclude
        schema:
          type: boolean
      - description: |
          The values to filter on. If empty, filter is ignored. "" is a valid
          value meaning field is not set. Required if any filters.source_name.*
          fields are provided.
        explode: false
        in: query
        name: filters.source_name.values
        schema:
          items:
            type: string
          type: array
      - description: |
          Exclude the specified values instead of (default behaviour) including
          them.
        explode: false
        in: query
        name: filters.source_type.exclude
        schema:
          type: boolean
      - description: |
          List of values to include/exclude. Required if any
          filters.source_type.* fields are provided.
        explode: false
        in: query
        name: filters.source_type.values
        schema:
          items:
            $ref: '#/components/schemas/snap-in-packages-log-source-type-filter-log-source-type-enum'
          type: array
      - description: |
          Exclude the specified values instead of (default behaviour) including
          them.
        explode: false
        in: query
        name: filters.target.exclude
        schema:
          type: boolean
      - description: |
          List of values to include/exclude. Required if any filters.target.*
          fields are provided.
        explode: false
        in: query
        name: filters.target.values
        schema:
          items:
            $ref: '#/components/schemas/snap-in-packages-log-target-filter-log-target-enum'
          type: array
      - description: Number of logs to fetch. Defaults to 50.
        explode: false
        in: query
        name: limit
        schema:
          format: int64
          type: integer
      - description: Query for message text.
        explode: false
        in: query
        name: query
        schema:
          type: string
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: timestamp.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: timestamp.before
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-in-packages-logs-fetch-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-packages
      x-devrev-owner: umang.malik@devrev.ai
    post:
      description: |
        Fetches the logs for the snap-in-package based on the filters
        specified.
      operationId: snap-in-packages-logs-fetch-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-in-packages-logs-fetch-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-in-packages-logs-fetch-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-packages
      x-devrev-owner: umang.malik@devrev.ai
  /internal/snap-in-versions.create:
    post:
      description: Creates a snap-in version.
      operationId: snap-in-versions-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-in-versions-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-in-versions-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-versions
      x-devrev-owner: peter.marinsek@devrev.ai
  /internal/snap-in-versions.delete:
    post:
      description: Deletes a snap-in version.
      operationId: snap-in-versions-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-in-versions-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-versions
      x-devrev-owner: peter.marinsek@devrev.ai
  /internal/snap-in-versions.get:
    get:
      description: |
        ### Owner: peter.marinsek@devrev.ai
        ### Gets a snap-in version.
      operationId: snap-in-versions-get
      parameters:
      - description: The ID of the snap-in version to get.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-in-versions-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-versions
      x-devrev-owner: peter.marinsek@devrev.ai
    post:
      description: Gets a snap-in version.
      operationId: snap-in-versions-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-in-versions-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-in-versions-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-versions
      x-devrev-owner: peter.marinsek@devrev.ai
  /internal/snap-in-versions.list:
    get:
      description: |
        ### Owner: harpinder.singh@devrev.ai
        ### Lists snap-in versions for a Dev organization.
      operationId: snap-in-versions-list
      parameters:
      - description: |
          Filters for snap-in-versions created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: created_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: created_date.before
        schema:
          format: date-time
          type: string
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of snap-in versions to return. The default is
          '50', the maximum is '100'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for objects created after the provided timestamp (inclusive).
        explode: false
        in: query
        name: modified_date.after
        schema:
          format: date-time
          type: string
      - description: |
          Filters for objects created before the provided timestamp
          (inclusive).
        explode: false
        in: query
        name: modified_date.before
        schema:
          format: date-time
          type: string
      - description: |
          Filters for snap-in-versions part of any of these packages.
        explode: false
        in: query
        name: snap_in_package
        schema:
          items:
            type: string
          type: array
      - description: |
          Fields to sort the snap-in versions by and the direction to sort
          them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters for snap-in-versions in any of these states.
        explode: false
        in: query
        name: state
        schema:
          items:
            $ref: '#/components/schemas/snap-in-version-state'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-in-versions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-versions
      x-devrev-owner: harpinder.singh@devrev.ai
    post:
      description: Lists snap-in versions for a Dev organization.
      operationId: snap-in-versions-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-in-versions-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-in-versions-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-in-versions
      x-devrev-owner: harpinder.singh@devrev.ai
  /internal/snap-ins.delete:
    post:
      description: Deletes a SnapIn.
      operationId: snap-ins-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-ins-delete-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-ins
      x-devrev-owner: harpinder.singh@devrev.ai
  /internal/snap-ins.deploy:
    post:
      description: Deploys a SnapIn.
      operationId: snap-ins-deploy
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-ins-deploy-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-ins-deploy-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-ins
      x-devrev-owner: harpinder.singh@devrev.ai
  /internal/snap-ins.draft.create:
    post:
      description: Creates a draft SnapIn from given SnapIn version.
      operationId: snap-ins-draft-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-ins-draft-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-ins-draft-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-ins
      x-devrev-owner: harpinder.singh@devrev.ai
  /internal/snap-ins.get:
    get:
      description: |-
        ### Owner: harpinder.singh@devrev.ai
        ### Gets a SnapIn.
      operationId: snap-ins-get
      parameters:
      - description: The ID of the snap-in to get.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-ins-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-ins
      x-devrev-owner: harpinder.singh@devrev.ai
    post:
      description: Gets a SnapIn.
      operationId: snap-ins-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-ins-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-ins-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-ins
      x-devrev-owner: harpinder.singh@devrev.ai
  /internal/snap-ins.list:
    get:
      description: |
        ### Owner: harpinder.singh@devrev.ai
        ### Lists snap-ins for a Dev organization.
      operationId: snap-ins-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of snap-ins to return. The default is '50', the
          maximum is '100'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Fields to sort the snap-ins by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-ins-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-ins
      x-devrev-owner: harpinder.singh@devrev.ai
    post:
      description: Lists snap-ins for a Dev organization.
      operationId: snap-ins-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-ins-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-ins-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-ins
      x-devrev-owner: harpinder.singh@devrev.ai
  /internal/snap-ins.update:
    post:
      description: Updates a SnapIn.
      operationId: snap-ins-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snap-ins-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snap-ins-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - snap-ins
      x-devrev-owner: harpinder.singh@devrev.ai
  /internal/snap-kit-action.execute:
    post:
      description: Executes snap kit actions.
      operationId: execute-snap-kit-action
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/execute-snap-kit-action-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/execute-snap-kit-action-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      x-devrev-owner: divanshu.aggarwal@devrev.ai
  /internal/snaps.list:
    get:
      description: |
        ### Owner: harpinder.singh@devrev.ai
        ### Lists snaps for a Dev organization.
      operationId: snaps-list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snaps-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - flows
      - snap-ins
      x-devrev-owner: harpinder.singh@devrev.ai
    post:
      description: Lists snaps for a Dev organization.
      operationId: snaps-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/snaps-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/snaps-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - flows
      - snap-ins
      x-devrev-owner: harpinder.singh@devrev.ai
  /internal/sockets.connect:
    get:
      description: |
        ### Owner: brian.byrne@devrev.ai
        ### Connects to an open socket.
      operationId: sockets-connect
      parameters:
      - description: The ID for the open socket to connect to.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - sockets
      x-devrev-owner: brian.byrne@devrev.ai
    post:
      description: Connects to an open socket.
      operationId: sockets-connect-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sockets-connect-request'
      responses:
        "200":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - sockets
      x-devrev-owner: brian.byrne@devrev.ai
  /internal/sockets.open:
    post:
      description: Opens a new socket.
      operationId: sockets-open
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sockets-open-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sockets-open-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - sockets
      x-devrev-owner: brian.byrne@devrev.ai
  /internal/stage-diagrams.get:
    get:
      description: Gets a stage diagram.
      operationId: stage-diagrams-get
      parameters:
      - description: The ID of the stage diagram to get.
        explode: false
        in: query
        name: id
        schema:
          type: string
      - description: |
          The leaf type. Should be specified to retrieve the default stage
          diagram for the leaf type. If not provided, then id is used.
        explode: false
        in: query
        name: leaf_type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stage-diagrams-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a stage diagram.
      operationId: stage-diagrams-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stage-diagrams-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stage-diagrams-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/stage-diagrams.list:
    get:
      description: Lists stage diagrams.
      operationId: stage-diagrams-list
      parameters:
      - description: |
          The cursor to resume iteration from, otherwise if not provided, then
          iteration starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The list of leaf types.
        explode: false
        in: query
        name: leaf_type
        schema:
          items:
            type: string
          type: array
      - description: The maximum number of items.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: The list of stage diagram names.
        explode: false
        in: query
        name: name
        schema:
          items:
            type: string
          type: array
      - description: |
          The list of fields to sort the items by and how to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stage-diagrams-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Lists stage diagrams.
      operationId: stage-diagrams-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/stage-diagrams-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/stage-diagrams-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/stages.custom.get:
    get:
      description: Gets a custom stage.
      operationId: custom-stages-get
      parameters:
      - description: The ID of the custom stage to get.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a custom stage.
      operationId: custom-stages-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-stages-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/stages.custom.list:
    get:
      description: Lists custom stages.
      operationId: custom-stages-list
      parameters:
      - description: |
          The cursor to resume iteration from, otherwise if not provided, then
          iteration starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The maximum number of items.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: ' Required if any marketplace_ref.* fields are provided.'
        explode: false
        in: query
        name: marketplace_ref.id
        schema:
          type: string
      - description: The list of stage names.
        explode: false
        in: query
        name: name
        schema:
          items:
            type: string
          type: array
      - description: The list of stage ordinals.
        explode: false
        in: query
        name: ordinal
        schema:
          items:
            format: int32
            type: integer
          type: array
      - description: |
          The list of fields to sort the items by and how to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: ' Required if any state_id.* fields are provided.'
        explode: false
        in: query
        name: state_id.id
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Lists custom stages.
      operationId: custom-stages-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-stages-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-stages-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/states.custom.get:
    get:
      description: Gets a custom state.
      operationId: custom-states-get
      parameters:
      - description: The ID of the custom state to get.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a custom state.
      operationId: custom-states-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-states-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/states.custom.list:
    get:
      description: Lists custom states.
      operationId: custom-states-list
      parameters:
      - description: |
          The cursor to resume iteration from, otherwise if not provided, then
          iteration starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The list of final stage indicators.
        explode: false
        in: query
        name: is_final
        schema:
          type: boolean
      - description: The maximum number of items.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: The list of stage names.
        explode: false
        in: query
        name: name
        schema:
          items:
            type: string
          type: array
      - description: The list of stage ordinals.
        explode: false
        in: query
        name: ordinal
        schema:
          items:
            format: int32
            type: integer
          type: array
      - description: |
          The list of fields to sort the items by and how to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
    post:
      description: Lists custom states.
      operationId: custom-states-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/custom-states-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/custom-states-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - customization
      x-devrev-owner: UNKNOWN
  /internal/surveys.create:
    post:
      description: |
        Creates a schema for survey, which includes name and description of
        schema.
      operationId: surveys-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - surveys
      x-devrev-owner: amit.gosavi@devrev.ai
  /internal/surveys.submit:
    post:
      description: |
        Submits a user response to a survey, which is defined by the survey ID.
      operationId: surveys-submit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/surveys-submit-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/surveys-submit-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - surveys
      x-devrev-owner: amit.gosavi@devrev.ai
  /internal/sys-users.get:
    get:
      description: Gets the requested user's information.
      operationId: sys-users-get
      parameters:
      - description: User ID of the requested system user.
        explode: false
        in: query
        name: id
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys-users-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - sys-users
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the requested user's information.
      operationId: sys-users-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sys-users-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys-users-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - sys-users
      x-devrev-owner: UNKNOWN
  /internal/sys-users.list:
    get:
      description: |
        ### Owner: akanksha.deswal@devrev.ai
        ### Lists system users within your organization.
      operationId: sys-users-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of system users to return. Value can range from
          '1' to '100', with a default of '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Fields to sort the system users by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys-users-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - sys-users
      x-devrev-owner: akanksha.deswal@devrev.ai
    post:
      description: Lists system users within your organization.
      operationId: sys-users-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sys-users-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys-users-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - sys-users
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/sys-users.update:
    post:
      description: Updates the system user.
      operationId: sys-users-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sys-users-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sys-users-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - sys-users
      x-devrev-owner: akanksha.deswal@devrev.ai
  /internal/tags.create:
    post:
      description: |
        Creates a new tag, which is used to create associations between objects
        and a logical concept denoted by the tag's name.
      operationId: tags-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - tags
      x-devrev-owner: UNKNOWN
  /internal/tags.delete:
    post:
      description: Deletes a tag.
      operationId: tags-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - tags
      x-devrev-owner: UNKNOWN
  /internal/tags.get:
    get:
      description: Gets a tag's information.
      operationId: tags-get
      parameters:
      - description: The requested tag's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - tags
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a tag's information.
      operationId: tags-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - tags
      x-devrev-owner: UNKNOWN
  /internal/tags.list:
    get:
      description: Lists the available tags.
      operationId: tags-list
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: The maximum number of tags to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Filters for tags with the provided names.
        explode: false
        in: query
        name: name
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - tags
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the available tags.
      operationId: tags-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - tags
      x-devrev-owner: UNKNOWN
  /internal/tags.update:
    post:
      description: Updates a tag's information.
      operationId: tags-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/tags-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/tags-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - tags
      x-devrev-owner: UNKNOWN
  /internal/timeline-entries.create:
    post:
      description: Creates a new entry on an object's timeline.
      operationId: timeline-entries-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      x-devrev-owner: UNKNOWN
  /internal/timeline-entries.delete:
    post:
      description: Deletes an entry from an object's timeline.
      operationId: timeline-entries-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      x-devrev-owner: UNKNOWN
  /internal/timeline-entries.get:
    get:
      description: Gets an entry on an object's timeline.
      operationId: timeline-entries-get
      parameters:
      - description: The ID of the timeline entry to get.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      x-devrev-owner: UNKNOWN
    post:
      description: Gets an entry on an object's timeline.
      operationId: timeline-entries-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      x-devrev-owner: UNKNOWN
  /internal/timeline-entries.list:
    get:
      description: Lists the timeline entries for an object.
      operationId: timeline-entries-list
      parameters:
      - description: |
          The collection(s) to list entries from, otherwise if not provided,
          all entries are returned.
        explode: false
        in: query
        name: collections
        schema:
          items:
            $ref: '#/components/schemas/timeline-entries-collection'
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The entry to begin iteration from. Note the entry will *not* be
          included in the result (exclusive). If provided, then no cursor
          should be set.
        explode: false
        in: query
        name: entry
        schema:
          type: string
      - description: The ID of the object to list timeline entries for.
        explode: false
        in: query
        name: id
        schema:
          deprecated: true
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      - description: |
          The maximum number of entries to return. If not set, then this
          defaults to `50`.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: The ID of the object to list timeline entries for.
        explode: false
        in: query
        name: object
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the timeline entries for an object.
      operationId: timeline-entries-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      x-devrev-owner: UNKNOWN
  /internal/timeline-entries.update:
    post:
      description: Updates an entry on an object's timeline.
      operationId: timeline-entries-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      x-devrev-owner: UNKNOWN
  /internal/timeline.comments.create:
    post:
      description: Creates a comment on an object.
      operationId: timeline-comments-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-comments-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-comments-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      x-devrev-owner: UNKNOWN
  /internal/timeline.entries.get:
    get:
      description: Gets an entry on an object's timeline.
      operationId: old-timeline-entries-get
      parameters:
      - description: The ID of the timeline entry to get.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      x-devrev-owner: UNKNOWN
    post:
      description: Gets an entry on an object's timeline.
      operationId: old-timeline-entries-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      x-devrev-owner: UNKNOWN
  /internal/timeline.entries.list:
    get:
      description: Lists the timeline entries for an object.
      operationId: old-timeline-entries-list
      parameters:
      - description: |
          The collection(s) to list entries from, otherwise if not provided,
          all entries are returned.
        explode: false
        in: query
        name: collections
        schema:
          items:
            $ref: '#/components/schemas/timeline-entries-collection'
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The entry to begin iteration from. Note the entry will *not* be
          included in the result (exclusive). If provided, then no cursor
          should be set.
        explode: false
        in: query
        name: entry
        schema:
          type: string
      - description: The ID of the object to list timeline entries for.
        explode: false
        in: query
        name: id
        schema:
          deprecated: true
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      - description: |
          The maximum number of entries to return. If not set, then this
          defaults to `50`.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: The ID of the object to list timeline entries for.
        explode: false
        in: query
        name: object
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the timeline entries for an object.
      operationId: old-timeline-entries-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/timeline-entries-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/timeline-entries-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - timeline-entries
      x-devrev-owner: UNKNOWN
  /internal/track-events.publish:
    post:
      description: Allows publishing of events (example from plug widget).
      operationId: track-events-publish
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/track-events-publish-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/track-events-publish-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - event-source
      x-devrev-owner: UNKNOWN
  /internal/translate:
    post:
      description: Translates input text to specified target language.
      operationId: translate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/translate-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/translate-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - translation
      x-devrev-owner: UNKNOWN
  /internal/translation.languages.list:
    get:
      description: Returns the supported languages for translation.
      operationId: translation-languages-list
      parameters:
      - description: |
          The language to use to return localized, human readable names of
          supported languages.
        explode: false
        in: query
        name: target_language
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/supported-languages-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - translation
      x-devrev-owner: UNKNOWN
    post:
      description: Returns the supported languages for translation.
      operationId: translation-languages-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/supported-languages-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/supported-languages-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - translation
      x-devrev-owner: UNKNOWN
  /internal/translation.translate:
    post:
      description: Translates input text to specified target language.
      operationId: translation-translate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/translate-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/translate-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - translation
      x-devrev-owner: UNKNOWN
  /internal/uoms.create:
    post:
      description: Creates a UOM on a part.
      operationId: uoms-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uoms-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/uoms.delete:
    post:
      description: Deletes a UOM.
      operationId: uoms-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uoms-delete-request'
      responses:
        "204":
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/uoms.get:
    get:
      description: Gets a UOM.
      operationId: uoms-get
      parameters:
      - description: The UOM's DON.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets a UOM.
      operationId: uoms-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uoms-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/uoms.list:
    get:
      description: Gets the UOMs based on the given filters.
      operationId: uoms-list
      parameters:
      - description: The list of aggregation types which are to be aggregated.
        explode: false
        in: query
        name: aggregation_types
        schema:
          items:
            $ref: '#/components/schemas/aggregation-detail-aggregation-type'
          type: array
      - description: The list of UOM DONs which are to be aggregated.
        explode: false
        in: query
        name: ids
        schema:
          items:
            type: string
          type: array
      - description: The list of meter names which are to be aggregated.
        explode: false
        in: query
        name: meter_names
        schema:
          items:
            type: string
          type: array
      - description: The list of part DONs which are to be aggregated.
        explode: false
        in: query
        name: part_ids
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: The list of product DONs which are to be aggregated.
        explode: false
        in: query
        name: product_ids
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          List of fields to sort the UOMs, by and how to sort them. Default is
          to sort by created_date in descending order.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: The list of unit types which are to be aggregated.
        explode: false
        in: query
        name: unit_types
        schema:
          items:
            $ref: '#/components/schemas/unit-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the UOMs based on the given filters.
      operationId: uoms-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uoms-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/uoms.update:
    post:
      description: Updates a UOM.
      operationId: uoms-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/uoms-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/uoms-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - commerce
      x-devrev-owner: UNKNOWN
  /internal/user.privileges:
    get:
      description: Returns the user's privileges for the target object.
      operationId: user-privileges
      parameters:
      - description: |
          The ID of the target object for which user privileges are requested.
        explode: false
        in: query
        name: target.id
        schema:
          type: string
      - description: |
          The type of the target object for which user privileges are
          requested.
        explode: false
        in: query
        name: target.object_type
        schema:
          $ref: '#/components/schemas/object-type-proto'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-privileges-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - users
      x-devrev-owner: UNKNOWN
    post:
      description: Returns the user's privileges for the target object.
      operationId: user-privileges-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-privileges-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-privileges-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - users
      x-devrev-owner: UNKNOWN
  /internal/users.invitations.delete:
    post:
      description: Delete the invitation sent to the user.
      operationId: user-invitation-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/user-invitation-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user-invitation-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-users
      x-devrev-owner: UNKNOWN
  /internal/users.invitations.list:
    get:
      description: |
        Gets the list of Dev organizations that the Dev user is invited to.
      operationId: dev-user-invitations-list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list-dev-user-invitations-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: UNKNOWN
    post:
      description: |
        Gets the list of Dev organizations that the Dev user is invited to.
      operationId: dev-user-invitations-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/list-dev-user-invitations-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/list-dev-user-invitations-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - dev-orgs
      x-devrev-owner: UNKNOWN
  /internal/verify.check-code:
    post:
      description: |
        Checks the verification code that was sent to the phone number via
        previously invoked endpoint "verify.send-code". Verification codes are
        valid for a duration of 10-minute verification session.
      operationId: verify-check-code
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verify-check-code-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verify-check-code-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - verify
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/verify.redirect-mobile-signup:
    post:
      description: Sends an email to redirect mobile during signup.
      operationId: verify-redirect-mobile-signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verify-redirect-mobile-signup-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verify-redirect-mobile-signup-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - verify
      x-devrev-owner: brian.byrne@devrev.ai
  /internal/verify.send-code:
    post:
      description: "Sends a verification code to the given phone number. The code
        is valid\nfor the duration of 10-minute verification session. During this\nsession,
        reinvoking this endpoint will send the same verification code\nand the code's
        validity will not be extended. \n"
      operationId: verify-send-code
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/verify-send-code-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/verify-send-code-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - verify
      x-devrev-owner: rahul.jain@devrev.ai
  /internal/vistas.create:
    post:
      description: Creates a vista.
      operationId: vistas-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: UNKNOWN
  /internal/vistas.delete:
    post:
      description: Deletes the requested vista.
      operationId: vistas-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: UNKNOWN
  /internal/vistas.get:
    get:
      description: Gets the requested vistas's information.
      operationId: vistas-get
      parameters:
      - description: The vista's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: UNKNOWN
    post:
      description: Gets the requested vistas's information.
      operationId: vistas-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: UNKNOWN
  /internal/vistas.groups.create:
    post:
      description: Creates a vista group item.
      operationId: vistas-groups-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-groups-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-groups-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: shivam.gupta@devrev.ai
  /internal/vistas.groups.delete:
    post:
      description: Deletes the requested vista group item
      operationId: vistas-groups-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-groups-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-groups-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: shivam.gupta@devrev.ai
  /internal/vistas.groups.get:
    get:
      description: |
        ### Owner: shivam.gupta@devrev.ai
        ### Gets the requested vista group item's information.
      operationId: vistas-groups-get
      parameters:
      - description: The vista group item's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-groups-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: shivam.gupta@devrev.ai
    post:
      description: Gets the requested vista group item's information.
      operationId: vistas-groups-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-groups-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-groups-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: shivam.gupta@devrev.ai
  /internal/vistas.groups.list:
    get:
      description: "### Owner: shivam.gupta@devrev.ai\n### Lists the available vista
        group items. \n"
      operationId: vistas-groups-list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-groups-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: shivam.gupta@devrev.ai
    post:
      description: 'Lists the available vista group items. '
      operationId: vistas-groups-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-groups-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-groups-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: shivam.gupta@devrev.ai
  /internal/vistas.groups.update:
    post:
      description: Updates the requested vista group item.
      operationId: vistas-groups-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-groups-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-groups-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: shivam.gupta@devrev.ai
  /internal/vistas.list:
    get:
      description: Lists the available vistas.
      operationId: vistas-list
      parameters:
      - description: |
          Filters for vistas which have one of the parts linked as its ancestor
          part or primary part.
        explode: false
        in: query
        name: ancestor_part
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for vistas belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_part
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for vistas created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Filters for vistas of specific flavor.
        explode: false
        in: query
        name: flavor
        schema:
          items:
            $ref: '#/components/schemas/grouped-vista-flavor'
          type: array
      - description: Whether the default vistas should be fetched or not.
        explode: false
        in: query
        name: is_default
        schema:
          type: boolean
      - description: |
          The maximum number of vistas to return. The default is '50', the
          maximum is '100'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: Filters for vistas accessible to the input members.
        explode: false
        in: query
        name: members
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: |
          Filters for vistas of specific object types like works, parts etc.
        explode: false
        in: query
        name: object_type
        schema:
          items:
            $ref: '#/components/schemas/dynamic-vista-filter-type'
          type: array
      - description: |
          Fields to sort the vistas by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters for vistas of the specific type.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/vista-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: UNKNOWN
    post:
      description: Lists the available vistas.
      operationId: vistas-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: UNKNOWN
  /internal/vistas.update:
    post:
      description: Updates the requested vista.
      operationId: vistas-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/vistas-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/vistas-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - vistas
      x-devrev-owner: UNKNOWN
  /internal/watchers.get:
    get:
      description: Gets requesting user watcher events for an object.
      operationId: watchers-get
      parameters:
      - description: The object's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchers-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - watchers
      x-devrev-owner: UNKNOWN
    post:
      description: Gets requesting user watcher events for an object.
      operationId: watchers-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchers-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchers-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - watchers
      x-devrev-owner: UNKNOWN
  /internal/watchers.list:
    get:
      description: Lists watchers of an object.
      operationId: watchers-list
      parameters:
      - description: The object's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      - description: |
          The cursor to resume iteration from, otherwise if not provided, then
          iteration starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The watch events that must be present. If empty, all watchers that
          contain at least one watched event are returned, otherwise watchers
          that contain at least one of the provided events will be returned.
        explode: false
        in: query
        name: events
        schema:
          items:
            $ref: '#/components/schemas/watch-event'
          type: array
      - description: |
          The maximum number of watchers to return. If not set or `<= 0`, then
          this defaults to `50`.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchers-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - watchers
      x-devrev-owner: UNKNOWN
    post:
      description: Lists watchers of an object.
      operationId: watchers-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchers-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchers-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - watchers
      x-devrev-owner: UNKNOWN
  /internal/watchers.update:
    post:
      description: Updates watchers on the object.
      operationId: watchers-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/watchers-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/watchers-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - watchers
      x-devrev-owner: UNKNOWN
  /internal/webhooks.create:
    post:
      description: Creates a new webhook target.
      operationId: webhooks-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - webhooks
      x-devrev-owner: brian.byrne@devrev.ai
  /internal/webhooks.delete:
    post:
      description: Deletes the requested webhook.
      operationId: webhooks-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - webhooks
      x-devrev-owner: brian.byrne@devrev.ai
  /internal/webhooks.get:
    get:
      description: |
        ### Owner: brian.byrne@devrev.ai
        ### Gets the requested webhook's information.
      operationId: webhooks-get
      parameters:
      - description: ID for the webhook.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:integration:devo/<dev-org-id>:webhook/<webhook-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - webhooks
      x-devrev-owner: brian.byrne@devrev.ai
    post:
      description: Gets the requested webhook's information.
      operationId: webhooks-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - webhooks
      x-devrev-owner: brian.byrne@devrev.ai
  /internal/webhooks.list:
    get:
      description: |-
        ### Owner: brian.byrne@devrev.ai
        ### Lists the webhooks.
      operationId: webhooks-list
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - webhooks
      x-devrev-owner: brian.byrne@devrev.ai
    post:
      description: Lists the webhooks.
      operationId: webhooks-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - webhooks
      x-devrev-owner: brian.byrne@devrev.ai
  /internal/webhooks.update:
    post:
      description: Updates the requested webhook.
      operationId: webhooks-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/webhooks-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/webhooks-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - webhooks
      x-devrev-owner: brian.byrne@devrev.ai
  /internal/works.count:
    get:
      description: |
        ### Owner: anshu.avinash@devrev.ai
        ### Get count of work matching given filter.
      operationId: works-count
      parameters:
      - description: |
          Filters for work actual_close after the timestamp provided.
        explode: false
        in: query
        name: actual_close_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for work actual_close before the timestamp provided.
        explode: false
        in: query
        name: actual_close_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for work which have one of the parts present as its ancestor
          part or primary part.
        explode: false
        in: query
        name: ancestor_part
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for work which have one of the parts present as its ancestor
          part or primary part.
        explode: false
        in: query
        name: ancestor_part_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for work belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_part
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for work belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_part_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for work created after the timestamp provided.
        explode: false
        in: query
        name: created_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: Filters for work created before the timestamp provided.
        explode: false
        in: query
        name: created_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: Filters for work created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for work created by any of these users.
        explode: false
        in: query
        name: created_by_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on created_by.
        explode: false
        in: query
        name: created_by_op
        schema:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
      - description: Filters for custom fields.
        explode: false
        in: query
        name: custom_fields
        schema:
          type: object
      - description: Filters for work excluding the provided work IDs.
        explode: false
        in: query
        name: exclude
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
      - description: Filters for work excluding the provided work IDs.
        explode: false
        in: query
        name: exclude_work_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
      - description: |
          Whether to include items belonging to children of any of the provided
          parts.
        explode: false
        in: query
        name: issue.applies_to_part.include_child_parts
        schema:
          type: boolean
      - description: |
          Part IDs to filter on. Required if any issue.applies_to_part.* fields
          are provided.
        explode: false
        in: query
        name: issue.applies_to_part.parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for issues with any of the provided priorities.
        explode: false
        in: query
        name: issue.priorities
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/issue-priority'
          type: array
      - description: Filters for issues with any of the provided priorities.
        explode: false
        in: query
        name: issue.priority
        schema:
          items:
            $ref: '#/components/schemas/issue-priority'
          type: array
      - description: |
          Filters for issues with any of the provided Rev organizations.
        explode: false
        in: query
        name: issue.rev_orgs
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on rev_orgs.
        explode: false
        in: query
        name: issue.rev_orgs_op
        schema:
          $ref: '#/components/schemas/works-filter-issue-rev-orgs-op-operator-type'
      - description: Filters for issues with any of the sprint.
        explode: false
        in: query
        name: issue.sprint
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on sprint.
        explode: false
        in: query
        name: issue.sprint_op
        schema:
          $ref: '#/components/schemas/works-filter-issue-sprint-op-operator-type'
      - description: Filters for issues with any of the provided subtypes.
        explode: false
        in: query
        name: issue.subtype
        schema:
          items:
            type: string
          type: array
      - description: Filters for work modified after the provided timestamp.
        explode: false
        in: query
        name: modified_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: Filters for work modified before the provided timestamp.
        explode: false
        in: query
        name: modified_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for opportunities belonging to any of the provided accounts.
        explode: false
        in: query
        name: opportunity.account
        schema:
          items:
            type: string
          type: array
      - description: Filters for work owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for work owned by any of these users.
        explode: false
        in: query
        name: owned_by_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on owned_by.
        explode: false
        in: query
        name: owned_by_op
        schema:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
      - description: Filters for records in the provided stage(s).
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for work for the provided stage names.
        explode: false
        in: query
        name: stage_names
        schema:
          items:
            type: string
          type: array
      - description: Filters for work with any of the provided states.
        explode: false
        in: query
        name: state
        schema:
          items:
            type: string
          type: array
      - description: Filters for work with any of the provided tags.
        explode: false
        in: query
        name: tag_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
      - description: Filters for work with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: |
          Filters for work whose target close date is after the provided
          timestamp.
        explode: false
        in: query
        name: target_close_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for work whose target close date is before the provided
          timestamp.
        explode: false
        in: query
        name: target_close_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Whether to include items belonging to children of any of the provided
          parts.
        explode: false
        in: query
        name: task.applies_to_part.include_child_parts
        schema:
          type: boolean
      - description: |
          Part IDs to filter on. Required if any task.applies_to_part.* fields
          are provided.
        explode: false
        in: query
        name: task.applies_to_part.parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filter for tasks with any of the provided embedded values.
        explode: false
        in: query
        name: task.embedded
        schema:
          items:
            type: boolean
          type: array
      - description: Filters for tasks with any of the provided priorities.
        explode: false
        in: query
        name: task.priorities
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/task-priority'
          type: array
      - description: Filters for tasks with any of the provided priorities.
        explode: false
        in: query
        name: task.priority
        schema:
          items:
            $ref: '#/components/schemas/task-priority'
          type: array
      - description: |
          Filters for tasks which started after the provided timestamp.
        explode: false
        in: query
        name: task.start_after_date
        schema:
          format: date-time
          type: string
      - description: |
          Filters for tasks which started before the provided timestamp.
        explode: false
        in: query
        name: task.start_before_date
        schema:
          format: date-time
          type: string
      - description: |
          Whether to include items belonging to children of any of the provided
          parts.
        explode: false
        in: query
        name: ticket.applies_to_part.include_child_parts
        schema:
          type: boolean
      - description: |
          Part IDs to filter on. Required if any ticket.applies_to_part.*
          fields are provided.
        explode: false
        in: query
        name: ticket.applies_to_part.parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for tickets that are associated with any of the provided Rev
          organizations.
        explode: false
        in: query
        name: ticket.rev_org
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          Filters for tickets associated to the provided Rev organizations
          using an operator.
        explode: false
        in: query
        name: ticket.rev_org_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied.
        explode: false
        in: query
        name: ticket.rev_org_ids_op
        schema:
          $ref: '#/components/schemas/works-filter-ticket-rev-org-i-ds-operator-type'
      - description: Filters for tickets with any of the provided severities.
        explode: false
        in: query
        name: ticket.severities
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/ticket-severity'
          type: array
      - description: Filters for tickets with any of the provided severities.
        explode: false
        in: query
        name: ticket.severity
        schema:
          items:
            $ref: '#/components/schemas/ticket-severity'
          type: array
      - description: Filters for records with any of the provided SLA stages.
        explode: false
        in: query
        name: ticket.sla_summary.stage
        schema:
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: Filters for tickets with any of the provided subtypes.
        explode: false
        in: query
        name: ticket.subtype
        schema:
          items:
            type: string
          type: array
      - description: Filters for work of the provided types.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      - description: Filters for work of the provided types.
        explode: false
        in: query
        name: types
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      - description: Filters for work belonging to the given vista.
        explode: false
        in: query
        name: vista
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
    post:
      description: Get count of work matching given filter.
      operationId: works-count-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-count-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-count-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
  /internal/works.create:
    post:
      description: |
        Creates new work ([issue](https://devrev.ai/docs/product/build),
        [ticket](https://devrev.ai/docs/product/support)) item.
      operationId: works-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-create-request'
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-create-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
  /internal/works.delete:
    post:
      description: Deletes a work item.
      operationId: works-delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-delete-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-delete-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
  /internal/works.export:
    get:
      description: |
        ### Owner: anshu.avinash@devrev.ai
        ### Exports a collection of work items.
      operationId: works-export
      parameters:
      - description: |
          Filters for work actual_close after the timestamp provided.
        explode: false
        in: query
        name: actual_close_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for work actual_close before the timestamp provided.
        explode: false
        in: query
        name: actual_close_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for work which have one of the parts present as its ancestor
          part or primary part.
        explode: false
        in: query
        name: ancestor_part
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for work which have one of the parts present as its ancestor
          part or primary part.
        explode: false
        in: query
        name: ancestor_part_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for work belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_part
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for work belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_part_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for work created after the timestamp provided.
        explode: false
        in: query
        name: created_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: Filters for work created before the timestamp provided.
        explode: false
        in: query
        name: created_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: Filters for work created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for work created by any of these users.
        explode: false
        in: query
        name: created_by_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on created_by.
        explode: false
        in: query
        name: created_by_op
        schema:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
      - description: Filters for custom fields.
        explode: false
        in: query
        name: custom_fields
        schema:
          type: object
      - description: Filters for work excluding the provided work IDs.
        explode: false
        in: query
        name: exclude
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
      - description: Filters for work excluding the provided work IDs.
        explode: false
        in: query
        name: exclude_work_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
      - description: |
          The number of work items to return. The default is '50', the maximum
          is '5000'.
        explode: false
        in: query
        name: first
        schema:
          format: int32
          type: integer
      - description: |
          Whether to include items belonging to children of any of the provided
          parts.
        explode: false
        in: query
        name: issue.applies_to_part.include_child_parts
        schema:
          type: boolean
      - description: |
          Part IDs to filter on. Required if any issue.applies_to_part.* fields
          are provided.
        explode: false
        in: query
        name: issue.applies_to_part.parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for issues with any of the provided priorities.
        explode: false
        in: query
        name: issue.priorities
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/issue-priority'
          type: array
      - description: Filters for issues with any of the provided priorities.
        explode: false
        in: query
        name: issue.priority
        schema:
          items:
            $ref: '#/components/schemas/issue-priority'
          type: array
      - description: |
          Filters for issues with any of the provided Rev organizations.
        explode: false
        in: query
        name: issue.rev_orgs
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on rev_orgs.
        explode: false
        in: query
        name: issue.rev_orgs_op
        schema:
          $ref: '#/components/schemas/works-filter-issue-rev-orgs-op-operator-type'
      - description: Filters for issues with any of the sprint.
        explode: false
        in: query
        name: issue.sprint
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on sprint.
        explode: false
        in: query
        name: issue.sprint_op
        schema:
          $ref: '#/components/schemas/works-filter-issue-sprint-op-operator-type'
      - description: Filters for issues with any of the provided subtypes.
        explode: false
        in: query
        name: issue.subtype
        schema:
          items:
            type: string
          type: array
      - description: Filters for work modified after the provided timestamp.
        explode: false
        in: query
        name: modified_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: Filters for work modified before the provided timestamp.
        explode: false
        in: query
        name: modified_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for opportunities belonging to any of the provided accounts.
        explode: false
        in: query
        name: opportunity.account
        schema:
          items:
            type: string
          type: array
      - description: Filters for work owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for work owned by any of these users.
        explode: false
        in: query
        name: owned_by_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on owned_by.
        explode: false
        in: query
        name: owned_by_op
        schema:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
      - description: |
          Fields to sort the work items by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters for records in the provided stage(s).
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for work for the provided stage names.
        explode: false
        in: query
        name: stage_names
        schema:
          items:
            type: string
          type: array
      - description: Filters for work with any of the provided states.
        explode: false
        in: query
        name: state
        schema:
          items:
            type: string
          type: array
      - description: Filters for work with any of the provided tags.
        explode: false
        in: query
        name: tag_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
      - description: Filters for work with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: |
          Filters for work whose target close date is after the provided
          timestamp.
        explode: false
        in: query
        name: target_close_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for work whose target close date is before the provided
          timestamp.
        explode: false
        in: query
        name: target_close_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Whether to include items belonging to children of any of the provided
          parts.
        explode: false
        in: query
        name: task.applies_to_part.include_child_parts
        schema:
          type: boolean
      - description: |
          Part IDs to filter on. Required if any task.applies_to_part.* fields
          are provided.
        explode: false
        in: query
        name: task.applies_to_part.parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filter for tasks with any of the provided embedded values.
        explode: false
        in: query
        name: task.embedded
        schema:
          items:
            type: boolean
          type: array
      - description: Filters for tasks with any of the provided priorities.
        explode: false
        in: query
        name: task.priorities
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/task-priority'
          type: array
      - description: Filters for tasks with any of the provided priorities.
        explode: false
        in: query
        name: task.priority
        schema:
          items:
            $ref: '#/components/schemas/task-priority'
          type: array
      - description: |
          Filters for tasks which started after the provided timestamp.
        explode: false
        in: query
        name: task.start_after_date
        schema:
          format: date-time
          type: string
      - description: |
          Filters for tasks which started before the provided timestamp.
        explode: false
        in: query
        name: task.start_before_date
        schema:
          format: date-time
          type: string
      - description: |
          Whether to include items belonging to children of any of the provided
          parts.
        explode: false
        in: query
        name: ticket.applies_to_part.include_child_parts
        schema:
          type: boolean
      - description: |
          Part IDs to filter on. Required if any ticket.applies_to_part.*
          fields are provided.
        explode: false
        in: query
        name: ticket.applies_to_part.parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for tickets that are associated with any of the provided Rev
          organizations.
        explode: false
        in: query
        name: ticket.rev_org
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          Filters for tickets associated to the provided Rev organizations
          using an operator.
        explode: false
        in: query
        name: ticket.rev_org_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied.
        explode: false
        in: query
        name: ticket.rev_org_ids_op
        schema:
          $ref: '#/components/schemas/works-filter-ticket-rev-org-i-ds-operator-type'
      - description: Filters for tickets with any of the provided severities.
        explode: false
        in: query
        name: ticket.severities
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/ticket-severity'
          type: array
      - description: Filters for tickets with any of the provided severities.
        explode: false
        in: query
        name: ticket.severity
        schema:
          items:
            $ref: '#/components/schemas/ticket-severity'
          type: array
      - description: Filters for records with any of the provided SLA stages.
        explode: false
        in: query
        name: ticket.sla_summary.stage
        schema:
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: Filters for tickets with any of the provided subtypes.
        explode: false
        in: query
        name: ticket.subtype
        schema:
          items:
            type: string
          type: array
      - description: Filters for work of the provided types.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      - description: Filters for work of the provided types.
        explode: false
        in: query
        name: types
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      - description: Filters for work belonging to the given vista.
        explode: false
        in: query
        name: vista
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
    post:
      description: Exports a collection of work items.
      operationId: works-export-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-export-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-export-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
  /internal/works.get:
    get:
      description: |
        ### Owner: anshu.avinash@devrev.ai
        ### Gets a work item's information.
      operationId: works-get
      parameters:
      - description: The work's ID.
        explode: false
        in: query
        name: id
        required: true
        schema:
          example: don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
    post:
      description: Gets a work item's information.
      operationId: works-get-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-get-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-get-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
  /internal/works.group:
    get:
      description: |
        ### Owner: anshu.avinash@devrev.ai
        ### Lists collections of works by groups.
      operationId: works-group
      parameters:
      - description: The field to group the works by.
        explode: false
        in: query
        name: group_by
        required: true
        schema:
          type: string
      - description: |
          Filters for work actual_close after the timestamp provided.
        explode: false
        in: query
        name: actual_close_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for work actual_close before the timestamp provided.
        explode: false
        in: query
        name: actual_close_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for work which have one of the parts present as its ancestor
          part or primary part.
        explode: false
        in: query
        name: ancestor_part
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for work which have one of the parts present as its ancestor
          part or primary part.
        explode: false
        in: query
        name: ancestor_part_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for work belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_part
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for work belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_part_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for work created after the timestamp provided.
        explode: false
        in: query
        name: created_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: Filters for work created before the timestamp provided.
        explode: false
        in: query
        name: created_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: Filters for work created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for work created by any of these users.
        explode: false
        in: query
        name: created_by_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on created_by.
        explode: false
        in: query
        name: created_by_op
        schema:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Filters for custom fields.
        explode: false
        in: query
        name: custom_fields
        schema:
          type: object
      - description: Filters for work excluding the provided work IDs.
        explode: false
        in: query
        name: exclude
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
      - description: Filters for work excluding the provided work IDs.
        explode: false
        in: query
        name: exclude_work_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
      - description: |
          Whether to include items belonging to children of any of the provided
          parts.
        explode: false
        in: query
        name: issue.applies_to_part.include_child_parts
        schema:
          type: boolean
      - description: |
          Part IDs to filter on. Required if any issue.applies_to_part.* fields
          are provided.
        explode: false
        in: query
        name: issue.applies_to_part.parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for issues with any of the provided priorities.
        explode: false
        in: query
        name: issue.priorities
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/issue-priority'
          type: array
      - description: Filters for issues with any of the provided priorities.
        explode: false
        in: query
        name: issue.priority
        schema:
          items:
            $ref: '#/components/schemas/issue-priority'
          type: array
      - description: |
          Filters for issues with any of the provided Rev organizations.
        explode: false
        in: query
        name: issue.rev_orgs
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on rev_orgs.
        explode: false
        in: query
        name: issue.rev_orgs_op
        schema:
          $ref: '#/components/schemas/works-filter-issue-rev-orgs-op-operator-type'
      - description: Filters for issues with any of the sprint.
        explode: false
        in: query
        name: issue.sprint
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on sprint.
        explode: false
        in: query
        name: issue.sprint_op
        schema:
          $ref: '#/components/schemas/works-filter-issue-sprint-op-operator-type'
      - description: Filters for issues with any of the provided subtypes.
        explode: false
        in: query
        name: issue.subtype
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of groups to return. If not set, then the default
          is '10'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The maximum number of works to return for an individual group. If not
          set, then the default is '50'.
        explode: false
        in: query
        name: limit_per_group
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Filters for work modified after the provided timestamp.
        explode: false
        in: query
        name: modified_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: Filters for work modified before the provided timestamp.
        explode: false
        in: query
        name: modified_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for opportunities belonging to any of the provided accounts.
        explode: false
        in: query
        name: opportunity.account
        schema:
          items:
            type: string
          type: array
      - description: Filters for work owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for work owned by any of these users.
        explode: false
        in: query
        name: owned_by_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on owned_by.
        explode: false
        in: query
        name: owned_by_op
        schema:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
      - description: Comma-separated fields to sort the works by.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters for records in the provided stage(s).
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for work for the provided stage names.
        explode: false
        in: query
        name: stage_names
        schema:
          items:
            type: string
          type: array
      - description: Filters for work with any of the provided states.
        explode: false
        in: query
        name: state
        schema:
          items:
            type: string
          type: array
      - description: Filters for work with any of the provided tags.
        explode: false
        in: query
        name: tag_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
      - description: Filters for work with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: |
          Filters for work whose target close date is after the provided
          timestamp.
        explode: false
        in: query
        name: target_close_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for work whose target close date is before the provided
          timestamp.
        explode: false
        in: query
        name: target_close_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Whether to include items belonging to children of any of the provided
          parts.
        explode: false
        in: query
        name: task.applies_to_part.include_child_parts
        schema:
          type: boolean
      - description: |
          Part IDs to filter on. Required if any task.applies_to_part.* fields
          are provided.
        explode: false
        in: query
        name: task.applies_to_part.parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filter for tasks with any of the provided embedded values.
        explode: false
        in: query
        name: task.embedded
        schema:
          items:
            type: boolean
          type: array
      - description: Filters for tasks with any of the provided priorities.
        explode: false
        in: query
        name: task.priorities
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/task-priority'
          type: array
      - description: Filters for tasks with any of the provided priorities.
        explode: false
        in: query
        name: task.priority
        schema:
          items:
            $ref: '#/components/schemas/task-priority'
          type: array
      - description: |
          Filters for tasks which started after the provided timestamp.
        explode: false
        in: query
        name: task.start_after_date
        schema:
          format: date-time
          type: string
      - description: |
          Filters for tasks which started before the provided timestamp.
        explode: false
        in: query
        name: task.start_before_date
        schema:
          format: date-time
          type: string
      - description: |
          Whether to include items belonging to children of any of the provided
          parts.
        explode: false
        in: query
        name: ticket.applies_to_part.include_child_parts
        schema:
          type: boolean
      - description: |
          Part IDs to filter on. Required if any ticket.applies_to_part.*
          fields are provided.
        explode: false
        in: query
        name: ticket.applies_to_part.parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for tickets that are associated with any of the provided Rev
          organizations.
        explode: false
        in: query
        name: ticket.rev_org
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          Filters for tickets associated to the provided Rev organizations
          using an operator.
        explode: false
        in: query
        name: ticket.rev_org_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied.
        explode: false
        in: query
        name: ticket.rev_org_ids_op
        schema:
          $ref: '#/components/schemas/works-filter-ticket-rev-org-i-ds-operator-type'
      - description: Filters for tickets with any of the provided severities.
        explode: false
        in: query
        name: ticket.severities
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/ticket-severity'
          type: array
      - description: Filters for tickets with any of the provided severities.
        explode: false
        in: query
        name: ticket.severity
        schema:
          items:
            $ref: '#/components/schemas/ticket-severity'
          type: array
      - description: Filters for records with any of the provided SLA stages.
        explode: false
        in: query
        name: ticket.sla_summary.stage
        schema:
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: Filters for tickets with any of the provided subtypes.
        explode: false
        in: query
        name: ticket.subtype
        schema:
          items:
            type: string
          type: array
      - description: Filters for work of the provided types.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      - description: Filters for work of the provided types.
        explode: false
        in: query
        name: types
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      - description: Filters for work belonging to the given vista.
        explode: false
        in: query
        name: vista
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
    post:
      description: Lists collections of works by groups.
      operationId: works-group-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-group-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-group-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
  /internal/works.list:
    get:
      description: |
        ### Owner: anshu.avinash@devrev.ai
        ### Lists a collection of work items.
      operationId: works-list
      parameters:
      - description: |
          Filters for work actual_close after the timestamp provided.
        explode: false
        in: query
        name: actual_close_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for work actual_close before the timestamp provided.
        explode: false
        in: query
        name: actual_close_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for work which have one of the parts present as its ancestor
          part or primary part.
        explode: false
        in: query
        name: ancestor_part
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for work which have one of the parts present as its ancestor
          part or primary part.
        explode: false
        in: query
        name: ancestor_part_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for work belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_part
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for work belonging to any of the provided parts.
        explode: false
        in: query
        name: applies_to_part_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for work created after the timestamp provided.
        explode: false
        in: query
        name: created_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: Filters for work created before the timestamp provided.
        explode: false
        in: query
        name: created_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: Filters for work created by any of these users.
        explode: false
        in: query
        name: created_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for work created by any of these users.
        explode: false
        in: query
        name: created_by_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on created_by.
        explode: false
        in: query
        name: created_by_op
        schema:
          $ref: '#/components/schemas/works-filter-created-by-operator-type'
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: Filters for custom fields.
        explode: false
        in: query
        name: custom_fields
        schema:
          type: object
      - description: Filters for work excluding the provided work IDs.
        explode: false
        in: query
        name: exclude
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
      - description: Filters for work excluding the provided work IDs.
        explode: false
        in: query
        name: exclude_work_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:<work-type>/<work-id>
          items:
            type: string
          type: array
      - description: |
          Whether to include items belonging to children of any of the provided
          parts.
        explode: false
        in: query
        name: issue.applies_to_part.include_child_parts
        schema:
          type: boolean
      - description: |
          Part IDs to filter on. Required if any issue.applies_to_part.* fields
          are provided.
        explode: false
        in: query
        name: issue.applies_to_part.parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filters for issues with any of the provided priorities.
        explode: false
        in: query
        name: issue.priorities
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/issue-priority'
          type: array
      - description: Filters for issues with any of the provided priorities.
        explode: false
        in: query
        name: issue.priority
        schema:
          items:
            $ref: '#/components/schemas/issue-priority'
          type: array
      - description: |
          Filters for issues with any of the provided Rev organizations.
        explode: false
        in: query
        name: issue.rev_orgs
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on rev_orgs.
        explode: false
        in: query
        name: issue.rev_orgs_op
        schema:
          $ref: '#/components/schemas/works-filter-issue-rev-orgs-op-operator-type'
      - description: Filters for issues with any of the sprint.
        explode: false
        in: query
        name: issue.sprint
        schema:
          items:
            type: string
          type: array
      - description: The filter operator to be applied on sprint.
        explode: false
        in: query
        name: issue.sprint_op
        schema:
          $ref: '#/components/schemas/works-filter-issue-sprint-op-operator-type'
      - description: Filters for issues with any of the provided subtypes.
        explode: false
        in: query
        name: issue.subtype
        schema:
          items:
            type: string
          type: array
      - description: |
          The maximum number of works to return. The default is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Filters for work modified after the provided timestamp.
        explode: false
        in: query
        name: modified_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: Filters for work modified before the provided timestamp.
        explode: false
        in: query
        name: modified_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for opportunities belonging to any of the provided accounts.
        explode: false
        in: query
        name: opportunity.account
        schema:
          items:
            type: string
          type: array
      - description: Filters for work owned by any of these users.
        explode: false
        in: query
        name: owned_by
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: Filters for work owned by any of these users.
        explode: false
        in: query
        name: owned_by_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:devu/<dev-user-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied on owned_by.
        explode: false
        in: query
        name: owned_by_op
        schema:
          $ref: '#/components/schemas/works-filter-owned-by-operator-type'
      - description: |
          Fields to sort the works by and the direction to sort them.
        explode: false
        in: query
        name: sort_by
        schema:
          items:
            type: string
          type: array
      - description: Filters for records in the provided stage(s).
        explode: false
        in: query
        name: stage.name
        schema:
          items:
            type: string
          type: array
      - description: Filters for work for the provided stage names.
        explode: false
        in: query
        name: stage_names
        schema:
          items:
            type: string
          type: array
      - description: Filters for work with any of the provided states.
        explode: false
        in: query
        name: state
        schema:
          items:
            type: string
          type: array
      - description: Filters for work with any of the provided tags.
        explode: false
        in: query
        name: tag_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied.
        explode: false
        in: query
        name: tag_ids_op
        schema:
          $ref: '#/components/schemas/works-filter-tag-ids-operator-type'
      - description: Filters for work with any of the provided tags.
        explode: false
        in: query
        name: tags
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:tag/<tag-id>
          items:
            type: string
          type: array
      - description: |
          Filters for work whose target close date is after the provided
          timestamp.
        explode: false
        in: query
        name: target_close_after_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Filters for work whose target close date is before the provided
          timestamp.
        explode: false
        in: query
        name: target_close_before_date
        schema:
          deprecated: true
          format: date-time
          type: string
      - description: |
          Whether to include items belonging to children of any of the provided
          parts.
        explode: false
        in: query
        name: task.applies_to_part.include_child_parts
        schema:
          type: boolean
      - description: |
          Part IDs to filter on. Required if any task.applies_to_part.* fields
          are provided.
        explode: false
        in: query
        name: task.applies_to_part.parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: Filter for tasks with any of the provided embedded values.
        explode: false
        in: query
        name: task.embedded
        schema:
          items:
            type: boolean
          type: array
      - description: Filters for tasks with any of the provided priorities.
        explode: false
        in: query
        name: task.priorities
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/task-priority'
          type: array
      - description: Filters for tasks with any of the provided priorities.
        explode: false
        in: query
        name: task.priority
        schema:
          items:
            $ref: '#/components/schemas/task-priority'
          type: array
      - description: |
          Filters for tasks which started after the provided timestamp.
        explode: false
        in: query
        name: task.start_after_date
        schema:
          format: date-time
          type: string
      - description: |
          Filters for tasks which started before the provided timestamp.
        explode: false
        in: query
        name: task.start_before_date
        schema:
          format: date-time
          type: string
      - description: |
          Whether to include items belonging to children of any of the provided
          parts.
        explode: false
        in: query
        name: ticket.applies_to_part.include_child_parts
        schema:
          type: boolean
      - description: |
          Part IDs to filter on. Required if any ticket.applies_to_part.*
          fields are provided.
        explode: false
        in: query
        name: ticket.applies_to_part.parts
        schema:
          example:
          - don:<partition>:core:devo/<dev-org-id>:<part-type>/<part-id>
          items:
            type: string
          type: array
      - description: |
          Filters for tickets that are associated with any of the provided Rev
          organizations.
        explode: false
        in: query
        name: ticket.rev_org
        schema:
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: |
          Filters for tickets associated to the provided Rev organizations
          using an operator.
        explode: false
        in: query
        name: ticket.rev_org_ids
        schema:
          deprecated: true
          example:
          - don:<partition>:identity:devo/<dev-org-id>:revo/<rev-org-id>
          items:
            type: string
          type: array
      - description: The filter operator to be applied.
        explode: false
        in: query
        name: ticket.rev_org_ids_op
        schema:
          $ref: '#/components/schemas/works-filter-ticket-rev-org-i-ds-operator-type'
      - description: Filters for tickets with any of the provided severities.
        explode: false
        in: query
        name: ticket.severities
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/ticket-severity'
          type: array
      - description: Filters for tickets with any of the provided severities.
        explode: false
        in: query
        name: ticket.severity
        schema:
          items:
            $ref: '#/components/schemas/ticket-severity'
          type: array
      - description: Filters for records with any of the provided SLA stages.
        explode: false
        in: query
        name: ticket.sla_summary.stage
        schema:
          items:
            $ref: '#/components/schemas/sla-summary-stage'
          type: array
      - description: Filters for tickets with any of the provided subtypes.
        explode: false
        in: query
        name: ticket.subtype
        schema:
          items:
            type: string
          type: array
      - description: Filters for work of the provided types.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      - description: Filters for work of the provided types.
        explode: false
        in: query
        name: types
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      - description: Filters for work belonging to the given vista.
        explode: false
        in: query
        name: vista
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
    post:
      description: Lists a collection of work items.
      operationId: works-list-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-list-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-list-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
  /internal/works.suggest:
    get:
      description: |
        ### Owner: anshu.avinash@devrev.ai
        ### Lists suggested works.
      operationId: works-suggest
      parameters:
      - description: |
          The cursor to resume iteration from. If not provided, then iteration
          starts from the beginning.
        explode: false
        in: query
        name: cursor
        schema:
          type: string
      - description: |
          The maximum number of works to return. If not set, then the default
          is '50'.
        explode: false
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - description: |
          The iteration mode to use, otherwise if not set, then "after" is
          used.
        explode: false
        in: query
        name: mode
        schema:
          $ref: '#/components/schemas/list-mode'
      - description: Filters for work of the provided types.
        explode: false
        in: query
        name: type
        schema:
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      - description: Filters for work of the provided types.
        explode: false
        in: query
        name: types
        schema:
          deprecated: true
          items:
            $ref: '#/components/schemas/work-type'
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-suggest-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
    post:
      description: Lists suggested works.
      operationId: works-suggest-post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-suggest-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-suggest-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
  /internal/works.update:
    post:
      description: Updates a work item's information.
      operationId: works-update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/works-update-request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/works-update-response'
          description: Success.
        "400":
          $ref: '#/components/responses/bad-request'
        "401":
          $ref: '#/components/responses/unauthorized'
        "403":
          $ref: '#/components/responses/forbidden'
        "404":
          $ref: '#/components/responses/not-found'
        "429":
          $ref: '#/components/responses/too-many-requests'
        "500":
          $ref: '#/components/responses/internal-server-error'
        "503":
          $ref: '#/components/responses/service-unavailable'
      tags:
      - works
      x-devrev-owner: anshu.avinash@devrev.ai
security:
- auth-token: []
servers:
- description: DevRev API endpoint.
  url: '{protocol}://{hostname}'
  variables:
    hostname:
      default: api.devrev.ai
      description: API hostname.
    protocol:
      default: https
      description: API protocol.
tags:
- description: Accounts management APIs
  name: accounts
- description: Dashboard and analytics APIs.
  name: analytics
- description: Articles management APIs.
  name: articles
- description: Artifact (file) management APIs.
  name: artifacts
- description: Auth Connections of DevOrg.
  name: auth-connection
- description: Security token interactions.
  name: auth-tokens
- description: DevRev command interactions.
  name: command
- description: DevRev commerce interactions.
  name: commerce
- description: DevRev conversation interaction.
  name: conversations
- description: DevRev customization.
  name: customization
- description: Dev organization interactions.
  name: dev-orgs
- description: Dev user interactions.
  name: dev-users
- description: DevRev discovery interactions.
  name: discovery
- description: Domain Identity APIs.
  name: domain-identity
- description: Capital Allocations
  name: efficap
- description: DevRev engagements.
  name: engagements
- description: Event source interactions.
  name: event-source
- description: Controls the user experience.
  name: experience
- description: DevRev flow interactions.
  name: flows
- description: Manages groups in a Dev organization.
  name: groups
- description: DevRev insight interactions.
  name: insights
- description: DevRev secrets interactions.
  name: keyring
- description: DevRev link interactions.
  name: links
- description: DevRev lobbies interaction.
  name: lobbies
- description: DevRev marketplace interactions.
  name: marketplace
- description: DevRev meetings interaction.
  name: meetings
- description: Workflow management APIs.
  name: microflows
- description: News API.
  name: news
- description: DevRev notifications
  name: notifications
- description: Oasis APIs
  name: oasis
- description: Object members API.
  name: object-members
- description: APIs to facilitate user onboarding.
  name: onboarding
- description: DevRev part interactions.
  name: parts
- description: Plug Settings APIs
  name: plug-settings
- description: DevRev preferences APIs.
  name: preferences
- description: DevRev profile Interactions
  name: profiles
- description: Plug Question-Answer APIs
  name: question-answers
- description: Recommendations at DevRev.
  name: recommendations
- description: Rev organization interactions.
  name: rev-orgs
- description: Rev user interactions.
  name: rev-users
- description: Roles of DevOrg.
  name: roles
- description: Room management APIs.
  name: rooms
- description: Rules APIs
  name: rules
- description: Management APIs for Availablility Schedules.
  name: schedules
- description: DevRev search.
  name: search
- description: Service account interactions
  name: service-accounts
- description: Management APIs for Service Level Agreements.
  name: slas
- description: Snap Components API.
  name: snap-components
- description: DevRev snap-in-packages interactions.
  name: snap-in-packages
- description: DevRev snap-in-versions interactions.
  name: snap-in-versions
- description: DevRev snap-ins interactions.
  name: snap-ins
- description: Real-time event socket APIs.
  name: sockets
- description: Surveys
  name: surveys
- description: System user interactions
  name: sys-users
- description: DevRev tag interactions.
  name: tags
- description: DevRev Telemetry interactions
  name: telemetry
- description: APIs to manage timeline entries for objects.
  name: timeline-entries
- description: Translation APIs.
  name: translation
- description: DevRev user interactions.
  name: users
- description: Verification API.
  name: verify
- description: DevRev vista interactions.
  name: vistas
- description: Object watchers APIs.
  name: watchers
- description: Webhook event APIs.
  name: webhooks
- description: DevRev work interactions.
  name: works
