# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  root: __package__.yml

service:
  auth: true
  base-path: ""
  endpoints:
    create:
      path: /auth-tokens.create
      method: POST
      request:
        name: AuthTokensCreateRequest
        body:
          properties:
            aud:
              docs: The expected audience values with respect to the token.
              type: optional<list<string>>
            client_id:
              docs: >
                An identifier that represents the application which is
                requesting
                the token. If no client_id is present in the request to generate
                an
                application access token (AAT), DevRev will generate a
                client_id.
                This client_id is only associated with an AAT.
              type: optional<string>
            expires_in:
              docs: |
                The expected validity lifetime of the token in number of days.
              type: optional<integer>
            grant_type:
              type: optional<root.AuthTokenGrantType>
            requested_token_type:
              type: optional<root.AuthTokenRequestedTokenType>
            rev_info:
              type: optional<root.AuthTokensRevInfo>
            scope:
              docs: |
                The requested set of scopes associated with the issued token. A
                space-delimited list of values in which the order of values does
                not matter.
              type: optional<string>
            subject_token:
              docs: |
                Represents the entity that requests the token. Not required when
                requesting an application access token (AAT).
              type: optional<string>
            subject_token_type:
              type: optional<root.AuthTokenSubjectTokenType>
            token_hint:
              docs: A hint that identifies the token.
              type: optional<string>
      response:
        docs: Success.
        type: root.AuthTokensCreateResponse

    delete:
      path: /auth-tokens.delete
      method: POST
      request:
        name: AuthTokensDeleteRequest
        body:
          properties:
            token_id:
              docs: >
                The unique identifier for the token under a given Dev
                organization.
                If no token ID is provided, then the token ID will be set from
                the
                JTI claim of the token in the authorization header.
              type: optional<string>

    get:
      path: /auth-tokens.get
      method: GET
      request:
        name: AuthTokensGetRequest
        query-parameters:
          token_id:
            type: string
      response:
        docs: Success.
        type: root.AuthTokensGetResponse

    list:
      path: /auth-tokens.list
      method: GET
      request:
        name: AuthTokensListRequest
        query-parameters:
          client_id:
            type: optional<string>
          requested_token_type:
            type: optional<root.AuthTokenRequestedTokenType>
          subject:
            type: optional<string>
      response:
        docs: Success.
        type: root.AuthTokensListResponse

    selfDelete:
      path: /auth-tokens.self.delete
      method: POST
      request:
        name: AuthTokensSelfDeleteRequest
        body:
          properties:
            requested_token_type:
              type: optional<root.AuthTokenRequestedTokenType>

    update:
      path: /auth-tokens.update
      method: POST
      request:
        name: AuthTokensUpdateRequest
        body:
          properties:
            token_hint:
              type: string
              docs: A hint that identifies the token.
            token_id:
              type: string
              docs: >
                The unique identifier of the token under a given Dev
                organization.
      response:
        docs: Success.
        type: root.AuthTokensUpdateResponse
